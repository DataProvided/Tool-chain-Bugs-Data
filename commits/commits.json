[{"commit_id": "49226", "date": "2008-04-04T18:42:16.929381Z", "author": "lattner", "msg": "Fix PR2049, updating Eli's patch that fixes to mainline.  This produces incorrect\ncode, but the codegen doesn't crash.  I'll file a bugzilla for the AST being wrong.\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGExprAgg.cpp\nM | /cfe/trunk/test/CodeGen/init-with-member-expr.c\n"}, {"commit_id": "50976", "date": "2008-05-12T17:29:34.904306Z", "author": "kremenek", "msg": "When reading in the DeclCtx during deserialization, register the DeclCtx of the\nScopedDecl with the backpatcher, and *not* a local variable on the stack. The\nvalue of DeclCtx gets filled in *later* by the backpatcher.\n\nThis fixes: http://llvm.org/bugs/show_bug.cgi?id=2308\n", "modified": "M | /cfe/trunk/lib/AST/DeclSerialization.cpp\n"}, {"commit_id": "64382", "date": "2009-02-12T17:33:11.631693Z", "author": "lattner", "msg": "fix the X86 backend to just drop llvm.declare nodes for VLAs instead of \nleaving them in the DAG and then getting selection errors.  This is a \nfix for PR3538.\n\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelDAGToDAG.cpp\nA | /llvm/trunk/test/CodeGen/X86/2009-02-12-DebugInfoVLA.ll\n"}, {"commit_id": "64383", "date": "2009-02-12T17:37:15.550312Z", "author": "lattner", "msg": "fix PR3538 for PPC\n", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCISelDAGToDAG.cpp\n"}, {"commit_id": "64384", "date": "2009-02-12T17:38:23.144565Z", "author": "lattner", "msg": "fix PR3538 for ARM.\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelDAGToDAG.cpp\n"}, {"commit_id": "66052", "date": "2009-03-04T19:17:10.256043Z", "author": "ddunbar", "msg": "ccc: Fix passing of -nozero-initialized-in-bss.\n - PR3722.\n", "modified": "M | /cfe/trunk/tools/ccc/ccclib/Arguments.py\nM | /cfe/trunk/tools/ccc/ccclib/Tools.py\n"}, {"commit_id": "73957", "date": "2009-06-23T16:36:10.034771Z", "author": "resistor", "msg": "Revert r73923, which broke clang.\n", "modified": "M | /llvm/trunk/include/llvm/Support/Timer.h\nM | /llvm/trunk/lib/Support/Timer.cpp\n"}, {"commit_id": "82614", "date": "2009-09-23T06:06:36.756522Z", "author": "lattner", "msg": "implement support for __builtin_eh_return_data_regno on x86-32 and x86-64.\nThis implements PR5034 and rdar://6836445.\n", "modified": "M | /cfe/trunk/clang.xcodeproj/project.pbxproj\nM | /cfe/trunk/include/clang/Basic/Builtins.def\nM | /cfe/trunk/include/clang/Basic/TargetInfo.h\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/Basic/Targets.cpp\nM | /cfe/trunk/lib/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/SemaChecking.cpp\nM | /cfe/trunk/test/Sema/builtins.c\n"}, {"commit_id": "86738", "date": "2009-11-10T22:39:09.003880Z", "author": "efriedma", "msg": "Fix for PR5454: make sure to use the right block as the predecessor in the\ngenerated PHI node for the null check of a new operator.\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGCXXExpr.cpp\nA | /cfe/trunk/test/CodeGenCXX/new-operator-phi.cpp\n"}, {"commit_id": "86755", "date": "2009-11-10T23:47:18.101098Z", "author": "fjahanian", "msg": "Diagnose illegally typed operator new/new[].\n\n", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/test/CodeGenCXX/new-operator-phi.cpp\nM | /cfe/trunk/test/SemaCXX/new-delete.cpp\n"}, {"commit_id": "90272", "date": "2009-12-01T22:31:51.925720Z", "author": "efriedma", "msg": "Make EmitStoreOfScalar generate a more sane representation of boolean stores.\n\"Fixes\" PR5645.\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGExpr.cpp\n"}, {"commit_id": "91545", "date": "2009-12-16T17:27:20.363426Z", "author": "andersca", "msg": "Baby steps towards fixing PR5589. If a class needs a vtable pointer, add one.", "modified": "M | /cfe/trunk/lib/CodeGen/CGRecordLayoutBuilder.cpp\nM | /cfe/trunk/lib/CodeGen/CGRecordLayoutBuilder.h\nM | /cfe/trunk/test/CodeGenCXX/class-layout.cpp\nM | /cfe/trunk/test/CodeGenCXX/virt.cpp\n"}, {"commit_id": "91573", "date": "2009-12-17T00:14:28.680105Z", "author": "efriedma", "msg": "Fix for PR5801: codegen memcpy, memmove, memset directly to LLVM intrinsics.\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGBuiltin.cpp\n"}, {"commit_id": "91748", "date": "2009-12-19T02:13:41.991637Z", "author": "andersca", "msg": "Correctly initialize the PrimaryBaseInfo if a base is null. Fixes PR5832.", "modified": "M | /cfe/trunk/include/clang/AST/RecordLayout.h\nM | /cfe/trunk/test/CodeGenCXX/virtual-function-calls.cpp\n"}, {"commit_id": "98360", "date": "2010-03-12T18:10:35.068533Z", "author": "lattner", "msg": "fix a bug emitting .secrel32 that I introduced, PR6587, patch\nby A.Mazur!\n", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfPrinter.cpp\n"}, {"commit_id": "98541", "date": "2010-03-15T10:54:44.635646Z", "author": "rjmccall", "msg": "Add support for -Wwrite-strings.  Patch by Mike M!  Fixes PR 4804.\n\n", "modified": "M | /cfe/trunk/include/clang/Basic/LangOptions.h\nM | /cfe/trunk/include/clang/Driver/CC1Options.td\nM | /cfe/trunk/lib/Frontend/CompilerInvocation.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaExprObjC.cpp\nA | /cfe/trunk/test/Sema/warn-write-strings.c\nA | /cfe/trunk/test/SemaObjC/warn-write-strings.m\n"}, {"commit_id": "98542", "date": "2010-03-15T14:01:44.926433Z", "author": "baldrick", "msg": "Treat copysignl like the other copysign functions.\n", "modified": "M | /llvm/trunk/lib/Analysis/InlineCost.cpp\n"}, {"commit_id": "99174", "date": "2010-03-22T14:43:41.977468Z", "author": "rafael", "msg": "When handling a TSK_ExplicitInstantiationDefinition after a\nTSK_ExplicitInstantiationDeclaration make sure we call\nMaybeMarkVirtualMembersReferenced with a method attached to the definition.\n\nRemove the hack that forced vtable emition with declarations.\n\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\n"}, {"commit_id": "99188", "date": "2010-03-22T18:10:25.890438Z", "author": "rafael", "msg": "revert r99174. It caused PR6677. Will try to debug why tonight.\n\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\n"}, {"commit_id": "100938", "date": "2010-04-10T18:34:14.309083Z", "author": "lattner", "msg": "fix PR6805: llvm.objectsize changed to take an i1 instead of an i32.\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nA | /cfe/trunk/test/CodeGen/catch-undef-behavior.c\n"}, {"commit_id": "102686", "date": "2010-04-30T02:51:06.823070Z", "author": "dgregor", "msg": "Add Clang version inspection macros. Fixes PR6681.\n", "modified": "M | /cfe/trunk/docs/LanguageExtensions.html\nM | /cfe/trunk/lib/Frontend/InitPreprocessor.cpp\nM | /cfe/trunk/test/Preprocessor/init.c\n"}, {"commit_id": "103085", "date": "2010-05-05T15:17:47.105150Z", "author": "d0k", "msg": "Try again if write(2) reports an recoverable error.\n\nThis should fix mysteriously crashing boost regression tests when stderr is\nmanaged by bjam (PR7043).\n", "modified": "M | /llvm/trunk/lib/Support/raw_ostream.cpp\n"}, {"commit_id": "105220", "date": "2010-05-31T12:50:41.532823Z", "author": "d0k", "msg": "Avoid swap when a copy suffices.\n", "modified": "M | /llvm/trunk/lib/Transforms/IPO/Inliner.cpp\n"}, {"commit_id": "105228", "date": "2010-05-31T17:30:14.105406Z", "author": "lattner", "msg": "fix PR6623: when optimizing for size, don't inline memcpy/memsets\nthat are too large.  This causes the freebsd bootloader to be too\nlarge apparently.\n\nIt's unclear if this should be an -Os or -Oz thing.  Thoughts welcome.\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAG.cpp\nM | /llvm/trunk/test/CodeGen/X86/memcpy.ll\n"}, {"commit_id": "106111", "date": "2010-06-16T16:54:04.127731Z", "author": "dgregor", "msg": "Don't poke at an undefined class type of a field. Fixes PR7355.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/test/SemaTemplate/instantiate-field.cpp\n"}, {"commit_id": "107071", "date": "2010-06-28T21:16:52.423598Z", "author": "djg", "msg": "Fix Value::stripPointerCasts and BasicAA to avoid trouble on\ncode in unreachable blocks, which have have use-def cycles.\nThis fixes PR7514.\n", "modified": "M | /llvm/trunk/lib/Analysis/BasicAliasAnalysis.cpp\nM | /llvm/trunk/lib/VMCore/Value.cpp\nA | /llvm/trunk/test/Analysis/BasicAA/unreachable-block.ll\n"}, {"commit_id": "107358", "date": "2010-07-01T00:21:21.506932Z", "author": "dgregor", "msg": "Be a bit more careful with undefined CXXRecordDecls. Fixes\nrdar://problem/8124080 and PR7118.\n", "modified": "M | /cfe/trunk/lib/Sema/JumpDiagnostics.cpp\nM | /cfe/trunk/lib/Sema/SemaLookup.cpp\nA | /cfe/trunk/test/SemaCXX/crash-8124080.cpp\n"}, {"commit_id": "107359", "date": "2010-07-01T00:21:50.972918Z", "author": "dgregor", "msg": "Add test case that I forgot to commit with r107354 (the implementation\nof C++ DR481). \n", "modified": "A | /cfe/trunk/test/CXX/basic/basic.scope/basic.scope.pdecl/p9.cpp\n"}, {"commit_id": "108050", "date": "2010-07-10T19:08:25.665487Z", "author": "stoklund", "msg": "Emit COPY instructions instead of using copyRegToReg in InstrEmitter,\nScheduleDAGEmit, TwoAddressLowering, and PHIElimination.\n\nThis switches the bulk of register copies to using COPY, but many less used\ncopyRegToReg calls remain.", "modified": "M | /llvm/trunk/lib/CodeGen/PHIElimination.cpp\nM | /llvm/trunk/lib/CodeGen/ScheduleDAGEmit.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/InstrEmitter.cpp\nM | /llvm/trunk/lib/CodeGen/TwoAddressInstructionPass.cpp\n"}, {"commit_id": "109392", "date": "2010-07-26T04:08:02.086632Z", "author": "dgregor", "msg": "Eliminate the \"minimal\" and printing parser actions, which only ever\nworked for C anyway. Also kills the -cc1 options -parse-noop and\n-parse-print-callbacks.\n", "modified": "M | /cfe/trunk/include/clang/Driver/CC1Options.td\nM | /cfe/trunk/include/clang/Frontend/FrontendActions.h\nM | /cfe/trunk/include/clang/Frontend/FrontendOptions.h\nM | /cfe/trunk/include/clang/Frontend/Utils.h\nM | /cfe/trunk/include/clang/Parse/Action.h\nM | /cfe/trunk/include/clang/Parse/Parser.h\nM | /cfe/trunk/lib/Frontend/CMakeLists.txt\nM | /cfe/trunk/lib/Frontend/CompilerInvocation.cpp\nM | /cfe/trunk/lib/Frontend/FrontendActions.cpp\nD | /cfe/trunk/lib/Frontend/PrintParserCallbacks.cpp\nA | /cfe/trunk/lib/Parse/Action.cpp\nM | /cfe/trunk/lib/Parse/CMakeLists.txt\nD | /cfe/trunk/lib/Parse/MinimalAction.cpp\nD | /cfe/trunk/test/Coverage/parse-callbacks.c\nD | /cfe/trunk/test/Coverage/parse-callbacks.m\nD | /cfe/trunk/test/Parser/2008-10-31-parse-noop-failure.c\nM | /cfe/trunk/test/Parser/block-block-storageclass.c\nM | /cfe/trunk/test/Parser/block-pointer-decl.c\nM | /cfe/trunk/test/Parser/cxx-condition.cpp\nM | /cfe/trunk/test/Parser/cxx-namespace-alias.cpp\nM | /cfe/trunk/test/Parser/expressions.c\nM | /cfe/trunk/test/Parser/expressions.m\nM | /cfe/trunk/test/Parser/method-prototype-1.m\nM | /cfe/trunk/test/Parser/objc-messaging-1.m\nM | /cfe/trunk/test/Parser/selector-1.m\nM | /cfe/trunk/test/Parser/types.c\nM | /cfe/trunk/tools/driver/cc1_main.cpp\n"}, {"commit_id": "109488", "date": "2010-07-27T04:16:58.446187Z", "author": "stoklund", "msg": "Add assertions that expose the PR7713 miscompilation: Accessing a stack slot\nwith a too-big register class.", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrInfo.cpp\n"}, {"commit_id": "109489", "date": "2010-07-27T04:17:01.660043Z", "author": "stoklund", "msg": "The isLoadFromStackSlot and isStoreToStackSlot have no way of reporting\nsubregister operands like this:\n\n%reg1040:sub_32bit<def> = MOV32rm <fi#-2>, 1, %reg0, 0, %reg0, %reg1040<imp-def>; mem:LD4[FixedStack-2](align=8)\n\nMake them return false when subreg operands are present. VirtRegRewriter is\nmaking bad assumptions otherwise.\n\nThis fixes PR7713.", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrInfo.cpp\n"}, {"commit_id": "109569", "date": "2010-07-28T01:07:35.123756Z", "author": "rjmccall", "msg": "When creating a jump destination, its scope should be the scope of the\nenclosing normal cleanup, not the top of the EH stack.  I'm *really*\nsurprised this hasn't been causing more problems.\n\nFixes rdar://problem/8231514.\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CodeGenFunction.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/test/CodeGenCXX/eh.cpp\n"}, {"commit_id": "109757", "date": "2010-07-29T16:12:45.837956Z", "author": "dgregor", "msg": "When dynamic_cast'ing from a type to itself, fill in the cast kind\nwith CK_NoOp. Fixes PR7727.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaCXXCast.cpp\n"}, {"commit_id": "110758", "date": "2010-08-11T00:12:36.469054Z", "author": "djg", "msg": "When analyzing loop exit conditions combined with and and or, don't\nmake any assumptions about when the two conditions will agree on when\nto permit the loop to exit. This fixes PR7845.\n", "modified": "M | /llvm/trunk/lib/Analysis/ScalarEvolution.cpp\nM | /llvm/trunk/test/Analysis/ScalarEvolution/max-trip-count.ll\n"}, {"commit_id": "111320", "date": "2010-08-17T23:03:53.679055Z", "author": "lattner", "msg": "report_fatal_error can't use errs(), because errs() can call \ninto report_fatal_error.  Just blast the string to stderr with write(2)\nand hope for the best!  Part of rdar://8318441\n", "modified": "M | /llvm/trunk/lib/Support/ErrorHandling.cpp\n"}, {"commit_id": "111321", "date": "2010-08-17T23:11:56.561029Z", "author": "lattner", "msg": "Fix the rest of rdar://8318441 which happens when a raw_fd_ostream\n(e.g. errs()) fails in close() due to (e.g.) a broken pipe.  As\npreviously written, the had_error() flag would get set and then\nthe raw_ostream dtor would report a fatal error.  There is nothing\nthe client can do about this and we have no way to report the error,\nso just eat it.\n\n", "modified": "M | /llvm/trunk/lib/Support/raw_ostream.cpp\n"}, {"commit_id": "113595", "date": "2010-09-10T17:57:00.052265Z", "author": "resistor", "msg": "Lower the unrolling theshold to 150.  Empirical tests indicate that this is a sweet spot in the performance per\ncode size increase curve.\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopUnrollPass.cpp\n"}, {"commit_id": "114544", "date": "2010-09-22T14:32:24.369980Z", "author": "akirtzidis", "msg": "Implement -Wpadded and -Wpacked.\n\n-Wpadded warns when undesired padding is introduced in a struct. (rdar://7469556)\n-Wpacked warns if a struct is given the packed attribute, but the packed attribute has no effect\n  on the layout or the size of the struct. Such structs may be mis-aligned for little benefit.\n\nThe warnings are emitted at the point where layout is calculated, that is at RecordLayoutBuilder.\nTo avoid calculating the layouts of all structs regardless of whether they are needed or not,\nI let the layouts be lazily constructed when needed. This has the disadvantage that the above warnings\nwill be emitted only when they are used for IR gen, and not e.g with -fsyntax-only:\n\n$ cat t.c\nstruct S {\n  char c;\n  int i;\n};\nvoid f(struct S* s) {}\n\n$ clang -fsyntax-only -Wpadded t.c\n$ clang -c -Wpadded t.c -o t.o\nt.c:3:7: warning: padding struct 'struct S' with 3 bytes to align 'i' [-Wpadded]\n  int i;\n      ^\n1 warning generated.\n\nThis is a good tradeoff between providing the warnings and not calculating layouts for all\nstructs in case the user has enabled a couple of rarely used warnings.", "modified": "M | /cfe/trunk/include/clang/AST/ASTContext.h\nM | /cfe/trunk/include/clang/Basic/DiagnosticGroups.td\nM | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/include/clang/Basic/SourceManager.h\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/AST/RecordLayoutBuilder.cpp\nA | /cfe/trunk/test/CodeGenCXX/warn-padded-packed.cpp\n"}, {"commit_id": "115299", "date": "2010-10-01T06:52:23.175921Z", "author": "lattner", "msg": "the second argument to __builtin_ia32_pslldqi128 must be an immediate,\nso it needs to be called from a macro, not a function.  This is a necessary\nbut insufficient step towards fixing PR8221\n", "modified": "M | /cfe/trunk/lib/Headers/emmintrin.h\n"}, {"commit_id": "115388", "date": "2010-10-02T00:09:12.808269Z", "author": "lattner", "msg": "when expanding a builtin, if the argument is required to be a constant,\nforce it to be a constant instead of emitting with EmitScalarExpr.  In\n-ftrapv mode, they are not the same.\n\nThis fixes rdar://8478728 + PR8221\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGBuiltin.cpp\n"}, {"commit_id": "116457", "date": "2010-10-14T00:05:07.248223Z", "author": "lattner", "msg": "add uadd_ov/usub_ov to apint, consolidate constant folding\nlogic to use the new APInt methods.  Among other things this\nimplements rdar://8501501 - llvm.smul.with.overflow.i32 should constant fold\n\nwhich comes from \"clang -ftrapv\", originally brought to my attention from PR8221.\n", "modified": "M | /llvm/trunk/include/llvm/ADT/APInt.h\nM | /llvm/trunk/lib/Analysis/ConstantFolding.cpp\nM | /llvm/trunk/lib/Support/APInt.cpp\nM | /llvm/trunk/test/Transforms/ConstProp/overflow-ops.ll\n"}, {"commit_id": "117254", "date": "2010-10-25T08:47:36.772856Z", "author": "chandlerc", "msg": "Improve the tracking of source locations for parentheses in constructor calls.\nThis adds them where missing, and traces them through PCH. We fix at least one\nbug in the extents found by the Index library, and make a lot of refactoring\ntools which care about the exact formulation of a constructor call easier to\nwrite. Also some minor cleanups to more consistently follow the friend pattern\ninstead of the setter pattern when rebuilding a serialized AST.\n\nPatch originally by Samuel Benzaquen.\n", "modified": "M | /cfe/trunk/include/clang/AST/ExprCXX.h\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/AST/ExprCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaInit.cpp\nM | /cfe/trunk/lib/Sema/TreeTransform.h\nM | /cfe/trunk/lib/Serialization/ASTReaderStmt.cpp\nM | /cfe/trunk/lib/Serialization/ASTWriterStmt.cpp\nM | /cfe/trunk/test/Index/load-stmts.cpp\n"}, {"commit_id": "118333", "date": "2010-11-06T07:53:11.309028Z", "author": "echristo", "msg": "Make sure we have movw on the target before using it.\n\nFixes 8559.\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMFastISel.cpp\n"}, {"commit_id": "118377", "date": "2010-11-07T15:03:27.947823Z", "author": "rafael", "msg": "Speed up AddSectionToTheEnd. It was walking all fragments in all sections.\nThis is really slow with we have 1000s of sections each with a corresponding\nrelocation section. Also, it is only used by the ELF writer to add\nbasic data, so there is no need to force a new layout pass.\n\nShould fix PR8563.", "modified": "M | /llvm/trunk/lib/MC/MCAssembler.cpp\n"}, {"commit_id": "118382", "date": "2010-11-07T20:14:31.118692Z", "author": "rafael", "msg": "Use ld directly on linux. Changes from the previous try:\n*) Try to detect as much as possible from the system itself, not the distro.\n   This should make it easier to port to a new distro and more likely to\n   work on a unknown one.\n*) The distro enum now doesn't include the arch. Just use the existing\n   host detection support in LLVM.\n*) Correctly handle --sysroot.\n\nA small regression is that now clang will pass bitcode file to the linker.\nThis is necessary for the gold plugin support to work.\n\nIt might be better to detect this at configure/cmake time, but doing it in\nc++ first is a lot easier.", "modified": "M | /cfe/trunk/include/clang/Driver/Options.td\nM | /cfe/trunk/lib/Driver/ToolChains.cpp\nM | /cfe/trunk/lib/Driver/ToolChains.h\nM | /cfe/trunk/lib/Driver/Tools.cpp\nM | /cfe/trunk/lib/Driver/Tools.h\nM | /cfe/trunk/test/Driver/emit-llvm.c\nM | /cfe/trunk/test/Driver/sysroot-flags.c\n"}, {"commit_id": "121635", "date": "2010-12-12T13:22:50.729810Z", "author": "baldrick", "msg": "Catch attempts to remove a deleted node from the CSE maps.  Better to\ncatch this here rather than later after accessing uninitialized memory\netc.  Fires when compiling the testcase in PR8237.\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAG.cpp\n"}, {"commit_id": "123320", "date": "2011-01-12T21:19:25.704878Z", "author": "dgregor", "msg": "wint_t is defined as 'unsigned int' on Linux. Fixes PR8938.\n", "modified": "M | /cfe/trunk/lib/Basic/Targets.cpp\nM | /cfe/trunk/test/Preprocessor/init.c\n"}, {"commit_id": "123571", "date": "2011-01-16T06:18:28.915107Z", "author": "lattner", "msg": "if an alloca is only ever accessed as a unit, and is accessed with load/store instructions,\nthen don't try to decimate it into its individual pieces.  This will just make a mess of the\nIR and is pointless if none of the elements are individually accessed.  This was generating\nreally terrible code for std::bitset (PR8980) because it happens to be lowered by clang\nas an {[8 x i8]} structure instead of {i64}.\n\nThe testcase now is optimized to:\n\ndefine i64 @test2(i64 %X) {\n  br label %L2\n\nL2:                                               ; preds = %0\n  ret i64 %X\n}\n\nbefore we generated:\n\ndefine i64 @test2(i64 %X) {\n  %sroa.store.elt = lshr i64 %X, 56\n  %1 = trunc i64 %sroa.store.elt to i8\n  %sroa.store.elt8 = lshr i64 %X, 48\n  %2 = trunc i64 %sroa.store.elt8 to i8\n  %sroa.store.elt9 = lshr i64 %X, 40\n  %3 = trunc i64 %sroa.store.elt9 to i8\n  %sroa.store.elt10 = lshr i64 %X, 32\n  %4 = trunc i64 %sroa.store.elt10 to i8\n  %sroa.store.elt11 = lshr i64 %X, 24\n  %5 = trunc i64 %sroa.store.elt11 to i8\n  %sroa.store.elt12 = lshr i64 %X, 16\n  %6 = trunc i64 %sroa.store.elt12 to i8\n  %sroa.store.elt13 = lshr i64 %X, 8\n  %7 = trunc i64 %sroa.store.elt13 to i8\n  %8 = trunc i64 %X to i8\n  br label %L2\n\nL2:                                               ; preds = %0\n  %9 = zext i8 %1 to i64\n  %10 = shl i64 %9, 56\n  %11 = zext i8 %2 to i64\n  %12 = shl i64 %11, 48\n  %13 = or i64 %12, %10\n  %14 = zext i8 %3 to i64\n  %15 = shl i64 %14, 40\n  %16 = or i64 %15, %13\n  %17 = zext i8 %4 to i64\n  %18 = shl i64 %17, 32\n  %19 = or i64 %18, %16\n  %20 = zext i8 %5 to i64\n  %21 = shl i64 %20, 24\n  %22 = or i64 %21, %19\n  %23 = zext i8 %6 to i64\n  %24 = shl i64 %23, 16\n  %25 = or i64 %24, %22\n  %26 = zext i8 %7 to i64\n  %27 = shl i64 %26, 8\n  %28 = or i64 %27, %25\n  %29 = zext i8 %8 to i64\n  %30 = or i64 %29, %28\n  ret i64 %30\n}\n\nIn this case, instcombine was able to eliminate the nonsense, but in PR8980 enough\nPHIs are in play that instcombine backs off.  It's better to not generate this stuff\nin the first place.\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/ScalarReplAggregates.cpp\nM | /llvm/trunk/test/Transforms/ScalarRepl/basictest.ll\n"}, {"commit_id": "124078", "date": "2011-01-23T17:58:26.246123Z", "author": "rafael", "msg": "Add support for the --noexecstack option. Fixes PR8762.", "modified": "M | /cfe/trunk/include/clang/Driver/CC1AsOptions.td\nM | /cfe/trunk/tools/driver/cc1as_main.cpp\n"}, {"commit_id": "124662", "date": "2011-02-01T15:24:58.581203Z", "author": "dgregor", "msg": "Fix a thinko where I didn't update a consistency check for\nPackExpansionType in the AST reader. We need more testing for variadic\ntemplates + PCH, but this fixes PR9073.\n", "modified": "M | /cfe/trunk/lib/Serialization/ASTReader.cpp\nA | /cfe/trunk/test/PCH/cxx-variadic-templates.cpp\nA | /cfe/trunk/test/PCH/cxx-variadic-templates.h\n"}, {"commit_id": "126541", "date": "2011-02-26T08:27:17.444475Z", "author": "rjmccall", "msg": "Don't crash during constant-evaluation of 1/(1/0).  PR9262.\n\n", "modified": "M | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/test/Sema/i-c-e.c\n"}, {"commit_id": "127563", "date": "2011-03-13T03:48:04.030433Z", "author": "kremenek", "msg": "Fix CFG assertion failure reported in PR 9467.  This was due to recent changes in optimizing CFGs for switch statements.", "modified": "M | /cfe/trunk/lib/Analysis/CFG.cpp\nM | /cfe/trunk/test/Analysis/misc-ps.m\n"}, {"commit_id": "127724", "date": "2011-03-16T02:53:32.249715Z", "author": "chapuni", "msg": "Windows/PathV2.inc: [PR8520] Recognize \"NUL\" as special (character) file.\n\nFIXME: It is a temporal hack. We should detect as many \"special file name\" as possible.", "modified": "M | /llvm/trunk/lib/Support/Windows/PathV2.inc\n"}, {"commit_id": "129337", "date": "2011-04-12T01:01:22.495653Z", "author": "rjmccall", "msg": "Ignore indirect field declarations.  Fixes PR9570.\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/test/CodeGenCXX/global-init.cpp\n"}, {"commit_id": "129673", "date": "2011-04-17T21:56:13.118085Z", "author": "andersca", "msg": "When laying out bases in, always try the \"base subobject\" LLVM type. If it\nturns out that a field or base needs to be laid out in the tail padding of\nthe base, CGRecordLayoutBuilder::ResizeLastBaseFieldIfNecessary will convert\nit to an array of i8.\n\nI've audited the new test results to make sure that they are still valid. I've\nalso verified that we pass a self-host with this change.\n\nThis (finally) fixes PR5589!\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGRecordLayoutBuilder.cpp\nM | /cfe/trunk/test/CodeGenCXX/class-layout.cpp\nM | /cfe/trunk/test/CodeGenCXX/global-init.cpp\nM | /cfe/trunk/test/CodeGenCXX/pointers-to-data-members.cpp\nM | /cfe/trunk/test/CodeGenCXX/pragma-pack.cpp\nM | /cfe/trunk/test/CodeGenCXX/x86_64-arguments.cpp\n"}, {"commit_id": "131126", "date": "2011-05-10T14:12:22.649617Z", "author": "rafael", "msg": "Revert 131114. This fixes PR9884.", "modified": "M | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\n"}, {"commit_id": "131446", "date": "2011-05-17T00:46:38.130271Z", "author": "akirtzidis", "msg": "Reapply the commits that r131401 reverted and add a fix for PR9927.", "modified": "M | /cfe/trunk/include/clang/AST/ASTContext.h\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/test/CodeGenObjC/encode-test.m\nD | /cfe/trunk/test/CodeGenObjCXX/PR9927.mm\nM | /cfe/trunk/test/CodeGenObjCXX/encode.mm\n"}, {"commit_id": "131515", "date": "2011-05-18T01:06:45.908437Z", "author": "coppro", "msg": "Force declaration of implicit members in C++0x mode.\n\nI hear at least one person crying out in anguish, but it's unfortunately\nnecessary to avoid infinite loops with mutually dependent constructors\ntrying to call each other and determine if they are deleted.\n\nIt might be possible to go back to the old behavior if we can implement\npart-of-file lookups efficiently, or if a solution is discovered by\nwhich we can safely detect and avoid infinite recusion.", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\n"}, {"commit_id": "131520", "date": "2011-05-18T03:41:58.131883Z", "author": "coppro", "msg": "Implement an additional fix for infinite recursion of deleted special\nmember functions by making sure that they're on the record before\nchecking for deletion.\n\nAlso make sure source locations are valid to avoid crashes.\n\nUnfortunately, the declare-all-implicit-members approach is still\nrequired in order to ensure that dependency loops do not result in\nincorrectly deleting functions (since they are to be deleted at the\ndeclaration point per the standard).\n\nFixes PR9917", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nA | /cfe/trunk/test/SemaCXX/defaulted-ctor-loop.cpp\n"}, {"commit_id": "131576", "date": "2011-05-18T21:02:18.895606Z", "author": "djg", "msg": "When forming an ICmpZero LSRUse, normalize the non-IV operand\nof the comparison, so that the resulting expression is fully\nnormalized. This fixes PR9939.\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopStrengthReduce.cpp\nA | /llvm/trunk/test/Transforms/LoopStrengthReduce/post-inc-icmpzero.ll\n"}, {"commit_id": "131614", "date": "2011-05-19T00:56:53.933361Z", "author": "kremenek", "msg": "Teach static analyzer to analyze Objective-C methods in category implementations.", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp\nM | /cfe/trunk/test/Analysis/misc-ps.m\n"}, {"commit_id": "131632", "date": "2011-05-19T05:13:44.651910Z", "author": "cornedbee", "msg": "Reapply r121528, fixing PR9941 by delaying the exception specification check for destructors until the class is complete and destructors have been adjusted.", "modified": "M | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaExceptionSpec.cpp\nA | /cfe/trunk/test/CXX/special/class.dtor/p3-0x.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx0x-delegating-ctors.cpp\nM | /cfe/trunk/test/CodeGenCXX/eh.cpp\nD | /cfe/trunk/test/SemaCXX/pr9941.cpp\n"}, {"commit_id": "131640", "date": "2011-05-19T16:25:27.432914Z", "author": "cornedbee", "msg": "Fix PR9941 again, this time for templates.", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/test/CXX/special/class.dtor/p3-0x.cpp\n"}, {"commit_id": "131722", "date": "2011-05-20T05:57:18.312525Z", "author": "cornedbee", "msg": "Fix PR9941 for out-of-line template destructors too.", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaExceptionSpec.cpp\nM | /cfe/trunk/test/CXX/special/class.dtor/p3-0x.cpp\n"}, {"commit_id": "131735", "date": "2011-05-20T16:38:50.364179Z", "author": "dgregor", "msg": "Introduce Type::isSignedIntegerOrEnumerationType() and\nType::isUnsignedIntegerOrEnumerationType(), which are like\nType::isSignedIntegerType() and Type::isUnsignedIntegerType() but also\nconsider the underlying type of a C++0x scoped enumeration type.\n\nAudited all callers to the existing functions, switching those that\nneed to also handle scoped enumeration types (e.g., those that deal\nwith constant values) over to the new functions. Fixes PR9923 /\n<rdar://problem/9447851>.\n", "modified": "M | /cfe/trunk/include/clang/AST/ASTContext.h\nM | /cfe/trunk/include/clang/AST/CanonicalType.h\nM | /cfe/trunk/include/clang/AST/Type.h\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/AST/Type.cpp\nM | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprConstant.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/CodeGen/CGRecordLayoutBuilder.cpp\nM | /cfe/trunk/lib/Sema/SemaCXXCast.cpp\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaStmt.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Core/ExprEngine.cpp\nA | /cfe/trunk/test/CodeGenCXX/scoped-enums.cpp\n"}, {"commit_id": "132485", "date": "2011-06-02T21:24:42.313535Z", "author": "efriedma", "msg": "PR10067: Add missing safety check to call return transformation in MemCpyOpt::processStore.  If something accesses the dest of the \"copy\" between the call and the copy, the performCallSlotOptzn transformation is not valid.\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/MemCpyOptimizer.cpp\nA | /llvm/trunk/test/Transforms/MemCpyOpt/2011-06-02-CallSlotOverwritten.ll\n"}, {"commit_id": "132659", "date": "2011-06-05T05:27:58.861233Z", "author": "dgregor", "msg": "Add name mangling for expr .* expr. Fixes PR9983 / <rdar://problem/9486332>.\n", "modified": "M | /cfe/trunk/lib/AST/ItaniumMangle.cpp\nM | /cfe/trunk/test/CodeGenCXX/mangle-exprs.cpp\n"}, {"commit_id": "132676", "date": "2011-06-06T05:46:34.197904Z", "author": "efriedma", "msg": "PR10077: fix fast-isel of extractvalue of aggregate constants.\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/FastISel.cpp\nA | /llvm/trunk/test/CodeGen/X86/fast-isel-agg-constant.ll\n"}, {"commit_id": "132998", "date": "2011-06-14T16:42:44.149974Z", "author": "dgregor", "msg": "When profiling FunctionProtoTypes, don't canonicalize the expression\nin a noexcept exception specification because it isn't part of the\ncanonical type. This ensures that we keep the exact expression written\nin the noexcept exception specification, rather than accidentally\n\"adopting\" a previously-written and canonically \"equivalent\" function\nprototype. Fixes PR10087.\n\n", "modified": "M | /cfe/trunk/lib/AST/Type.cpp\nA | /cfe/trunk/test/CXX/except/except.spec/canonical.cpp\n"}, {"commit_id": "133907", "date": "2011-06-27T08:31:58.585202Z", "author": "chandlerc", "msg": "Fix missing braces around two statements that were intended to be part\nof a single if block. This is really annoying to track down and test.\nSilly changes to the test case caused it to stop showing up. I wish\nthere were a more concrete way of asserting that a note attaches to the\nintended diagnostic.\n\nThis fixes PR10195.", "modified": "M | /cfe/trunk/lib/Sema/SemaOverload.cpp\nM | /cfe/trunk/test/SemaCXX/warn-pure-virtual-call-from-ctor-dtor.cpp\n"}, {"commit_id": "133996", "date": "2011-06-28T05:44:06.022996Z", "author": "atrick", "msg": "Cleanup. Fix a stupid variable name.\n", "modified": "M | /llvm/trunk/include/llvm/Analysis/ScalarEvolutionExpander.h\n"}, {"commit_id": "134248", "date": "2011-07-01T19:24:36.794868Z", "author": "hhinnant", "msg": "Correct for new rules regarding implicitly deleted special members. http://llvm.org/bugs/show_bug.cgi?id=10191", "modified": "M | /libcxx/trunk/include/map\nM | /libcxx/trunk/include/memory\nM | /libcxx/trunk/include/set\nM | /libcxx/trunk/include/unordered_map\nM | /libcxx/trunk/include/unordered_set\nM | /libcxx/trunk/include/utility\nM | /libcxx/trunk/test/utilities/function.objects/func.wrap/func.wrap.func/func.wrap.func.con/copy.pass.cpp\nM | /libcxx/trunk/test/utilities/function.objects/func.wrap/func.wrap.func/func.wrap.func.con/copy_assign.pass.cpp\n"}, {"commit_id": "134515", "date": "2011-07-06T18:14:43.896166Z", "author": "dgregor", "msg": "Don't try to type-check a copy construction of an exception\ndeclaration with dependent type. Fixes PR10232 /\n<rdar://problem/9700653>.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/test/SemaTemplate/instantiate-try-catch.cpp\n"}, {"commit_id": "134831", "date": "2011-07-09T17:41:47.636494Z", "author": "lattner", "msg": "clang side to match the LLVM IR type system rewrite patch.\n", "modified": "M | /cfe/trunk\nM | /cfe/trunk/lib/CodeGen/ABIInfo.h\nM | /cfe/trunk/lib/CodeGen/CGBlocks.cpp\nM | /cfe/trunk/lib/CodeGen/CGBuiltin.cpp\nM | /cfe/trunk/lib/CodeGen/CGCXXABI.cpp\nM | /cfe/trunk/lib/CodeGen/CGCXXABI.h\nM | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/lib/CodeGen/CGDeclCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CGException.cpp\nM | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/CodeGen/CGObjC.cpp\nM | /cfe/trunk/lib/CodeGen/CGObjCGNU.cpp\nM | /cfe/trunk/lib/CodeGen/CGObjCMac.cpp\nM | /cfe/trunk/lib/CodeGen/CGRecordLayout.h\nM | /cfe/trunk/lib/CodeGen/CGRecordLayoutBuilder.cpp\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.h\nM | /cfe/trunk/lib/CodeGen/CodeGenTypes.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenTypes.h\nM | /cfe/trunk/lib/CodeGen/ItaniumCXXABI.cpp\nM | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nM | /cfe/trunk/test/CXX/except/except.spec/p14-ir.cpp\nM | /cfe/trunk/test/CodeGen/annotate.c\nM | /cfe/trunk/test/CodeGen/arm-arguments.c\nM | /cfe/trunk/test/CodeGen/arm-asm-variable.c\nM | /cfe/trunk/test/CodeGen/asm-errors.c\nM | /cfe/trunk/test/CodeGen/bitfield-2.c\nM | /cfe/trunk/test/CodeGen/blocksignature.c\nM | /cfe/trunk/test/CodeGen/blockstret.c\nM | /cfe/trunk/test/CodeGen/complex-indirect.c\nM | /cfe/trunk/test/CodeGen/const-arithmetic.c\nM | /cfe/trunk/test/CodeGen/const-init.c\nM | /cfe/trunk/test/CodeGen/decl.c\nM | /cfe/trunk/test/CodeGen/designated-initializers.c\nM | /cfe/trunk/test/CodeGen/flexible-array-init.c\nM | /cfe/trunk/test/CodeGen/global-init.c\nM | /cfe/trunk/test/CodeGen/mmx-inline-asm.c\nM | /cfe/trunk/test/CodeGen/ms-anonymous-struct.c\nM | /cfe/trunk/test/CodeGen/packed-union.c\nM | /cfe/trunk/test/CodeGen/pragma-pack-3.c\nM | /cfe/trunk/test/CodeGen/regparm.c\nM | /cfe/trunk/test/CodeGen/transparent-union.c\nM | /cfe/trunk/test/CodeGen/trapv.c\nM | /cfe/trunk/test/CodeGen/union-init2.c\nM | /cfe/trunk/test/CodeGen/volatile-1.c\nM | /cfe/trunk/test/CodeGen/volatile-2.c\nM | /cfe/trunk/test/CodeGen/x86_32-arguments-darwin.c\nM | /cfe/trunk/test/CodeGen/x86_64-arguments.c\nM | /cfe/trunk/test/CodeGenCXX/blocks.cpp\nM | /cfe/trunk/test/CodeGenCXX/class-layout.cpp\nM | /cfe/trunk/test/CodeGenCXX/constructors.cpp\nM | /cfe/trunk/test/CodeGenCXX/copy-constructor-elim-2.cpp\nM | /cfe/trunk/test/CodeGenCXX/copy-initialization.cpp\nM | /cfe/trunk/test/CodeGenCXX/delete.cpp\nM | /cfe/trunk/test/CodeGenCXX/destructors.cpp\nM | /cfe/trunk/test/CodeGenCXX/eh.cpp\nM | /cfe/trunk/test/CodeGenCXX/for-range.cpp\nM | /cfe/trunk/test/CodeGenCXX/global-init.cpp\nM | /cfe/trunk/test/CodeGenCXX/mangle-subst-std.cpp\nM | /cfe/trunk/test/CodeGenCXX/mangle-template.cpp\nM | /cfe/trunk/test/CodeGenCXX/member-function-pointers.cpp\nM | /cfe/trunk/test/CodeGenCXX/new-overflow.cpp\nM | /cfe/trunk/test/CodeGenCXX/pointers-to-data-members.cpp\nM | /cfe/trunk/test/CodeGenCXX/references.cpp\nM | /cfe/trunk/test/CodeGenCXX/static-init-3.cpp\nM | /cfe/trunk/test/CodeGenCXX/template-anonymous-types.cpp\nM | /cfe/trunk/test/CodeGenCXX/virt-call-offsets.cpp\nM | /cfe/trunk/test/CodeGenCXX/virtual-bases.cpp\nM | /cfe/trunk/test/CodeGenCXX/virtual-functions-incomplete-types.cpp\nM | /cfe/trunk/test/CodeGenCXX/volatile-1.cpp\nM | /cfe/trunk/test/CodeGenCXX/vtable-pointer-initialization.cpp\nM | /cfe/trunk/test/CodeGenCXX/x86_32-arguments.cpp\nM | /cfe/trunk/test/CodeGenObjC/arc-foreach.m\nM | /cfe/trunk/test/CodeGenObjC/arc.m\nM | /cfe/trunk/test/CodeGenObjC/blocks.m\nM | /cfe/trunk/test/CodeGenObjC/property-list-in-class.m\nM | /cfe/trunk/test/CodeGenObjC/variadic-sends.m\nM | /cfe/trunk/test/CodeGenObjCXX/property-object-conditional-exp.mm\nM | /cfe/trunk/test/CodeGenObjCXX/property-objects.mm\nM | /cfe/trunk/test/SemaCXX/warn-unreachable.cpp\n"}, {"commit_id": "134966", "date": "2011-07-12T04:53:39.347711Z", "author": "lattner", "msg": "fix PR10335 by watching out for IR type compatibility in call argument lists.\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/test/CodeGen/call.c\n"}, {"commit_id": "136081", "date": "2011-07-26T15:11:03.128601Z", "author": "dgregor", "msg": "When we decide not to rebuild an instantiated C++ 'new' expression\nthat allocates an array of objects with a non-trivial destructor, be\nsure to mark the destructor is \"used\". Fixes PR10480 /\n<rdar://problem/9834317>.\n", "modified": "M | /cfe/trunk/lib/Sema/TreeTransform.h\nM | /cfe/trunk/test/SemaTemplate/instantiate-expr-4.cpp\n"}, {"commit_id": "137383", "date": "2011-08-11T23:26:42.624959Z", "author": "akirtzidis", "msg": "Fix a PCH crash bug where we kept a reference inside a DenseMap while the map was getting modified.\n\nNo test case, sorry. It's one of those bugs where it's really really hard to make one. rdar://9910862.", "modified": "M | /cfe/trunk/lib/Serialization/ASTReader.cpp\n"}, {"commit_id": "137567", "date": "2011-08-14T00:34:04.307801Z", "author": "chapuni", "msg": "EE: Provide the symbol \"lseek64\" explicitly with <unistd.h> on Linux glibc.\n\nWith libcxx, it seems <unistd.h> would not be provided. Thanks to Ryuta Suzuki.", "modified": "M | /llvm/trunk/lib/ExecutionEngine/JIT/Intercept.cpp\nM | /llvm/trunk/lib/ExecutionEngine/MCJIT/Intercept.cpp\n"}, {"commit_id": "138213", "date": "2011-08-20T21:36:38.472613Z", "author": "d0k", "msg": "PathV2: Handle more reserved filenames on windows.\n\nPatch by Aaron Ballman!\n", "modified": "M | /llvm/trunk/lib/Support/Windows/PathV2.inc\n"}, {"commit_id": "138402", "date": "2011-08-23T22:35:38.375460Z", "author": "grosser", "msg": "Register Polly passes automatically\n\nPolly adds, after it is loaded into opt or clang, its passes to the default set\nof -O3 passes. This means optimizing a program with clang and Polly becomes as\nsimple as executing.\n\nclang -Xclang -load -Xclang lib/LLVMPolly.so -O3 program.c\n\nThe same should work for dragonegg powered gfortran, g++, ... or any other tool\nthat uses the PassManagerBuilder.\n\nWarning: Even though using Polly became with this commit extremly easy, Polly\n         is still Pre-Alpha Quality. This means in most cases it will rather\n         destroy the world than doing anything positive. ;-)", "modified": "M | /polly/trunk/lib/CMakeLists.txt\nA | /polly/trunk/lib/RegisterPasses.cpp\n"}, {"commit_id": "138789", "date": "2011-08-30T00:57:29.466121Z", "author": "rjmccall", "msg": "Be sure to emit lvalue-to-rvalue casts for loads from x-values.\nDoing this happens to disrupt the pattern that ARC was looking for\nfor move optimizations, so we need to fix that simultaneously.\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGObjC.cpp\nM | /cfe/trunk/lib/Sema/SemaOverload.cpp\nM | /cfe/trunk/test/CodeGenCXX/rvalue-references.cpp\n"}, {"commit_id": "139144", "date": "2011-09-06T16:38:46.947963Z", "author": "dgregor", "msg": "Finish implementing (de-)serialization of the CXXDefinitionData bits\nneeded for implicit move constructors and move assignment\noperators. Fixes PR10847.\n", "modified": "M | /cfe/trunk/lib/Serialization/ASTReaderDecl.cpp\nM | /cfe/trunk/lib/Serialization/ASTWriter.cpp\nA | /cfe/trunk/test/PCH/cxx-implicit-moves.cpp\n"}, {"commit_id": "139751", "date": "2011-09-14T23:13:28.815018Z", "author": "dpatel", "msg": "Add support to emit debug info for C++0x nullptr type.\n", "modified": "M | /llvm/trunk/include/llvm/Analysis/DIBuilder.h\nM | /llvm/trunk/lib/Analysis/DIBuilder.cpp\nM | /llvm/trunk/lib/Analysis/DebugInfo.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\n"}, {"commit_id": "139752", "date": "2011-09-14T23:14:14.310404Z", "author": "dpatel", "msg": "Emit debug info for c++0x nullptr.\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-char16.cpp\nA | /cfe/trunk/test/CodeGenCXX/debug-info-nullptr.cpp\n"}, {"commit_id": "140093", "date": "2011-09-19T23:22:41.842682Z", "author": "echristo", "msg": "Remove llvmc and assorted build machinery for it.\n\nThe problems that llvmc solved have largely been subsumed with the\ntasks that the clang driver can accomplish, but llvmc lacks flexibility\nand depends too heavily on the EOL'd llvm-gcc.", "modified": "M | /llvm/trunk/Makefile\nM | /llvm/trunk/autoconf/configure.ac\nM | /llvm/trunk/configure\nD | /llvm/trunk/test/LLVMC/Alias.td\nD | /llvm/trunk/test/LLVMC/AppendCmdHook.td\nD | /llvm/trunk/test/LLVMC/C/dg.exp\nD | /llvm/trunk/test/LLVMC/C/emit-llvm-opt.c\nD | /llvm/trunk/test/LLVMC/C/emit-llvm.c\nD | /llvm/trunk/test/LLVMC/C/hello.c\nD | /llvm/trunk/test/LLVMC/C/include.c\nD | /llvm/trunk/test/LLVMC/C/opt-test.c\nD | /llvm/trunk/test/LLVMC/C/sink.c\nD | /llvm/trunk/test/LLVMC/C/wall.c\nD | /llvm/trunk/test/LLVMC/C++/dash-x.cpp\nD | /llvm/trunk/test/LLVMC/C++/dg.exp\nD | /llvm/trunk/test/LLVMC/C++/filelist.cpp\nD | /llvm/trunk/test/LLVMC/C++/hello.cpp\nD | /llvm/trunk/test/LLVMC/C++/just-compile.cpp\nD | /llvm/trunk/test/LLVMC/C++/together.cpp\nD | /llvm/trunk/test/LLVMC/C++/unknown_suffix.unk\nD | /llvm/trunk/test/LLVMC/EmptyCompilationGraph.td\nD | /llvm/trunk/test/LLVMC/EnvParentheses.td\nD | /llvm/trunk/test/LLVMC/ForwardAs.td\nD | /llvm/trunk/test/LLVMC/ForwardTransformedValue.td\nD | /llvm/trunk/test/LLVMC/ForwardValue.td\nD | /llvm/trunk/test/LLVMC/HookWithArguments.td\nD | /llvm/trunk/test/LLVMC/HookWithInFile.td\nD | /llvm/trunk/test/LLVMC/Init.td\nD | /llvm/trunk/test/LLVMC/LanguageMap.td\nD | /llvm/trunk/test/LLVMC/MultiValuedOption.td\nD | /llvm/trunk/test/LLVMC/MultipleCompilationGraphs.td\nD | /llvm/trunk/test/LLVMC/MultipleOutputLanguages.td\nD | /llvm/trunk/test/LLVMC/NoActions.td\nD | /llvm/trunk/test/LLVMC/NoCompilationGraph.td\nD | /llvm/trunk/test/LLVMC/ObjC/dg.exp\nD | /llvm/trunk/test/LLVMC/ObjC/hello.m\nD | /llvm/trunk/test/LLVMC/ObjC++/dg.exp\nD | /llvm/trunk/test/LLVMC/ObjC++/hello.mm\nD | /llvm/trunk/test/LLVMC/OneOrMore.td\nD | /llvm/trunk/test/LLVMC/OptionPreprocessor.td\nD | /llvm/trunk/test/LLVMC/OutputSuffixHook.td\nD | /llvm/trunk/test/LLVMC/TestWarnings.td\nD | /llvm/trunk/test/LLVMC/dg.exp\nD | /llvm/trunk/test/LLVMC/test_data/false.c\nD | /llvm/trunk/test/LLVMC/test_data/false.cpp\nD | /llvm/trunk/test/LLVMC/test_data/false2.cpp\nD | /llvm/trunk/test/LLVMC/test_data/together.c\nM | /llvm/trunk/tools/Makefile\nD | /llvm/trunk/tools/llvmc/CMakeLists.txt\nD | /llvm/trunk/tools/llvmc/Makefile\nD | /llvm/trunk/tools/llvmc/doc/LLVMC-Reference.rst\nD | /llvm/trunk/tools/llvmc/doc/LLVMC-Tutorial.rst\nD | /llvm/trunk/tools/llvmc/doc/Makefile\nD | /llvm/trunk/tools/llvmc/doc/img/lines.gif\nD | /llvm/trunk/tools/llvmc/examples/CMakeLists.txt\nD | /llvm/trunk/tools/llvmc/examples/Hello/CMakeLists.txt\nD | /llvm/trunk/tools/llvmc/examples/Hello/Hello.cpp\nD | /llvm/trunk/tools/llvmc/examples/Hello/Makefile\nD | /llvm/trunk/tools/llvmc/examples/Makefile\nD | /llvm/trunk/tools/llvmc/examples/Simple/CMakeLists.txt\nD | /llvm/trunk/tools/llvmc/examples/Simple/Makefile\nD | /llvm/trunk/tools/llvmc/examples/Simple/Simple.cpp\nD | /llvm/trunk/tools/llvmc/examples/Simple/Simple.td\nD | /llvm/trunk/tools/llvmc/examples/Skeleton/AutoGenerated.td\nD | /llvm/trunk/tools/llvmc/examples/Skeleton/CMakeLists.txt\nD | /llvm/trunk/tools/llvmc/examples/Skeleton/Hooks.cpp\nD | /llvm/trunk/tools/llvmc/examples/Skeleton/Main.cpp\nD | /llvm/trunk/tools/llvmc/examples/Skeleton/Makefile\nD | /llvm/trunk/tools/llvmc/examples/Skeleton/README\nD | /llvm/trunk/tools/llvmc/examples/mcc16/CMakeLists.txt\nD | /llvm/trunk/tools/llvmc/examples/mcc16/Hooks.cpp\nD | /llvm/trunk/tools/llvmc/examples/mcc16/Main.cpp\nD | /llvm/trunk/tools/llvmc/examples/mcc16/Makefile\nD | /llvm/trunk/tools/llvmc/examples/mcc16/PIC16.td\nD | /llvm/trunk/tools/llvmc/examples/mcc16/README\nD | /llvm/trunk/tools/llvmc/src/AutoGenerated.td\nD | /llvm/trunk/tools/llvmc/src/Base.td.in\nD | /llvm/trunk/tools/llvmc/src/CMakeLists.txt\nD | /llvm/trunk/tools/llvmc/src/Clang.td\nD | /llvm/trunk/tools/llvmc/src/Hooks.cpp\nD | /llvm/trunk/tools/llvmc/src/Main.cpp\nD | /llvm/trunk/tools/llvmc/src/Makefile\n"}, {"commit_id": "140356", "date": "2011-09-23T00:13:02.496290Z", "author": "efriedma", "msg": "PR10989: Don't print .hidden on Windows.\n\n", "modified": "M | /llvm/trunk/lib/MC/MCAsmInfoCOFF.cpp\nM | /llvm/trunk/test/CodeGen/X86/hidden-vis.ll\n"}, {"commit_id": "140542", "date": "2011-09-26T18:14:24.822987Z", "author": "akirtzidis", "msg": "Fix assertion hit when @encoding C++ classes. rdar://10172840 & http://llvm.org/PR10990", "modified": "M | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/test/CodeGenObjCXX/encode.mm\n"}, {"commit_id": "141418", "date": "2011-10-07T21:55:43.815257Z", "author": "akirtzidis", "msg": "In DeclContext::LoadLexicalDeclsFromExternalStorage don't clear out\nthe fields if they are already loaded, just ignore them when we are building\nthe chain in BuildDeclChain.\n\nThis fixes an lldb issue where fields were removed and not getting re-added\nbecause lldb is based on ASTImporter adding decls to DeclContext and fields\nwere already added before by the ASTImporter.\n\nWe should really simplify the interaction between DeclContext <-> lldb\ngoing forward..\n\nrdar://10246067", "modified": "M | /cfe/trunk/include/clang/AST/DeclBase.h\nM | /cfe/trunk/lib/AST/Decl.cpp\nM | /cfe/trunk/lib/AST/DeclBase.cpp\n"}, {"commit_id": "141777", "date": "2011-10-12T15:40:49.570830Z", "author": "dgregor", "msg": "Teach __has_nothrow_assign not to complain about access (GCC and EDG\nignore access entirely for it) and not to crash on assignment operator\ntemplates. Fixes PR11110.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/test/SemaCXX/type-traits.cpp\n"}, {"commit_id": "141788", "date": "2011-10-12T17:36:33.084516Z", "author": "akirtzidis", "msg": "Handle the case where preprocessor entities are not received in order,\nfixes http://llvm.org/PR11120", "modified": "M | /cfe/trunk/lib/Lex/PreprocessingRecord.cpp\nA | /cfe/trunk/test/Preprocessor/pp-record.c\nA | /cfe/trunk/test/Preprocessor/pp-record.h\n"}, {"commit_id": "141809", "date": "2011-10-12T20:35:48.476559Z", "author": "dgregor", "msg": "When we determine that a function template specialization produced as\npart of template argument deduction is ill-formed, we mark it as\ninvalid and treat it as a deduction failure. If we happen to find that\nspecialization again, treat it as a deduction failure rather than\nsilently building a call to the declaration.\n\nFixes PR11117, a marvelous bug where deduction failed after creating\nan invalid specialization, causing overload resolution to pick a\ndifferent candidate. Then we performed a similar overload resolution\nlater, and happily picked the invalid specialization to\ncall... resulting in a silent link failure.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaTemplateDeduction.cpp\nM | /cfe/trunk/test/CXX/temp/temp.decls/temp.mem/p5.cpp\nM | /cfe/trunk/test/SemaTemplate/operator-template.cpp\nM | /cfe/trunk/test/SemaTemplate/temp_arg_nontype.cpp\n"}, {"commit_id": "141986", "date": "2011-10-14T20:34:19.675432Z", "author": "dgregor", "msg": "Don't try to diagnose anything when we're passing incomplete types\nthrough varargs. This only happens when we're in an unevaluated\ncontext, where we don't want to trigger an error anyway. Fixes PR11131\n/ <rdar://problem/10288375>.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/test/CXX/expr/expr.post/expr.call/p7-0x.cpp\nM | /cfe/trunk/test/SemaCXX/vararg-non-pod.cpp\n"}, {"commit_id": "142132", "date": "2011-10-16T10:48:29.433697Z", "author": "d0k", "msg": "PR11143: Save the old diagnostic handler and call it when munging diagnostics for #line directives.\n\nThis reenables proper inline asm diagnostics in clang", "modified": "M | /llvm/trunk/include/llvm/Support/SourceMgr.h\nM | /llvm/trunk/lib/MC/MCParser/AsmParser.cpp\n"}, {"commit_id": "143183", "date": "2011-10-28T03:45:11.280578Z", "author": "atrick", "msg": "LFTR should avoid a type mismatch with null pointer IVs.\n\nFixes rdar://10359193 Indvar LinearFunctionTestReplace assertion\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/IndVarSimplify.cpp\nA | /llvm/trunk/test/Transforms/IndVarSimplify/2011-10-27-lftrnull.ll\n"}, {"commit_id": "143206", "date": "2011-10-28T17:55:38.232306Z", "author": "djg", "msg": "Reapply r143177 and r143179 (reverting r143188), with scheduler\nfixes: Use a separate register, instead of SP, as the\ncalling-convention resource, to avoid spurious conflicts with\nactual uses of SP. Also, fix unscheduling of calling sequences,\nwhich can be triggered by pseudo-two-address dependencies.\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAG.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/XCore/XCoreISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/CellSPU/and_ops.ll\nM | /llvm/trunk/test/CodeGen/CellSPU/call_indirect.ll\nM | /llvm/trunk/test/CodeGen/CellSPU/nand.ll\nM | /llvm/trunk/test/CodeGen/CellSPU/or_ops.ll\nM | /llvm/trunk/test/CodeGen/CellSPU/select_bits.ll\nM | /llvm/trunk/test/CodeGen/CellSPU/struct_1.ll\nM | /llvm/trunk/test/CodeGen/Mips/cprestore.ll\nM | /llvm/trunk/test/CodeGen/Mips/largeimmprinting.ll\nM | /llvm/trunk/test/CodeGen/Thumb/2011-05-11-DAGLegalizer.ll\nA | /llvm/trunk/test/CodeGen/X86/legalize-libcalls.ll\nM | /llvm/trunk/test/CodeGen/X86/sse3.ll\n"}, {"commit_id": "143550", "date": "2011-11-02T17:26:05.580482Z", "author": "dgregor", "msg": "Use StringLiteral::getBytes(), not StringLiteral::getString(), when profiling the expression, so that it works for non-UTF8 strings.", "modified": "M | /cfe/trunk/lib/AST/StmtProfile.cpp\n"}, {"commit_id": "144563", "date": "2011-11-14T20:05:54.873524Z", "author": "kremenek", "msg": "[analyzer;Regionstore] handle loads from StringLiteral elements for StringLiterals representing wide strings.  Fixes PR 11294.", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/RegionStore.cpp\nM | /cfe/trunk/test/Analysis/misc-ps.c\n"}, {"commit_id": "145874", "date": "2011-12-06T00:10:34.061147Z", "author": "efriedma", "msg": "Make sure we perform lvalue-to-rvalue conversions for enum initializers.  PR11484.\n\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/test/SemaCXX/enum-scoped.cpp\n"}, {"commit_id": "146087", "date": "2011-12-07T22:24:28.118953Z", "author": "efriedma", "msg": "Make sure we correctly set LiveRegGens when a call is unscheduled.  <rdar://problem/10460321>.  No testcase because this is very sensitive to scheduling.\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp\n"}, {"commit_id": "146679", "date": "2011-12-15T20:29:51.044875Z", "author": "dgregor", "msg": "Keep track of all declarations of an Objective-C class (both forward\ndeclarations and definitions) as ObjCInterfaceDecls within the same\nredeclaration chain. This new representation matches what we do for\nC/C++ variables/functions/classes/templates/etc., and makes it\npossible to answer the query \"where are all of the declarations of\nthis class?\"\n\n", "modified": "M | /cfe/trunk/include/clang/AST/DeclObjC.h\nM | /cfe/trunk/lib/ARCMigrate/Transforms.cpp\nM | /cfe/trunk/lib/AST/ASTImporter.cpp\nM | /cfe/trunk/lib/AST/DeclObjC.cpp\nM | /cfe/trunk/lib/AST/DeclPrinter.cpp\nM | /cfe/trunk/lib/AST/DumpXML.cpp\nM | /cfe/trunk/lib/AST/RecordLayoutBuilder.cpp\nM | /cfe/trunk/lib/AST/Type.cpp\nM | /cfe/trunk/lib/Analysis/CocoaConventions.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/Rewrite/RewriteObjC.cpp\nM | /cfe/trunk/lib/Sema/IdentifierResolver.cpp\nM | /cfe/trunk/lib/Sema/SemaCodeComplete.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclObjC.cpp\nM | /cfe/trunk/lib/Serialization/ASTReaderDecl.cpp\nM | /cfe/trunk/lib/Serialization/ASTWriterDecl.cpp\nM | /cfe/trunk/test/Index/TestClassDecl.m\nM | /cfe/trunk/test/SemaObjC/forward-class-1.m\nM | /cfe/trunk/tools/libclang/CIndex.cpp\nM | /cfe/trunk/tools/libclang/IndexDecl.cpp\nM | /cfe/trunk/tools/libclang/IndexingContext.h\n"}, {"commit_id": "146976", "date": "2011-12-20T15:50:13.174047Z", "author": "dgregor", "msg": "When performing layout for an Objective-C class, make sure to dig out\nthe definition of that class. Fixes PR11613 / <rdar://problem/10604077>.\n", "modified": "M | /cfe/trunk/lib/AST/RecordLayoutBuilder.cpp\nM | /cfe/trunk/test/CodeGenObjC/forward-class-impl-metadata.m\n"}, {"commit_id": "147006", "date": "2011-12-20T22:56:20.533657Z", "author": "rsmith", "msg": "PR11297: Provide a better diagnostic for code which contains a\nreasonable-looking but ill-formed for-range statement of the form:\n\n  for (expression : expression)\n", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticParseKinds.td\nM | /cfe/trunk/lib/Parse/ParseStmt.cpp\nA | /cfe/trunk/test/Parser/cxx0x-for-range.cpp\n"}, {"commit_id": "148787", "date": "2012-01-24T05:47:35.050545Z", "author": "dblaikie", "msg": "Support decltype as a simple-type-specifier.\n\nThis makes all sorts of fun examples work with decltype.\nReviewed by Richard Smith.", "modified": "M | /cfe/trunk/lib/Parse/ParseExpr.cpp\nM | /cfe/trunk/lib/Parse/ParseExprCXX.cpp\nM | /cfe/trunk/lib/Parse/ParseTentative.cpp\nA | /cfe/trunk/test/CXX/expr/expr.post/expr.type.conv/p1-0x.cpp\nA | /cfe/trunk/test/CXX/stmt.stmt/stmt.ambig/p1-0x.cpp\n"}, {"commit_id": "149121", "date": "2012-01-27T06:15:43.289475Z", "author": "akirtzidis", "msg": "Due to a bug, -Wno-everything works like -Weverything. Fix the bug by having\n-Wno-everything remap all warnings to ignored.\n\nWe can now use \"-Wno-everything -W<warning>\" to ignore all warnings except\nspecific ones.", "modified": "M | /cfe/trunk/include/clang/Basic/Diagnostic.h\nM | /cfe/trunk/include/clang/Basic/DiagnosticIDs.h\nM | /cfe/trunk/lib/Basic/Diagnostic.cpp\nM | /cfe/trunk/lib/Basic/DiagnosticIDs.cpp\nM | /cfe/trunk/lib/Frontend/Warnings.cpp\n"}, {"commit_id": "149195", "date": "2012-01-29T09:11:50.821293Z", "author": "asl", "msg": "Cleanups for EABI standard functions\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\n"}, {"commit_id": "149908", "date": "2012-02-06T21:50:18.878919Z", "author": "efriedma", "msg": "Fix the result of VarDecl::checkInitIsICE so it is consistently accurate in C++11 mode.  PR11928.\n\n", "modified": "M | /cfe/trunk/lib/AST/Decl.cpp\nM | /cfe/trunk/test/SemaCXX/lambda-expressions.cpp\n"}, {"commit_id": "150076", "date": "2012-02-08T14:43:53.475845Z", "author": "d0k", "msg": "Value initialize MCRegisterClasses. Not sure how could miss this during the MCTargetDesc refactor.", "modified": "M | /llvm/trunk/include/llvm/MC/MCRegisterInfo.h\nM | /llvm/trunk/utils/TableGen/RegisterInfoEmitter.cpp\n"}, {"commit_id": "150082", "date": "2012-02-08T19:15:06.635254Z", "author": "hhinnant", "msg": "Fix up narrowing conversions in switch statement.", "modified": "M | /libcxx/trunk/src/locale.cpp\n"}, {"commit_id": "150348", "date": "2012-02-12T18:57:57.840319Z", "author": "dgregor", "msg": "Implement the standard decltype() semantics described in C++11\n[dcl.type.simple]p4, which treats all xvalues as returning T&&. We had\npreviously implemented a pre-standard variant of decltype() that\ndoesn't cope with, e.g., static_ast<T&&>(e) very well.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaType.cpp\nM | /cfe/trunk/test/CXX/dcl.dcl/dcl.spec/dcl.type/dcl.type.simple/p4-cxx0x.cpp\n"}, {"commit_id": "150581", "date": "2012-02-15T15:08:30.708691Z", "author": "hhinnant", "msg": "Remove reference from common_type definition.  It looks like a recent clang decltype implementation got fixed/improved and exposed this.  Fixes http://llvm.org/bugs/show_bug.cgi?id=12007.", "modified": "M | /libcxx/trunk/include/type_traits\n"}, {"commit_id": "150599", "date": "2012-02-15T18:08:09.034924Z", "author": "hhinnant", "msg": "Another stab at fixing http://llvm.org/bugs/show_bug.cgi?id=12007.  I earlier missed that there are two common_type definitions and corrected only one of them.", "modified": "M | /libcxx/trunk/include/type_traits\n"}, {"commit_id": "150947", "date": "2012-02-20T03:25:59.342784Z", "author": "nicholas", "msg": "Rename class Evaluate to Evaluator and put it in an anonymous namespace.\n", "modified": "M | /llvm/trunk/lib/Transforms/IPO/GlobalOpt.cpp\n"}, {"commit_id": "150949", "date": "2012-02-20T07:51:58.880217Z", "author": "evancheng", "msg": "Make post-ra tail duplication bundle safe. No test case as recent codegen\nflow changes have already hidden the bug. rdar://10893812\n", "modified": "M | /llvm/trunk/lib/CodeGen/TailDuplication.cpp\n"}, {"commit_id": "150955", "date": "2012-02-20T08:41:55.565794Z", "author": "grosser", "msg": "Add information, that Polly became a real LLVM project", "modified": "M | /polly/trunk/www/index.html\n"}, {"commit_id": "151005", "date": "2012-02-20T23:58:14.887401Z", "author": "efriedma", "msg": "Make RequireLiteralType work correctly with incomplete array types.  PR12037.\n\n", "modified": "M | /cfe/trunk/lib/Sema/SemaType.cpp\nM | /cfe/trunk/test/CXX/basic/basic.types/p10.cpp\n"}, {"commit_id": "151117", "date": "2012-02-22T02:04:18.440933Z", "author": "rsmith", "msg": "Implement C++11 [expr.call]p11: If the operand to a decltype-specifier is a\nfunction call (or a comma expression with a function call on its right-hand\nside), possibly parenthesized, then the return type is not required to be\ncomplete and a temporary is not bound. Other subexpressions inside a decltype\nexpression do not get this treatment.\n\nThis is implemented by deferring the relevant checks for all calls immediately\nwithin a decltype expression, then, when the expression is fully-parsed,\nchecking the relevant constraints and stripping off any top-level temporary\nbinding.\n\nDeferring the completion of the return type exposed a bug in overload\nresolution where completion of the argument types was not attempted, which\nis also fixed by this change.\n", "modified": "M | /cfe/trunk/include/clang/AST/ExprCXX.h\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Parse/ParseDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/Sema.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaOverload.cpp\nM | /cfe/trunk/lib/Sema/TreeTransform.h\nA | /cfe/trunk/test/CXX/dcl.dcl/dcl.spec/dcl.type/dcl.type.simple/p5-cxx0x.cpp\nM | /cfe/trunk/test/SemaCXX/overload-call.cpp\n"}, {"commit_id": "151352", "date": "2012-02-24T07:38:34.861783Z", "author": "dgregor", "msg": "Implement a new type trait __is_trivially_constructible(T, Args...)\nthat provides the behavior of the C++11 library trait\nstd::is_trivially_constructible<T, Args...>, which can't be\nimplemented purely as a library.\n\nSince __is_trivially_constructible can have zero or more arguments, I\nneeded to add Yet Another Type Trait Expression Class, this one\nhandling arbitrary arguments. The next step will be to migrate\nUnaryTypeTrait and BinaryTypeTrait over to this new, more general\nTypeTrait class.\n\nFixes the Clang side of <rdar://problem/10895483> / PR12038.\n", "modified": "M | /cfe/trunk/docs/LanguageExtensions.html\nM | /cfe/trunk/include/clang/AST/ExprCXX.h\nM | /cfe/trunk/include/clang/AST/RecursiveASTVisitor.h\nM | /cfe/trunk/include/clang/AST/Stmt.h\nM | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/include/clang/Basic/StmtNodes.td\nM | /cfe/trunk/include/clang/Basic/TokenKinds.def\nM | /cfe/trunk/include/clang/Basic/TypeTraits.h\nM | /cfe/trunk/include/clang/Parse/Parser.h\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/include/clang/Serialization/ASTBitCodes.h\nM | /cfe/trunk/lib/AST/Expr.cpp\nM | /cfe/trunk/lib/AST/ExprCXX.cpp\nM | /cfe/trunk/lib/AST/ExprClassification.cpp\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/AST/ItaniumMangle.cpp\nM | /cfe/trunk/lib/AST/StmtPrinter.cpp\nM | /cfe/trunk/lib/AST/StmtProfile.cpp\nM | /cfe/trunk/lib/Lex/PPMacroExpansion.cpp\nM | /cfe/trunk/lib/Parse/ParseExpr.cpp\nM | /cfe/trunk/lib/Parse/ParseExprCXX.cpp\nM | /cfe/trunk/lib/Parse/ParseTentative.cpp\nM | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/lib/Sema/TreeTransform.h\nM | /cfe/trunk/lib/Serialization/ASTReaderStmt.cpp\nM | /cfe/trunk/lib/Serialization/ASTWriterStmt.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Core/ExprEngine.cpp\nM | /cfe/trunk/test/Index/annotate-tokens-cxx0x.cpp\nM | /cfe/trunk/test/PCH/cxx-traits.cpp\nM | /cfe/trunk/test/PCH/cxx-traits.h\nM | /cfe/trunk/test/SemaCXX/type-traits.cpp\nM | /cfe/trunk/tools/libclang/CIndex.cpp\nM | /cfe/trunk/tools/libclang/CXCursor.cpp\n"}, {"commit_id": "151406", "date": "2012-02-24T23:32:26.345036Z", "author": "hhinnant", "msg": "Hook up to the new clang __is_trivially_constructible and __is_trivially_assignable traits.  Fixes r10925427 and http://llvm.org/bugs/show_bug.cgi?id=12038.", "modified": "M | /libcxx/trunk/include/type_traits\nM | /libcxx/trunk/test/utilities/meta/meta.unary/meta.unary.prop/is_trivially_copy_constructible.pass.cpp\nM | /libcxx/trunk/test/utilities/meta/meta.unary/meta.unary.prop/is_trivially_move_constructible.pass.cpp\n"}, {"commit_id": "151477", "date": "2012-02-26T07:09:21.047967Z", "author": "rsmith", "msg": "Update release notes and language extensions pages to note that support for\ngeneralized initializers is available.\n", "modified": "M | /cfe/trunk/docs/LanguageExtensions.html\nM | /cfe/trunk/docs/ReleaseNotes.html\n"}, {"commit_id": "151910", "date": "2012-03-02T14:37:41.337832Z", "author": "jialiu", "msg": "clang -v support for separate clang.git and llvm.git, patch by Andrew Trick.", "modified": "M | /cfe/trunk/include/clang/Basic/Version.h\nM | /cfe/trunk/lib/Basic/Makefile\nM | /cfe/trunk/lib/Basic/Version.cpp\n"}, {"commit_id": "152240", "date": "2012-03-07T20:37:43.979384Z", "author": "hhinnant", "msg": "Change some smart_ptr == 0 to smart_ptr == nullptr.  Fixes http://llvm.org/bugs/show_bug.cgi?id=12185.", "modified": "M | /libcxx/trunk/include/locale\nM | /libcxx/trunk/src/locale.cpp\n"}, {"commit_id": "152266", "date": "2012-03-07T23:50:05.452309Z", "author": "bwilson", "msg": "Workaround module test failures by removing the version info from module hashes.\n\nPR12196: The module hash strings are not actually hashing the compiler version\nstring; the entire version string is being included in the hash.  Depending on\nthe module cache directory name, that can lead to failures where the path\nnames become too long.  As a temporary workaround, just remove the version\nstring from the hash.", "modified": "M | /cfe/trunk/lib/Frontend/CompilerInvocation.cpp\n"}, {"commit_id": "152928", "date": "2012-03-16T16:36:47.945027Z", "author": "grosser", "msg": "Don't allow pointer types in affine expressions\n\nWe currently do not support pointer types in affine expressions. Hence, we\ndisallow in the SCoP detection. Later we may decide to add support for them.\n\nThis fixes PR12277\n\nReported-By: Sebastian Pop  <sebpop@gmail.com>", "modified": "M | /polly/trunk/lib/Support/SCEVValidator.cpp\nA | /polly/trunk/test/CodeGen/20120316-InvalidCast.ll\n"}, {"commit_id": "152933", "date": "2012-03-16T17:17:16.951652Z", "author": "grosser", "msg": "Do not fail if a command line argument is given more than once\n\nFor boolean flags in Polly there is no problem if they are given more than once.\nHence, we can allow it to not fail for build systems that (acciently) add flags\nseveral times.\n\nThis fixes: PR12278\n\nReported by: Sebastian Pop  <sebpop@gmail.com>", "modified": "M | /polly/trunk/lib/CodeGeneration.cpp\nM | /polly/trunk/lib/RegisterPasses.cpp\n"}, {"commit_id": "153036", "date": "2012-03-19T15:40:23.301408Z", "author": "hhinnant", "msg": "Allow libc++ to be built with CMake from within the LLVM tree. The libc++ part is just some renaming as the variable  was already in use, conflicting with something else in the LLVM tree.  Contributed by Ruben Van Boxem.", "modified": "M | /libcxx/trunk/lib/CMakeLists.txt\nM | /libcxx/trunk/test/CMakeLists.txt\n"}, {"commit_id": "153166", "date": "2012-03-21T05:48:07.776288Z", "author": "joerg", "msg": "Fix generation of the address size override prefix. Add assertions for\nthe invalid cases. At least 16bit operand in 64bit mode is currently not\nrejected in the parser.\n", "modified": "M | /llvm/trunk/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp\nA | /llvm/trunk/test/MC/X86/address-size.s\n"}, {"commit_id": "153471", "date": "2012-03-26T21:38:38.772663Z", "author": "echristo", "msg": "Use the file in the inlined die rather than the compile unit for\nbacktrace locations.\n\nTestcase forthcoming, but I wanted to get some testing here.\n\nShould fix:\n\nPR12323\nPR12314\nrdar://11091100", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\n"}, {"commit_id": "153773", "date": "2012-03-30T20:53:28.631578Z", "author": "rsmith", "msg": "PR10217: Provide diagnostics explaining why an implicitly-deleted special\nmember function is deleted.\n", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaInit.cpp\nM | /cfe/trunk/lib/Sema/SemaLookup.cpp\nM | /cfe/trunk/test/CXX/dcl.decl/dcl.init/dcl.init.aggr/p1-0x.cpp\nM | /cfe/trunk/test/CXX/special/class.copy/implicit-move.cpp\nM | /cfe/trunk/test/CXX/special/class.copy/p11.0x.copy.cpp\nM | /cfe/trunk/test/CXX/special/class.copy/p11.0x.move.cpp\nM | /cfe/trunk/test/CXX/special/class.ctor/p5-0x.cpp\nM | /cfe/trunk/test/CXX/special/class.dtor/p5-0x.cpp\nM | /cfe/trunk/test/SemaCXX/cxx0x-deleted-default-ctor.cpp\nM | /cfe/trunk/test/SemaCXX/cxx98-compat-flags.cpp\nM | /cfe/trunk/test/SemaCXX/cxx98-compat.cpp\nM | /cfe/trunk/test/SemaCXX/defaulted-private-dtor.cpp\nM | /cfe/trunk/test/SemaCXX/dr1301.cpp\nM | /cfe/trunk/test/SemaCXX/implicit-exception-spec.cpp\nM | /cfe/trunk/test/SemaCXX/value-initialization.cpp\n"}, {"commit_id": "153873", "date": "2012-04-02T15:00:14.899227Z", "author": "hhinnant", "msg": "Fix test for default constructor of discrete_distribution.  This partially addresses http://llvm.org/bugs/show_bug.cgi?id=12436.", "modified": "M | /libcxx/trunk/test/numerics/rand/rand.dis/rand.dist.samp/rand.dist.samp.discrete/ctor_default.pass.cpp\n"}, {"commit_id": "153882", "date": "2012-04-02T18:31:33.973888Z", "author": "hfinkel", "msg": "Add triple support for the IBM BG/P and BG/Q supercomputers.", "modified": "M | /llvm/trunk/include/llvm/ADT/Triple.h\nM | /llvm/trunk/lib/Support/Triple.cpp\nM | /llvm/trunk/unittests/ADT/TripleTest.cpp\n"}, {"commit_id": "153894", "date": "2012-04-02T20:59:25.160693Z", "author": "rsmith", "msg": "Finish PR10217: Ensure we say that a special member was implicitly, not\nexplicitly, deleted in all relevant cases, and explain why.\n", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaOverload.cpp\nM | /cfe/trunk/test/CXX/special/class.copy/implicit-move.cpp\nM | /cfe/trunk/test/CXX/special/class.ctor/p5-0x.cpp\nM | /cfe/trunk/test/CXX/special/class.dtor/p5-0x.cpp\nM | /cfe/trunk/test/SemaCXX/cxx0x-deleted-default-ctor.cpp\nM | /cfe/trunk/test/SemaCXX/dr1301.cpp\n"}, {"commit_id": "153897", "date": "2012-04-02T21:07:48.031871Z", "author": "rsmith", "msg": "PR10217 diagnostic fix: don't say 'copy constructor' when we mean\n'copy assignment operator'.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/test/CXX/special/class.copy/implicit-move.cpp\n"}, {"commit_id": "154017", "date": "2012-04-04T14:35:23.077282Z", "author": "chapuni", "msg": "clang/test/Tooling/clang-check.cpp: Mark it as XFAIL mingw,msvc for now.\n\nIt seems JSON parser doesn't like path separator '\\' on Win32 hosts.", "modified": "M | /cfe/trunk/test/Tooling/clang-check.cpp\n"}, {"commit_id": "154065", "date": "2012-04-04T23:09:20.949986Z", "author": "dgregor", "msg": "Allow a conversion from the empty initializer list {} to an\nstd::initializer_list<T> so long as <T> is known. This conversion has\nidentity rank.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaOverload.cpp\nM | /cfe/trunk/test/SemaCXX/cxx0x-initializer-stdinitializerlist.cpp\n"}, {"commit_id": "154288", "date": "2012-04-08T14:53:14.397545Z", "author": "d0k", "msg": "EngineBuilder::create is expected to take ownership of the TargetMachine passed to it. Delete it on error or when we create an interpreter that doesn't need it.", "modified": "M | /llvm/trunk/lib/ExecutionEngine/ExecutionEngine.cpp\n"}, {"commit_id": "154338", "date": "2012-04-09T20:17:30.109885Z", "author": "lhames", "msg": "Patch r153892 for PR11861 apparently broke an external project (see PR12493).\n\nThis patch restores TwoAddressInstructionPass's pre-r153892 behaviour when\nrescheduling instructions in TryInstructionTransform. Hopefully this will fix\nPR12493. To refix PR11861, lowering of INSERT_SUBREGS is deferred until after\nthe copy that unties the operands is emitted (this seems to be a more\nappropriate fix for that issue anyway).\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/TwoAddressInstructionPass.cpp\n"}, {"commit_id": "154359", "date": "2012-04-09T23:58:59.727839Z", "author": "lhames", "msg": "Test case for PR12495.", "modified": "A | /llvm/trunk/test/CodeGen/X86/2012-04-09-TwoAddrPassBug.ll\n"}, {"commit_id": "155076", "date": "2012-04-19T00:08:28.575044Z", "author": "rsmith", "msg": "PR 12586: Fix assert while running libc++ testsuite: deal with exception\nspecifications on member function templates of class templates and other such\nnested beasties. Store the function template from which we are to instantiate\nan exception specification rather than trying to deduce it. Plus some\nadditional test cases.\n", "modified": "M | /cfe/trunk/include/clang/AST/Type.h\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/AST/Type.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx11-exception-spec.cpp\nM | /cfe/trunk/test/SemaTemplate/instantiate-exception-spec-cxx11.cpp\n"}, {"commit_id": "157340", "date": "2012-05-23T20:21:06.110792Z", "author": "stoklund", "msg": "Correctly deal with identity copies in RegisterCoalescer.\n\nNow that the coalescer keeps live intervals and machine code in sync at\nall times, it needs to deal with identity copies differently.\n\nWhen merging two virtual registers, all identity copies are removed\nright away. This means that other identity copies must come from\nsomewhere else, and they are going to have a value number.\n\nDeal with such copies by merging the value numbers before erasing the\ncopy instruction. Otherwise, we leave dangling value numbers in the live\ninterval.\n\nThis fixes PR12927.", "modified": "M | /llvm/trunk/lib/CodeGen/RegisterCoalescer.cpp\nA | /llvm/trunk/test/CodeGen/X86/coalescer-identity.ll\n"}, {"commit_id": "157823", "date": "2012-06-01T18:11:16.822443Z", "author": "rikka", "msg": "Don't allow multiple correction candidates that have the same identifier\nbut different nested name specifiers to quietly clobber each other so\nonly one remains if they do not refer to the same NamedDecl. Fixes\nPR12951.", "modified": "M | /cfe/trunk/lib/Sema/SemaLookup.cpp\nM | /cfe/trunk/test/SemaCXX/typo-correction.cpp\n"}, {"commit_id": "158949", "date": "2012-06-21T23:44:21.873550Z", "author": "rafael", "msg": "Revert r158887. This fixes pr13168.\n\nRevert \"If an object (such as a std::string) with an appropriate c_str() member function\"\n\nThis reverts commit 7d96f6106bfbd85b1af06f34fdbf2834aad0e47e.", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/SemaChecking.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaOverload.cpp\nD | /cfe/trunk/test/SemaCXX/printf-block.cpp\nD | /cfe/trunk/test/SemaCXX/printf-cstr.cpp\n"}, {"commit_id": "159472", "date": "2012-06-29T22:54:56.151184Z", "author": "fjahanian", "msg": "objective-c IRGen: fixes a crash when method type is being mangled\nwhen an argument type size is 0. // rdar://11777609, PR13229\n", "modified": "M | /cfe/trunk/lib/AST/ASTContext.cpp\nA | /cfe/trunk/test/CodeGenObjC/encode-test-6.m\n"}, {"commit_id": "159477", "date": "2012-06-30T00:48:59.220528Z", "author": "fjahanian", "msg": "blocks: fixes a crash when encoding block type\nwith argument type of size 0. // rdar://11777609\nPR13229.\n", "modified": "M | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/test/CodeGen/block-3.c\n"}, {"commit_id": "160078", "date": "2012-07-11T21:38:39.031177Z", "author": "gribozavr", "msg": "Enable comment parsing and semantic analysis to emit diagnostics.  A few\ndiagnostics implemented -- see testcases.\n\nI created a new TableGen file for comment diagnostics,\nDiagnosticCommentKinds.td, because comment diagnostics don't logically\nfit into AST diagnostics file.  But I don't feel strongly about it.\n\nThis also implements support for self-closing HTML tags in comment\nlexer and parser (for example, <br />).\n\nIn order to issue precise diagnostics CommentSema needs to know the\ndeclaration the comment is attached to.  There is no easy way to find a decl by \ncomment, so we match comments and decls in lockstep: after parsing one\ndeclgroup we check if we have any new, not yet attached comments.  If we do --\nthen we do the usual comment-finding process.\n\nIt is interesting that this automatically handles trailing comments.\nWe pick up not only comments that precede the declaration, but also\ncomments that *follow* the declaration -- thanks to the lookahead in\nthe lexer: after parsing the declgroup we've consumed the semicolon\nand looked ahead through comments.\n\nAdded -Wdocumentation-html flag for semantic HTML errors to allow the user to \ndisable only HTML warnings (but not HTML parse errors, which we emit as\nwarnings in -Wdocumentation).\n\n", "modified": "M | /cfe/trunk/include/clang/AST/ASTContext.h\nM | /cfe/trunk/include/clang/AST/Comment.h\nA | /cfe/trunk/include/clang/AST/CommentDiagnostic.h\nM | /cfe/trunk/include/clang/AST/CommentLexer.h\nM | /cfe/trunk/include/clang/AST/CommentParser.h\nM | /cfe/trunk/include/clang/AST/CommentSema.h\nM | /cfe/trunk/include/clang/AST/RawCommentList.h\nM | /cfe/trunk/include/clang/Basic/AllDiagnostics.h\nM | /cfe/trunk/include/clang/Basic/CMakeLists.txt\nM | /cfe/trunk/include/clang/Basic/Diagnostic.td\nA | /cfe/trunk/include/clang/Basic/DiagnosticCommentKinds.td\nM | /cfe/trunk/include/clang/Basic/DiagnosticGroups.td\nM | /cfe/trunk/include/clang/Basic/DiagnosticIDs.h\nM | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/include/clang/Basic/Makefile\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/AST/CMakeLists.txt\nM | /cfe/trunk/lib/AST/Comment.cpp\nM | /cfe/trunk/lib/AST/CommentDumper.cpp\nM | /cfe/trunk/lib/AST/CommentLexer.cpp\nM | /cfe/trunk/lib/AST/CommentParser.cpp\nM | /cfe/trunk/lib/AST/CommentSema.cpp\nM | /cfe/trunk/lib/AST/RawCommentList.cpp\nM | /cfe/trunk/lib/Basic/DiagnosticIDs.cpp\nM | /cfe/trunk/lib/Sema/CMakeLists.txt\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclObjC.cpp\nD | /cfe/trunk/test/Sema/doxygen-comments.c\nA | /cfe/trunk/test/Sema/warn-documentation-almost-trailing.c\nA | /cfe/trunk/test/Sema/warn-documentation-fixits.c\nA | /cfe/trunk/test/Sema/warn-documentation.cpp\nA | /cfe/trunk/test/Sema/warn-documentation.m\nM | /cfe/trunk/tools/diagtool/DiagnosticNames.cpp\nM | /cfe/trunk/unittests/AST/CommentLexer.cpp\nM | /cfe/trunk/unittests/AST/CommentParser.cpp\nM | /cfe/trunk/unittests/AST/Makefile\n"}, {"commit_id": "160325", "date": "2012-07-16T22:49:40.532784Z", "author": "nlopes", "msg": "fix PR13339 (remove the predecessor from the unwind BB when removing an invoke)", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SimplifyCFGPass.cpp\nM | /llvm/trunk/test/Transforms/SimplifyCFG/invoke.ll\n"}, {"commit_id": "160518", "date": "2012-07-19T18:24:50.074891Z", "author": "spop", "msg": "default to use -mv4 when no version of Hexagon has been specified\n\nThis fixes a bunch of make check failures of the form:\n\nUnknown Architecture Version.\nUNREACHABLE executed at ../lib/Target/Hexagon/HexagonSubtarget.cpp:60!", "modified": "M | /llvm/trunk/lib/Target/Hexagon/HexagonSubtarget.cpp\n"}, {"commit_id": "160614", "date": "2012-07-22T23:45:10.457824Z", "author": "rsmith", "msg": "PR12917: Remove incorrect assumption that lambda mangling information cannot\nchange once it's been assigned. It can change in two ways:\n 1) In a template instantiation, the context declaration should be the\n    instantiated declaration, not the declaration in the template.\n 2) If a lambda appears in the pattern of a variadic pack expansion, the\n    mangling number will depend on the pack length.\n", "modified": "M | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaLambda.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/lib/Sema/TreeTransform.h\nM | /cfe/trunk/test/CodeGenCXX/mangle-lambdas.cpp\n"}, {"commit_id": "160634", "date": "2012-07-23T17:40:30.589794Z", "author": "gribozavr", "msg": "Comment Sema: refactor handling of 'ParmVarDecl's and save them in Sema members.\n", "modified": "M | /cfe/trunk/include/clang/AST/CommentSema.h\nM | /cfe/trunk/lib/AST/CommentSema.cpp\n"}, {"commit_id": "160846", "date": "2012-07-27T01:15:02.746752Z", "author": "jrose", "msg": "[analyzer] Look through SubstNonTypeTemplateParmExprs.\n\nWe were treating this like a CXXDefaultArgExpr, but\nSubstNonTypeTemplateParmExpr actually appears when a template is\ninstantiated, i.e. we have all the information necessary to evaluate it.\nThis allows us to inline functions like llvm::array_lengthof.\n\n<rdar://problem/11949235>", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/Environment.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Core/ExprEngine.cpp\nM | /cfe/trunk/test/Analysis/templates.cpp\n"}, {"commit_id": "160855", "date": "2012-07-27T10:21:08.023696Z", "author": "d0k", "msg": "Fix PR13394: Erasing from a vector changes the end of the vector, so make sure we always have the right end.", "modified": "M | /cfe/trunk/lib/Sema/SemaLookup.cpp\nA | /cfe/trunk/test/SemaCXX/pr13394-crash-on-invalid.cpp\n"}, {"commit_id": "160961", "date": "2012-07-30T15:53:26.599973Z", "author": "d0k", "msg": "Fix ambiguity detection in GetBestOverloadCandidateSimple.\n\nWhen performing the simplistic overload resolution for single-argument methods,\ndon't check the best overload for ambiguity with itself when the best overload\ndoesn't happen to be the first one.\n\nFixes PR13480.", "modified": "M | /cfe/trunk/lib/AST/DeclCXX.cpp\nM | /cfe/trunk/test/SemaCXX/cxx98-compat.cpp\n"}, {"commit_id": "161008", "date": "2012-07-30T23:48:14.418441Z", "author": "rsmith", "msg": "PR13479: If we see the definition of an out-of-line destructor in C++11, be\nsure to update the exception specification on the declaration as well as the\ndefinition. If we're building in -fno-exceptions mode, nothing else will\ntrigger it to be updated.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nA | /cfe/trunk/test/CodeGenCXX/destructor-exception-spec.cpp\n"}, {"commit_id": "161047", "date": "2012-07-31T13:56:54.930097Z", "author": "klimek", "msg": "Fixes a segfault in Tooling when using pch's:\nClear the FileManager's stat cache in between running\ntranslation units, as the stat cache loaded from a pch\nis only valid for one compiler invocation.\n\n", "modified": "M | /cfe/trunk/include/clang/Basic/FileManager.h\nM | /cfe/trunk/lib/Basic/FileManager.cpp\nM | /cfe/trunk/lib/Tooling/Tooling.cpp\nA | /cfe/trunk/test/Tooling/Inputs\nA | /cfe/trunk/test/Tooling/Inputs/lit.local.cfg\nA | /cfe/trunk/test/Tooling/Inputs/pch-fail.h\nA | /cfe/trunk/test/Tooling/Inputs/pch.cpp\nA | /cfe/trunk/test/Tooling/Inputs/pch.h\nA | /cfe/trunk/test/Tooling/pch.cpp\n"}, {"commit_id": "161051", "date": "2012-07-31T16:34:07.572490Z", "author": "jrose", "msg": "[analyzer] Getting an lvalue for a reference field still requires a load.\n\nThis was causing a crash in our array-to-pointer logic, since the region\nwas clearly not an array.\n\nPR13440 / <rdar://problem/11977113>", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/ExprEngine.cpp\nM | /cfe/trunk/test/Analysis/reference.cpp\n"}, {"commit_id": "161135", "date": "2012-08-01T21:02:59.208354Z", "author": "efriedma", "msg": "Fix an assertion failure instantiating a constexpr function from within a -dealloc method.  PR13401.\n\n", "modified": "M | /cfe/trunk/include/clang/Sema/ScopeInfo.h\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/Sema.cpp\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclObjC.cpp\nM | /cfe/trunk/lib/Sema/SemaExprObjC.cpp\nA | /cfe/trunk/test/SemaObjCXX/warn-missing-super.mm\n"}, {"commit_id": "161473", "date": "2012-08-08T03:51:37.690088Z", "author": "efriedma", "msg": "Fix an assertion failure with a C++ constructor initializing a\nmember of reference type in an anonymous struct.  PR13154.\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGClass.cpp\nM | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/test/CodeGenCXX/anonymous-union-member-initializer.cpp\n"}, {"commit_id": "161687", "date": "2012-08-10T19:58:13.139351Z", "author": "hliao", "msg": "add X86-specific DAG optimization to simplify boolean test\n\n- if a boolean test (X86ISD::CMP or X86ISD:SUB) checks a boolean value\n  generated from X86ISD::SETCC, try to simplify the boolean value\n  generation and checking by reusing the original EFLAGS with proper\n  condition code\n- add hooks to X86 specific SETCC/BRCOND/CMOV, the major 3 places\n  consuming EFLAGS\n\npart of patches fixing PR12312\n\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nA | /llvm/trunk/test/CodeGen/X86/bool-simplify.ll\n"}, {"commit_id": "161732", "date": "2012-08-11T23:47:06.016632Z", "author": "hliao", "msg": "fix PR13577, an issue introduced by r161687\n\n- FCMOV only supports a subset of X86 conditions. Skip boolean\n  simplification if X86 condition is not valid for FCMOV.\n- add a minimal test case for PR13577.\n\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr13577.ll\n"}, {"commit_id": "162146", "date": "2012-08-17T23:24:29.586716Z", "author": "efriedma", "msg": "Make atomic load and store of pointers work.  Tighten verification of atomic operations\nso other unexpected operations don't slip through.  Based on patch by Logan Chien.\nPR11786/PR13186.\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\nM | /llvm/trunk/lib/VMCore/Verifier.cpp\nA | /llvm/trunk/test/CodeGen/X86/atomic-pointer.ll\n"}, {"commit_id": "162360", "date": "2012-08-22T14:52:14.941368Z", "author": "rafael", "msg": "Merge existing attributes before processing pragmas in friend template\ndeclarations.\nFixes pr13662.", "modified": "M | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/test/SemaCXX/pragma-visibility.cpp\n"}, {"commit_id": "162643", "date": "2012-08-25T07:11:29.801408Z", "author": "efriedma", "msg": "Fix a CodeGen bug where we would skip zero-initialization for\narray new with a non-trivial constructor. Pointed out in PR13380.\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGExprCXX.cpp\nM | /cfe/trunk/test/CodeGenCXX/new.cpp\n"}, {"commit_id": "162962", "date": "2012-08-31T00:14:07.767050Z", "author": "efriedma", "msg": "Change the representation of builtin functions in the AST\n(__builtin_* etc.) so that it isn't possible to take their address.\nSpecifically, introduce a new type to represent a reference to a builtin\nfunction, and a new cast kind to convert it to a function pointer in the\noperand of a call.  Fixes PR13195.\n\n", "modified": "M | /cfe/trunk/include/clang/AST/ASTContext.h\nM | /cfe/trunk/include/clang/AST/BuiltinTypes.def\nM | /cfe/trunk/include/clang/AST/OperationKinds.h\nM | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/include/clang/Serialization/ASTBitCodes.h\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/AST/Expr.cpp\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/AST/NSAPI.cpp\nM | /cfe/trunk/lib/AST/Type.cpp\nM | /cfe/trunk/lib/AST/TypeLoc.cpp\nM | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprAgg.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprComplex.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprConstant.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/Edit/RewriteObjCFoundationAPI.cpp\nM | /cfe/trunk/lib/Sema/SemaChecking.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/TreeTransform.h\nM | /cfe/trunk/lib/Serialization/ASTCommon.cpp\nM | /cfe/trunk/lib/Serialization/ASTReader.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Core/ExprEngineC.cpp\nM | /cfe/trunk/test/CodeGenCXX/builtins.cpp\nM | /cfe/trunk/test/Parser/builtin_classify_type.c\nM | /cfe/trunk/test/SemaCXX/builtins.cpp\n"}, {"commit_id": "163514", "date": "2012-09-10T14:57:06.352335Z", "author": "dgregor", "msg": "Allow vector types in pseudo-destructor expressions. Fixes PR13798.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/test/SemaCXX/vector.cpp\n"}, {"commit_id": "163862", "date": "2012-09-14T00:39:16.985624Z", "author": "hhinnant", "msg": "Dimitry Andric:  many visibility fixes.  Howard:  Much appreciated.  Can you send me a patch to CREDITS.TXT?", "modified": "M | /libcxx/trunk/include/__hash_table\nM | /libcxx/trunk/include/__locale\nM | /libcxx/trunk/include/__tree\nM | /libcxx/trunk/include/__tuple\nM | /libcxx/trunk/include/bitset\nM | /libcxx/trunk/include/exception\nM | /libcxx/trunk/include/forward_list\nM | /libcxx/trunk/include/future\nM | /libcxx/trunk/include/ios\nM | /libcxx/trunk/include/iosfwd\nM | /libcxx/trunk/include/istream\nM | /libcxx/trunk/include/iterator\nM | /libcxx/trunk/include/list\nM | /libcxx/trunk/include/memory\nM | /libcxx/trunk/include/mutex\nM | /libcxx/trunk/include/ostream\nM | /libcxx/trunk/include/queue\nM | /libcxx/trunk/include/random\nM | /libcxx/trunk/include/regex\nM | /libcxx/trunk/include/stack\nM | /libcxx/trunk/include/system_error\nM | /libcxx/trunk/include/thread\nM | /libcxx/trunk/include/tuple\nM | /libcxx/trunk/include/type_traits\nM | /libcxx/trunk/include/utility\nM | /libcxx/trunk/include/valarray\n"}, {"commit_id": "163863", "date": "2012-09-14T00:51:36.989014Z", "author": "efriedma", "msg": "Fix abbreviation for CharacterLiteral in AST serialization.  PR13806.\n\n", "modified": "M | /cfe/trunk/lib/Serialization/ASTWriterDecl.cpp\nM | /cfe/trunk/test/PCH/cxx_exprs.cpp\nM | /cfe/trunk/test/PCH/cxx_exprs.h\n"}, {"commit_id": "164168", "date": "2012-09-18T21:11:30.187690Z", "author": "efriedma", "msg": "Add an extra check for invalid decls in the lambda semantic analysis to avoid a crash.  PR13860.\n\n", "modified": "M | /cfe/trunk/lib/Sema/SemaLambda.cpp\nM | /cfe/trunk/test/SemaCXX/lambda-expressions.cpp\n"}, {"commit_id": "164169", "date": "2012-09-18T21:24:16.555114Z", "author": "evancheng", "msg": "MOVi16 (movw) is only legal on cpus with V6T2 support. rdar://12300648", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMInstrInfo.td\nA | /llvm/trunk/test/CodeGen/ARM/2012-09-18-ARMv4ISelBug.ll\nM | /llvm/trunk/test/CodeGen/ARM/sub.ll\n"}, {"commit_id": "164585", "date": "2012-09-25T02:42:03.767446Z", "author": "chandlerc", "msg": "Fix a crash in SROA. This was reported independently by Takumi and\nDavid (I think), but I would appreciate folks verifying that this fixes\nthe big crasher.\n\nI'm still working on a reduced test case, but because this was causing\nproblems I wanted to get the fix checked in quickly.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SROA.cpp\n"}, {"commit_id": "165288", "date": "2012-10-05T01:49:14.648261Z", "author": "efriedma", "msg": "Make sure to generate the right kind of MDNode for enum forward declarations.\nPR14029, LLVM part.\n\n", "modified": "M | /llvm/trunk/include/llvm/DIBuilder.h\nM | /llvm/trunk/lib/VMCore/DIBuilder.cpp\nM | /llvm/trunk/test/DebugInfo/X86/enum-fwd-decl.ll\n"}, {"commit_id": "165289", "date": "2012-10-05T01:49:33.002130Z", "author": "efriedma", "msg": "Make sure to generate the right kind of MDNode for enum forward declarations.\nPR14029, clang part.\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-enum-class.cpp\nM | /cfe/trunk/test/CodeGenObjC/debug-info-fwddecl.m\n"}, {"commit_id": "165962", "date": "2012-10-15T20:37:01.309989Z", "author": "nico", "msg": "Revert r164907 and r164902 (+ follow-ups). They broke building on 10.6.\n\nSee PR14013.\n\n", "modified": "M | /cfe/trunk/include/clang/Basic/ObjCRuntime.h\nM | /cfe/trunk/lib/CodeGen/CGObjC.cpp\nM | /cfe/trunk/lib/Driver/ToolChains.cpp\nM | /cfe/trunk/lib/Driver/Tools.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/runtime/compiler-rt/Makefile\nD | /cfe/trunk/test/CodeGenObjC/optimized-setter-ios-device.m\nM | /cfe/trunk/test/CodeGenObjC/optimized-setter.m\nD | /cfe/trunk/test/CodeGenObjC/unoptimized-setter.m\nM | /cfe/trunk/test/Driver/darwin-ld.c\nM | /cfe/trunk/test/Driver/pic.c\n"}, {"commit_id": "165963", "date": "2012-10-15T20:37:13.912920Z", "author": "nico", "msg": "Revert r164907 and r164902 (+ follow-ups). They broke building on 10.6.\n\nSee PR14013.\n\n", "modified": "M | /compiler-rt/trunk/make/platform/clang_darwin.mk\n"}, {"commit_id": "165987", "date": "2012-10-15T22:23:34.451942Z", "author": "ddunbar", "msg": "platform/clang_darwin: Drop an x86_64 slice into cc_kext_ios5.\n - This doesn't get used, but it is a simple workaround for PR14013.", "modified": "M | /compiler-rt/trunk/make/platform/clang_darwin.mk\n"}, {"commit_id": "166067", "date": "2012-10-16T22:51:55.218394Z", "author": "stoklund", "msg": "Revert r166046 \"Switch back to the old coalescer for now to fix the 32 bit bit\"\n\nA fix for PR14098, including the test case is in the next commit.", "modified": "M | /llvm/trunk/lib/CodeGen/RegisterCoalescer.cpp\nM | /llvm/trunk/test/CodeGen/ARM/coalesce-subregs.ll\nD | /llvm/trunk/test/CodeGen/X86/pr14098.ll\n"}, {"commit_id": "166068", "date": "2012-10-16T22:51:58.277582Z", "author": "stoklund", "msg": "Avoid rematerializing a redef immediately after the old def.\n\nPR14098 contains an example where we would rematerialize a MOV8ri\nimmediately after the original instruction:\n\n  %vreg7:sub_8bit<def> = MOV8ri 9; GR32_ABCD:%vreg7\n  %vreg22:sub_8bit<def> = MOV8ri 9; GR32_ABCD:%vreg7\n\nBesides being pointless, it is also wrong since the original instruction\nonly redefines part of the register, and the value read by the new\ninstruction is wrong.\n\nThe problem was the LiveRangeEdit::allUsesAvailableAt() didn't\nspecial-case OrigIdx == UseIdx and found the wrong SSA value.", "modified": "M | /llvm/trunk/lib/CodeGen/LiveRangeEdit.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr14098.ll\n"}, {"commit_id": "166402", "date": "2012-10-21T21:08:29.821607Z", "author": "grosser", "msg": "cmake: Use suffix for shared modules instead of the one for shared libraries\n\nOn Linux there is no difference between shared modules and shared libaries, both\nare '.so' files. However, on darwin only shared modules are '.so' files. Shared\nlibraries have the '.dynlib' suffix.\n\nFix test cases on darwin by expecting a shared module suffix for Polly instead\nof a shared library suffix.\n\nThis fixes PR14135\n\nReported by:  Jack Howarth  <howarth@bromo.med.uc.edu>", "modified": "M | /polly/trunk/test/CMakeLists.txt\n"}, {"commit_id": "166491", "date": "2012-10-23T18:44:18.251579Z", "author": "nadav", "msg": "\nUse the AliasAnalysis isIdentifiedObj because it also understands mallocs and c++ news.\n\nPR14158.\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nA | /llvm/trunk/test/Transforms/LoopVectorize/cpp-new-array.ll\n"}, {"commit_id": "166613", "date": "2012-10-24T19:53:01.323827Z", "author": "evancheng", "msg": "Fix a miscompilation caused by a typo. When turning a adde with negative value\ninto a sbc with a positive number, the immediate should be complemented, not\nnegated. Also added a missing pattern for ARM codegen.\n\nrdar://12559385\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMInstrInfo.td\nM | /llvm/trunk/lib/Target/ARM/ARMInstrThumb2.td\nM | /llvm/trunk/test/CodeGen/ARM/carry.ll\nM | /llvm/trunk/test/CodeGen/Thumb2/carry.ll\n"}, {"commit_id": "166880", "date": "2012-10-27T17:41:27.894706Z", "author": "stoklund", "msg": "Never attempt to join an early-clobber def with a regular kill.\n\nThis fixes PR14194.", "modified": "M | /llvm/trunk/lib/CodeGen/RegisterCoalescer.cpp\nM | /llvm/trunk/test/CodeGen/X86/crash.ll\n"}, {"commit_id": "166943", "date": "2012-10-29T17:49:34.803669Z", "author": "uweigand", "msg": "Allow i32/i64 for 'f' constraint on PowerPC.\nThis fixes PR12757.\n", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCISelLowering.cpp\nA | /llvm/trunk/test/CodeGen/PowerPC/pr12757.ll\n"}, {"commit_id": "166951", "date": "2012-10-29T18:09:01.083763Z", "author": "uweigand", "msg": "Implement arithmetic on APFloat with PPCDoubleDouble semantics by\ntreating it as if it were an IEEE floating-point type with 106-bit\nmantissa.\n\nThis makes compile-time arithmetic on \"long double\" for PowerPC\nin clang (in particular parsing of floating point constants)\nwork, and fixes all \"long double\" related failures in the test\nsuite.\n", "modified": "M | /llvm/trunk/lib/Support/APFloat.cpp\nM | /llvm/trunk/unittests/ADT/APFloatTest.cpp\n"}, {"commit_id": "166956", "date": "2012-10-29T18:26:47.650933Z", "author": "rsmith", "msg": "Partially roll back r166898; it exposed a bug in the standard.\n\nThe problem is as follows: C++11 has contexts which are not\npotentially-evaluated, and yet in which we are required or encouraged to\nperform constant evaluation. In such contexts, we are not permitted to\nimplicitly define special member functions for literal types, therefore\nwe cannot evalaute those constant expressions.\n\nPunt on this in one more context for now by skipping checking constexpr\nvariable initializers if they occur in dependent contexts.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/test/SemaCXX/constant-expression-cxx11.cpp\n"}, {"commit_id": "167157", "date": "2012-10-31T18:52:25.568761Z", "author": "rafael", "msg": "Remove Triple::getArchTypeForDarwinArchName. I lives on the clang driver now.", "modified": "M | /llvm/trunk/include/llvm/ADT/Triple.h\nM | /llvm/trunk/lib/Support/Triple.cpp\n"}, {"commit_id": "167506", "date": "2012-11-06T23:56:42.659337Z", "author": "efriedma", "msg": "Fix assertion failure with auto and nested initializer list; PR14272.\n\n", "modified": "M | /cfe/trunk/lib/Sema/SemaTemplateDeduction.cpp\nM | /cfe/trunk/test/SemaCXX/cxx0x-initializer-stdinitializerlist.cpp\n"}, {"commit_id": "168005", "date": "2012-11-14T23:57:08.989063Z", "author": "efriedma", "msg": "Make template diffing handle integral expressions of various widths correctly.\nPR14342.\n\n", "modified": "M | /cfe/trunk/lib/AST/ASTDiagnostic.cpp\nA | /cfe/trunk/test/Misc/diag-template-diffing-cxx98.cpp\nM | /cfe/trunk/test/Misc/diag-template-diffing.cpp\n"}, {"commit_id": "168038", "date": "2012-11-15T12:37:55.796410Z", "author": "samsonov", "msg": "[UBSan] Add support for building ubsan runtime library on Linux with 'make'. Compiler-rt part.", "modified": "M | /compiler-rt/trunk/make/platform/clang_linux.mk\n"}, {"commit_id": "168295", "date": "2012-11-19T00:51:37.653465Z", "author": "chapuni", "msg": "RecursiveASTVisitor.h: Rework Doug's r160404, \"Eliminating the GCC_CAST hack, take two.\"\n\nWith this, ARCMT tests would not crash on certain hosts with g++ -O2, eg. cygwin g++-4.5.3.\n\nr160404 crashed mingw32-g++-4.4.0. I guess method's pointer in conditional expression could not be handled.", "modified": "M | /cfe/trunk/include/clang/AST/RecursiveASTVisitor.h\n"}, {"commit_id": "168441", "date": "2012-11-21T17:42:47.769235Z", "author": "d0k", "msg": "SemaCXX: an enumeral type can be of character or boolean type in a C++11 enum class. Make sure we create a literal of the right type.\n\nFixes PR14386.", "modified": "M | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/test/Misc/integer-literal-printing.cpp\n"}, {"commit_id": "168741", "date": "2012-11-27T23:05:37.532047Z", "author": "kremenek", "msg": "Provide stop-gap solution to crash reported in PR 14436.\n\nThis was also covered by <rdar://problem/12753384>.  The static analyzer\nevaluates a CXXConstructExpr within an initializer expression and\nRegionStore doesn't know how to handle the resulting CXXTempObjectRegion\nthat gets created.  We need a better solution than just dropping the\nvalue, but we need to better understand how to implement the right\nsemantics here.\n\nThanks to Jordan for his help diagnosing the behavior here.", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/RegionStore.cpp\nM | /cfe/trunk/test/Analysis/misc-ps-region-store.cpp\n"}, {"commit_id": "168826", "date": "2012-11-28T23:17:40.265624Z", "author": "hanm", "msg": "Implement C++11 [dcl.attr.grammar] p4: If an attribute-specifier-seq appertains to a friend declaration, that declaration shall be a definition.\n\n", "modified": "M | /cfe/trunk/include/clang/Sema/DeclSpec.h\nM | /cfe/trunk/lib/Parse/ParseDeclCXX.cpp\nM | /cfe/trunk/test/Parser/cxx0x-attributes.cpp\n"}, {"commit_id": "168853", "date": "2012-11-29T04:30:50.525151Z", "author": "rsmith", "msg": "Remove 'noreturn' attribute from friend declaration. This attribute will be\ninherited from the previous out-of-class declaration, and attributes on friend\nfunction declarations are ill-formed in C++11.\n", "modified": "M | /libcxx/trunk/include/exception\n"}, {"commit_id": "169689", "date": "2012-12-09T05:55:43.262323Z", "author": "rsmith", "msg": "PR14550: If a system header contains a bogus constexpr function definition,\ndon't mark the function as invalid, since we suppress the error.\n", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/test/CXX/dcl.dcl/dcl.spec/dcl.constexpr/p5.cpp\n"}, {"commit_id": "170474", "date": "2012-12-18T23:32:47.118075Z", "author": "efriedma", "msg": "Fix a crash in diagnostic printing when a template class type is diff'ed\nagainst itself. PR14489.\n\n", "modified": "M | /cfe/trunk/lib/AST/ASTDiagnostic.cpp\nM | /cfe/trunk/test/Misc/diag-template-diffing.cpp\n"}, {"commit_id": "170528", "date": "2012-12-19T11:09:15.189361Z", "author": "d0k", "msg": "LoopVectorize: Make iteration over induction variables not depend on pointer values.\n\nMapVector is a bit heavyweight, but I don't see a simpler way. Also the\nInductionList is unlikely to be large. This should help 3-stage selfhost\ncompares (PR14647).", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.h\n"}, {"commit_id": "170546", "date": "2012-12-19T14:34:28.446961Z", "author": "d0k", "msg": "Make TargetLowering::getTypeConversion more resilient against odd illegal MVTs.\n\n- An MVT can become an EVT when being split (e.g. v2i8 -> v1i8, the latter doesn't exist)\n- Return the scalar value when an MVT is scalarized (v1i64 -> i64)\n\nFixes PR14639ff.", "modified": "M | /llvm/trunk/include/llvm/Target/TargetLowering.h\nA | /llvm/trunk/test/Transforms/LoopVectorize/X86/no-vector.ll\n"}, {"commit_id": "170578", "date": "2012-12-19T19:55:47.899960Z", "author": "rdivacky", "msg": "Remove edis - the enhanced disassembler. Fixes PR14654.\n", "modified": "M | /llvm/trunk/Makefile.rules\nM | /llvm/trunk/include/llvm/MC/MCDisassembler.h\nD | /llvm/trunk/include/llvm-c/EnhancedDisassembly.h\nM | /llvm/trunk/lib/MC/MCDisassembler/CMakeLists.txt\nD | /llvm/trunk/lib/MC/MCDisassembler/EDDisassembler.cpp\nD | /llvm/trunk/lib/MC/MCDisassembler/EDDisassembler.h\nD | /llvm/trunk/lib/MC/MCDisassembler/EDInfo.h\nD | /llvm/trunk/lib/MC/MCDisassembler/EDInst.cpp\nD | /llvm/trunk/lib/MC/MCDisassembler/EDInst.h\nD | /llvm/trunk/lib/MC/MCDisassembler/EDMain.cpp\nD | /llvm/trunk/lib/MC/MCDisassembler/EDOperand.cpp\nD | /llvm/trunk/lib/MC/MCDisassembler/EDOperand.h\nD | /llvm/trunk/lib/MC/MCDisassembler/EDToken.cpp\nD | /llvm/trunk/lib/MC/MCDisassembler/EDToken.h\nM | /llvm/trunk/lib/Target/ARM/CMakeLists.txt\nM | /llvm/trunk/lib/Target/ARM/Disassembler/ARMDisassembler.cpp\nM | /llvm/trunk/lib/Target/ARM/Makefile\nM | /llvm/trunk/lib/Target/MBlaze/CMakeLists.txt\nM | /llvm/trunk/lib/Target/MBlaze/Disassembler/MBlazeDisassembler.cpp\nM | /llvm/trunk/lib/Target/MBlaze/Disassembler/MBlazeDisassembler.h\nM | /llvm/trunk/lib/Target/MBlaze/Makefile\nM | /llvm/trunk/lib/Target/Mips/CMakeLists.txt\nM | /llvm/trunk/lib/Target/Mips/Disassembler/MipsDisassembler.cpp\nM | /llvm/trunk/lib/Target/Mips/Makefile\nM | /llvm/trunk/lib/Target/X86/CMakeLists.txt\nM | /llvm/trunk/lib/Target/X86/Disassembler/X86Disassembler.cpp\nM | /llvm/trunk/lib/Target/X86/Disassembler/X86Disassembler.h\nM | /llvm/trunk/lib/Target/X86/Makefile\nD | /llvm/trunk/test/MC/Disassembler/X86/enhanced.txt\nM | /llvm/trunk/tools/llvm-mc/Disassembler.cpp\nM | /llvm/trunk/tools/llvm-mc/Disassembler.h\nM | /llvm/trunk/tools/llvm-mc/llvm-mc.cpp\nM | /llvm/trunk/utils/TableGen/CMakeLists.txt\nD | /llvm/trunk/utils/TableGen/EDEmitter.cpp\nM | /llvm/trunk/utils/TableGen/TableGen.cpp\nM | /llvm/trunk/utils/TableGen/TableGenBackends.h\n"}, {"commit_id": "171264", "date": "2012-12-30T20:53:28.255166Z", "author": "wdietz2", "msg": "[ubsan] Recover by default, use -fno-sanitize-recover to disable.\n", "modified": "M | /cfe/trunk/include/clang/Driver/CC1Options.td\nM | /cfe/trunk/include/clang/Driver/Options.td\nM | /cfe/trunk/include/clang/Frontend/CodeGenOptions.def\nM | /cfe/trunk/lib/Driver/Tools.cpp\nM | /cfe/trunk/lib/Frontend/CompilerInvocation.cpp\nM | /cfe/trunk/test/CodeGen/catch-undef-behavior.c\nM | /cfe/trunk/test/CodeGen/sanitize-recover.c\nM | /cfe/trunk/test/CodeGenCXX/catch-undef-behavior.cpp\nM | /cfe/trunk/test/Driver/fsanitize.c\n"}, {"commit_id": "171316", "date": "2012-12-31T19:34:21.641595Z", "author": "mspencer", "msg": "[CMake] Fix c++ abi library configuration on Linux.\n\nYou can now configure from the command line using:\n-DLIBCXX_CXX_ABI=libsupc++\n-DLIBCXX_LIBSUPCXX_INCLUDE_PATHS=\"path;path\n\nAlso documents how to build on Linux.", "modified": "M | /libcxx/trunk/CMakeLists.txt\nM | /libcxx/trunk/lib/CMakeLists.txt\nM | /libcxx/trunk/www/index.html\n"}, {"commit_id": "171731", "date": "2013-01-07T13:08:40.650117Z", "author": "djasper", "msg": "Prefer not to break after assignments.\n\nThis addresses llvm.org/PR14830.\n\nBefore:\nunsigned Cost =\n    TTI.getMemoryOpCost(I->getOpcode(), VectorTy, SI->getAlignment(),\n                        SI->getPointerAddressSpace());\nCharSourceRange LineRange =\n    CharSourceRange::getTokenRange(TheLine.Tokens.front().Tok.getLocation(),\n                                   TheLine.Tokens.back().Tok.getLocation());\n\nAfter:\nunsigned Cost = TTI.getMemoryOpCost(I->getOpcode(), VectorTy,\n                                    SI->getAlignment(),\n                                    SI->getPointerAddressSpace());\nCharSourceRange LineRange = CharSourceRange::getTokenRange(\n                                TheLine.Tokens.front().Tok.getLocation(),\n                                TheLine.Tokens.back().Tok.getLocation());\n\nThis required rudimentary changes to static initializer lists, but we\nare not yet formatting them in a reasonable way. That will be done in a\nsubsequent patch.", "modified": "M | /cfe/trunk/lib/Format/Format.cpp\nM | /cfe/trunk/unittests/Format/FormatTest.cpp\n"}, {"commit_id": "171778", "date": "2013-01-07T19:29:18.221957Z", "author": "wschmidt", "msg": "This patch addresses bug 14678 by fixing two problems in medium code model\ncode generation.  Variables addressed through a GlobalAlias were not being\nhandled, and variables with available_externally linkage were treated\nincorrectly.  The patch contains two new tests to verify the correct code\ngeneration for these cases.\n", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCAsmPrinter.cpp\nM | /llvm/trunk/lib/Target/PowerPC/PPCISelDAGToDAG.cpp\nA | /llvm/trunk/test/CodeGen/PowerPC/mcm-8.ll\nA | /llvm/trunk/test/CodeGen/PowerPC/mcm-9.ll\n"}, {"commit_id": "172243", "date": "2013-01-11T19:34:23.282080Z", "author": "rafael", "msg": "Reject incompatible redeclarations of extern C symbols.\n\nBefore we were only checking if the new declaration itself was marked extern\nC. Fixes prpr14766.", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/test/Sema/function-redecl.c\nM | /cfe/trunk/test/SemaCXX/function-redecl.cpp\n"}, {"commit_id": "172368", "date": "2013-01-13T22:12:06.727618Z", "author": "mgottesman", "msg": "Fixed an infinite loop in the block escape in analysis in ObjCARC caused by 2x blocks each assigned a value via a phi-node causing each to depend on the other.\n\nA test case is provided as well.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/ObjCARC.cpp\nA | /llvm/trunk/test/Transforms/ObjCARC/dont-infinite-loop-during-block-escape-analysis.ll\n"}, {"commit_id": "172997", "date": "2013-01-21T00:30:31.305345Z", "author": "chapuni", "msg": "Support/Compiler.h: MSC1600, aka VS2010, is not C++11-ready.\n\nLLVM_HAS_CXX11_TYPETRAITS -- std::is_constructible\nLLVM_HAS_CXX11_STDLIB -- std::unique_ptr", "modified": "M | /llvm/trunk/include/llvm/Support/Compiler.h\n"}, {"commit_id": "174641", "date": "2013-02-07T18:36:50.846513Z", "author": "meadori", "msg": "ADT: Correct APInt::getActiveWords for zero values\n\nPR15138 was opened because of a segfault in the Bitcode writer.\nThe actual issue ended up being a bug in APInt where calls to\nAPInt::getActiveWords returns a bogus value when the APInt value\nis 0.  This patch fixes the problem by ensuring that getActiveWords\nreturns 1 for 0 valued APInts.", "modified": "M | /llvm/trunk/include/llvm/ADT/APInt.h\nM | /llvm/trunk/unittests/ADT/APIntTest.cpp\n"}, {"commit_id": "174733", "date": "2013-02-08T19:10:36.156887Z", "author": "hhinnant", "msg": "Michael van der Westhuizen: Update instructions for building on Linux.", "modified": "M | /libcxx/trunk/www/index.html\n"}, {"commit_id": "174894", "date": "2013-02-11T17:52:36.430780Z", "author": "grosser", "msg": "[isl-codegen]: Fix off by one in getNumberOfIterations\n\nWe need to remove one dimension. Any is correct as long as it exists. We have\nchoosen for whatever reason the dimension #dims - 2. This is incorrect if\nthere is just one dimension. For CLooG this case did never happen. For isl\nhowever, the case can happen and causes undefined behavior including crashes.\nWe choose now always the last dimension #dims - 1. We could have choosen\ndimension '0' but the last dimension is what we remove conceptionally in the\nalgorithm, so it seems better to actually program it that way.\n\nWhile at it remove another piece of undefined behavior.", "modified": "M | /polly/trunk/include/polly/CodeGen/CodeGeneration.h\nA | /polly/trunk/test/Isl/CodeGen/20130211-getNumberOfIterations.ll\n"}, {"commit_id": "174939", "date": "2013-02-12T03:51:38.557589Z", "author": "rjmccall", "msg": "Change some CGF parameters to CGMs.", "modified": "M | /cfe/trunk/lib/CodeGen/CGException.cpp\n"}, {"commit_id": "174940", "date": "2013-02-12T03:51:46.281362Z", "author": "rjmccall", "msg": "Call __cxa_begin_catch with the current exception before\ncalling std::terminate().  rdar://11904428", "modified": "M | /cfe/trunk/lib/CodeGen/CGException.cpp\nM | /cfe/trunk/test/CXX/except/except.spec/p9-noexcept.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx0x-delegating-ctors.cpp\nM | /cfe/trunk/test/CodeGenCXX/exceptions.cpp\nM | /cfe/trunk/test/CodeGenCXX/nrvo.cpp\n"}, {"commit_id": "175960", "date": "2013-02-23T08:07:18.472454Z", "author": "djasper", "msg": "Don't recognize unnamed pointer parameters as casts.\n\nThis fixes llvm.org/PR15061.\n\nBefore: virtual void f(int *)const;\nAfter:  virtual void f(int *) const;", "modified": "M | /cfe/trunk/lib/Format/TokenAnnotator.cpp\nM | /cfe/trunk/unittests/Format/FormatTest.cpp\n"}, {"commit_id": "177189", "date": "2013-03-15T21:41:55.572572Z", "author": "jrose", "msg": "[analyzer] Make GRBugReporter::generatePathDiagnostic iterative, not recursive.\n\nThe previous generatePathDiagnostic() was intended to be tail-recursive,\nrestarting and trying again if a report was marked invalid. However:\n (1) this leaked all the cloned visitors, which weren't being deleted, and\n (2) this wasn't actually tail-recursive because some local variables had\n     non-trivial destructors.\n\nThis was causing us to overflow the stack on inputs with large numbers of\nreports in the same equivalence class, such as sqlite3.c. Being iterative\nat least prevents us from blowing out the stack, but doesn't solve the\nperformance issue: suppressing thousands (yes, thousands) of paths in the\nsame equivalence class is expensive. I'm looking into that now.\n\n<rdar://problem/13423498>", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/BugReporter.cpp\n"}, {"commit_id": "177214", "date": "2013-03-16T01:07:47.824493Z", "author": "jrose", "msg": "[analyzer] Don't repeat a bug equivalence class if every report is invalid.\n\nI removed this check in the recursion->iteration commit, but forgot that\ngeneratePathDiagnostic may be called multiple times if there are multiple\nPathDiagnosticConsumers.", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/BugReporter.cpp\n"}, {"commit_id": "177345", "date": "2013-03-18T23:22:28.298151Z", "author": "dblaikie", "msg": "PR15539: Record \"evaluating if/elif condition\" flag in the right place\n\nThe previous implementation missed the case where the elif condition was\nevaluated from the context of an #ifdef that was false causing PR15539.", "modified": "M | /cfe/trunk/lib/Lex/PPDirectives.cpp\nM | /cfe/trunk/lib/Lex/PPExpressions.cpp\nM | /cfe/trunk/test/Preprocessor/has_include.c\n"}, {"commit_id": "177453", "date": "2013-03-19T22:38:09.758294Z", "author": "zaks", "msg": "[analyzer] Do not believe lazy binding when symbolic region types do not match\n\nThis fixes a crash when analyzing LLVM that was exposed by r177220 (modeling of\ntrivial copy/move assignment operators).\n\nWhen we look up a lazy binding for \u9225\u6dcfuilder\u9225? we see the direct binding of Loc at offset 0.\nPreviously, we believed the binding, which led to a crash. Now, we do not believe it as\nthe types do not match.", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/RegionStore.cpp\nA | /cfe/trunk/test/Analysis/region-store.cpp\nM | /cfe/trunk/test/Analysis/uninit-vals.m\n"}, {"commit_id": "178103", "date": "2013-03-27T00:22:47.477868Z", "author": "rsmith", "msg": "PR15597: Fix a confusion between the implicit exception specification and the\nuninstantiated exception specification when a special member within a class\ntemplate is both defaulted and given an exception specification on its first\ndeclaration.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaExceptionSpec.cpp\nM | /cfe/trunk/test/SemaCXX/cxx0x-defaulted-functions.cpp\n"}, {"commit_id": "179099", "date": "2013-04-09T16:15:19.311696Z", "author": "alexfh", "msg": "Again macros without trailing semicolons: don't care about declaration context.\n\nSummary:\nSome codebases use these kinds of macros in functions, e.g. Chromium's\nIPC_BEGIN_MESSAGE_MAP, IPC_BEGIN_MESSAGE_HANDLER, etc.\n\nReviewers: djasper, klimek\n\nReviewed By: klimek\n\nCC: cfe-commits\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D645", "modified": "M | /cfe/trunk/lib/Format/UnwrappedLineParser.cpp\nM | /cfe/trunk/unittests/Format/FormatTest.cpp\n"}, {"commit_id": "179563", "date": "2013-04-15T22:03:38.474749Z", "author": "jrose", "msg": "[analyzer] Don't assert on a temporary of pointer-to-member type.\n\nWhile we don't do anything intelligent with pointers-to-members today,\nit's perfectly legal to need a temporary of pointer-to-member type to, say,\npass by const reference. Tweak an assertion to allow this.\n\nPR15742 and PR15747", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/ExprEngine.cpp\nM | /cfe/trunk/test/Analysis/pointer-to-member.cpp\n"}, {"commit_id": "179582", "date": "2013-04-16T02:57:02.928820Z", "author": "stoklund", "msg": "Add 64-bit multiply and divide instructions for SPARC v9.", "modified": "M | /llvm/trunk/lib/Target/Sparc/SparcISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/Sparc/SparcInstr64Bit.td\nM | /llvm/trunk/test/CodeGen/SPARC/64bit.ll\n"}, {"commit_id": "179589", "date": "2013-04-16T10:53:11.766707Z", "author": "samsonov", "msg": "llvm-objdump: Don't print contents of BSS sections: it makes no sense and crashes llvm-objdump on relocated objects with large bss", "modified": "M | /llvm/trunk/test/Object/objdump-section-content.test\nM | /llvm/trunk/tools/llvm-objdump/llvm-objdump.cpp\n"}, {"commit_id": "180941", "date": "2013-05-02T19:18:03.870553Z", "author": "void", "msg": "Use the Itanium ABI for thread_local on Darwin.\n\nAfter some discussion, it was decided to use the Itanium ABI for thread_local on\nDarwin OS X platforms. This involved a couple of changes. First, we use\n\"_tlv_atexit\" instead of \"__cxa_thread_atexit\". Secondly, the global variables\nare marked with 'internal' linkage, because we want all access to be calls to\nthe Itanium-specific entry point, which has normal linkage.\n<rdar://problem/13733006>\n", "modified": "M | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/CodeGen/ItaniumCXXABI.cpp\nA | /cfe/trunk/test/CodeGenCXX/tls-init-funcs.cpp\n"}, {"commit_id": "182071", "date": "2013-05-17T02:16:49.282526Z", "author": "jrose", "msg": "[analyzer] Don't inline ~shared_ptr.\n\nThe analyzer can't see the reference count for shared_ptr, so it doesn't\nknow whether a given destruction is going to delete the referenced object.\nThis leads to spurious leak and use-after-free warnings.\n\nFor now, just ban destructors named '~shared_ptr', which catches\nstd::shared_ptr, std::tr1::shared_ptr, and boost::shared_ptr.\n\nPR15987", "modified": "M | /cfe/trunk/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h\nM | /cfe/trunk/lib/StaticAnalyzer/Core/AnalyzerOptions.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp\nM | /cfe/trunk/test/Analysis/NewDelete-checker-test.cpp\nM | /cfe/trunk/test/Analysis/analyzer-config.cpp\n"}, {"commit_id": "182375", "date": "2013-05-21T12:27:47.015066Z", "author": "eugenis", "msg": "[msan] A no-op implementation of VarArg handling.\n\nThis stuff is used on platforms where MSan does not have a proper VarArg\nimplementation (anything other than x86_64 at the moment).\n", "modified": "M | /llvm/trunk/lib/Transforms/Instrumentation/MemorySanitizer.cpp\nA | /llvm/trunk/test/Instrumentation/MemorySanitizer/X86\nA | /llvm/trunk/test/Instrumentation/MemorySanitizer/X86/vararg.ll\nM | /llvm/trunk/test/Instrumentation/MemorySanitizer/msan_basic.ll\n"}, {"commit_id": "182485", "date": "2013-05-22T16:54:56.584749Z", "author": "arnolds", "msg": "LoopVectorize: Make Value pointers that could be RAUW'ed a VH\n\nThe Value pointers we store in the induction variable list can be RAUW'ed by a\ncall to SCEVExpander::expandCodeFor, use a TrackingVH instead. Do the same thing\nin some other places where we store pointers that could potentially be RAUW'ed.\n\nFixes PR16073.", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nA | /llvm/trunk/test/Transforms/LoopVectorize/value-ptr-bug.ll\n"}, {"commit_id": "182636", "date": "2013-05-24T10:54:58.401093Z", "author": "d0k", "msg": "Remove the Copied parameter from MemoryObject::readBytes.\n\nThere was exactly one caller using this API right, the others were relying on\nspecific behavior of the default implementation. Since it's too hard to use it\nright just remove it and standardize on the default behavior.\n\nDefines away PR16132.", "modified": "M | /llvm/trunk/include/llvm/Bitcode/BitstreamReader.h\nM | /llvm/trunk/include/llvm/Support/MemoryObject.h\nM | /llvm/trunk/include/llvm/Support/StreamableMemoryObject.h\nM | /llvm/trunk/include/llvm/Support/StringRefMemoryObject.h\nM | /llvm/trunk/lib/Bitcode/Reader/BitcodeReader.cpp\nM | /llvm/trunk/lib/Support/MemoryObject.cpp\nM | /llvm/trunk/lib/Support/StreamableMemoryObject.cpp\nM | /llvm/trunk/lib/Support/StringRefMemoryObject.cpp\nM | /llvm/trunk/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp\nM | /llvm/trunk/lib/Target/ARM/Disassembler/ARMDisassembler.cpp\nM | /llvm/trunk/lib/Target/MBlaze/Disassembler/MBlazeDisassembler.cpp\nM | /llvm/trunk/lib/Target/Mips/Disassembler/MipsDisassembler.cpp\nM | /llvm/trunk/lib/Target/SystemZ/Disassembler/SystemZDisassembler.cpp\nM | /llvm/trunk/lib/Target/XCore/Disassembler/XCoreDisassembler.cpp\n"}, {"commit_id": "182858", "date": "2013-05-29T14:37:04.114903Z", "author": "smatveev", "msg": "[asan] Fix r182854: run the unpoison_tls test only on Linux.", "modified": "A | /compiler-rt/trunk/lib/asan/lit_tests/Linux/unpoison_tls.cc\nD | /compiler-rt/trunk/lib/asan/lit_tests/unpoison_tls.cc\n"}, {"commit_id": "183025", "date": "2013-05-31T17:44:38.125303Z", "author": "grosser", "msg": "Test that independent block pass does not transform induction variables\n\nThe original test case showed a problem with the independet blocks pass and\nwe decided to XFAIL it for now. Unfortunately the failure is not detected if\nwe build without asserts and the verification of the independent block pass\nis not run. This change tests now for the actual reason of the failure and\nshould trigger even in a non asserts build. We did not yet solve the underlying\nbug, but this should at least make the test suite behavior consistent.", "modified": "A | /polly/trunk/test/IndependentBlocks/indvars.ll\nD | /polly/trunk/test/Isl/CodeGen/scevcodegen-1.ll\n"}, {"commit_id": "183296", "date": "2013-06-05T05:32:23.615753Z", "author": "dblaikie", "msg": "PR16214: Debug Info: -flimit-debug-info doesn't omit definitions for types used via typedefs\n\nIn an effort to make -flimit-debug-info more consistent I over-shot the\nmark & made types used via typedefs never produce definitions in the\ndebug info (even if the type was used in a way that would require a\ndefinition).\n\nThe fix for this is to do exactly what I was hoping to do at some point\n- plumb the declaration/definition choice through the various layers of\n\"CreateType\" in CGDebugInfo. In this way we can produce declarations\nwhenever they are sufficient & definitions otherwise - including when\nqualifiers are used, for example (discovered in PR14467). This may not\nbe complete (there may be other types/situations where we need to\npropagate the \"declaration/definition\" choice) but it lays the basic\nfoundation which we can enhance in future iterations.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/test/CodeGenCXX/debug-info.cpp\n"}, {"commit_id": "183451", "date": "2013-06-06T22:02:58.784235Z", "author": "zaks", "msg": "[analyzer] Ensure that pieces with invalid locations always get removed from the BugReport\n\nThe function in which we were doing it used to be conditionalized. Add a new unconditional\ncleanup step.\n\nThis fixes PR16227 (radar://14073870) - a crash when generating html output for one of the test files.", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/BugReporter.cpp\nM | /cfe/trunk/test/Analysis/unix-fns.c\n"}, {"commit_id": "183735", "date": "2013-06-11T09:52:02.047259Z", "author": "smatveev", "msg": "[lsan] Fix the unittest makefiles.", "modified": "M | /compiler-rt/trunk/lib/lsan/lit_tests/CMakeLists.txt\nM | /compiler-rt/trunk/lib/lsan/tests/CMakeLists.txt\nM | /compiler-rt/trunk/lib/lsan/tests/lsan_dummy_unittest.cc\n"}, {"commit_id": "183837", "date": "2013-06-12T15:03:45.330562Z", "author": "aaronballman", "msg": "Silencing a signed vs unsigned comparison mismatch in MSVC.", "modified": "M | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\n"}, {"commit_id": "184054", "date": "2013-06-16T05:05:39.687684Z", "author": "rsmith", "msg": "PR16339: Don't produce a diagnostic pointing at the whitespace between a '#if'\nand a '!defined(X)' if we find a broken header guard. This is suboptimal; we\nshould point the diagnostic at the 'X' token not the 'if' token, but it fixes\nthe crash.\n", "modified": "M | /cfe/trunk/lib/Lex/PPDirectives.cpp\nA | /cfe/trunk/test/Lexer/Inputs/bad-header-guard-defined.h\nM | /cfe/trunk/test/Lexer/header.cpp\n"}, {"commit_id": "184475", "date": "2013-06-20T21:37:43.713988Z", "author": "rjmccall", "msg": "Call __cxa_begin_catch before std::terminate() in a noexcept trap.\n\nr174939-40 caused us to do this in the canonical terminate lpad,\nbut when the EH stack has other cleanups on it we use the\nterminate handler block, which wasn't doing this.\n\nFixes the rest of rdar://11904428 given appropriate stdlib support.", "modified": "M | /cfe/trunk/lib/CodeGen/CGException.cpp\nA | /cfe/trunk/test/CodeGenCXX/noexcept.cpp\n"}, {"commit_id": "184594", "date": "2013-06-21T21:03:11.698711Z", "author": "dblaikie", "msg": "PR16214: Debug info for types first used via pointers or qualified types & later require definitions", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nA | /cfe/trunk/test/CodeGenCXX/debug-info-class-limited.cpp\n"}, {"commit_id": "185828", "date": "2013-07-08T14:58:01.734503Z", "author": "djasper", "msg": "Fix incorrect incorrect cast identification in clang-format.\n\nThis fixes llvm.org/PR16534.\n\nBefore:\naaaaa& operator+(const aaaaa&)LLVM_DELETED_FUNCTION;\nAfter:\naaaaa& operator+(const aaaaa&) LLVM_DELETED_FUNCTION;", "modified": "M | /cfe/trunk/lib/Format/TokenAnnotator.cpp\nM | /cfe/trunk/unittests/Format/FormatTest.cpp\n"}, {"commit_id": "185834", "date": "2013-07-08T16:42:01.640852Z", "author": "rafael", "msg": "We now always create files with the correct permissions. Simplify the interface.", "modified": "M | /llvm/trunk/include/llvm/Support/FileSystem.h\nM | /llvm/trunk/lib/Support/Unix/Path.inc\nM | /llvm/trunk/lib/Support/Windows/Path.inc\nM | /llvm/trunk/unittests/Support/Path.cpp\n"}, {"commit_id": "186125", "date": "2013-07-11T22:22:22.877680Z", "author": "efriedma", "msg": "Make CXXBaseSpecifier::getType return unqual type.\n\nVarious pieces of code, like base initialization in Sema and RTTI IRGen,\ndon't properly ignore qualifiers on base classes.  Instead of auditing the\nwhole codebase, just strip them off in the getter.  (The type as written is\nstill available in the TypeSourceInfo for code that cares.)\n\nFixes PR16596.", "modified": "M | /cfe/trunk/include/clang/AST/DeclCXX.h\nM | /cfe/trunk/test/SemaCXX/class-base-member-init.cpp\n"}, {"commit_id": "186262", "date": "2013-07-13T21:08:14.642459Z", "author": "dblaikie", "msg": "PR16214, PR14467: DebugInfo: use \"RequireCompleteType\" to decide when to emit the full definition of a type in -flimit-debug-info\n\nThis simplifies the core benefit of -flimit-debug-info by taking a more\nsystematic approach to avoid emitting debug info definitions for types\nthat only require declarations. The previous ad-hoc approach (3 cases\nremoved in this patch) had many holes.\n\nThe general approach (adding a bit to TagDecl and callback through\nASTConsumer) has been discussed with Richard Smith - though always open\nto revision.", "modified": "M | /cfe/trunk/include/clang/AST/ASTConsumer.h\nM | /cfe/trunk/include/clang/AST/Decl.h\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/CodeGen/CGClass.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenAction.cpp\nM | /cfe/trunk/lib/CodeGen/ModuleBuilder.cpp\nM | /cfe/trunk/lib/Sema/SemaType.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-class-limited.cpp\n"}, {"commit_id": "186390", "date": "2013-07-16T09:32:17.803719Z", "author": "rengolin", "msg": "ARM EABI divmod support\n\nThis patch enables calls to __aeabi_idivmod when in EABI mode,\nby using the remainder value returned on registers (R1),\nenabled by the ARM triple \"none-eabi\". Note that Darwin and\nGNUEABI triples will continue lowering on GNU style, that is,\nusing the stack for the remainder.\n\nStill need to add SREM/UREM support fix for 64-bit lowering.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.h\nM | /llvm/trunk/lib/Target/ARM/ARMSubtarget.h\nA | /llvm/trunk/test/CodeGen/ARM/divmod-eabi.ll\n"}, {"commit_id": "187278", "date": "2013-07-27T00:01:07.100587Z", "author": "tstellar", "msg": "SimplifyCFG: Use parallel-and and parallel-or mode to consolidate branch conditions\n\nMerge consecutive if-regions if they contain identical statements.\nBoth transformations reduce number of branches.  The transformation\nis guarded by a target-hook, and is currently enabled only for +R600,\nbut the correctness has been tested on X86 target using a variety of\nCPU benchmarks.\n\nPatch by: Mei Ye", "modified": "M | /llvm/trunk/include/llvm/Analysis/TargetTransformInfo.h\nM | /llvm/trunk/include/llvm/InitializePasses.h\nM | /llvm/trunk/include/llvm/Transforms/Scalar.h\nM | /llvm/trunk/include/llvm/Transforms/Utils/Local.h\nM | /llvm/trunk/lib/Analysis/TargetTransformInfo.cpp\nM | /llvm/trunk/lib/CodeGen/BasicTargetTransformInfo.cpp\nM | /llvm/trunk/lib/Target/R600/AMDGPU.h\nM | /llvm/trunk/lib/Target/R600/AMDGPUTargetMachine.cpp\nM | /llvm/trunk/lib/Target/R600/AMDGPUTargetMachine.h\nA | /llvm/trunk/lib/Target/R600/AMDGPUTargetTransformInfo.cpp\nM | /llvm/trunk/lib/Target/R600/CMakeLists.txt\nM | /llvm/trunk/lib/Transforms/IPO/PassManagerBuilder.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/Scalar.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/SimplifyCFGPass.cpp\nM | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nM | /llvm/trunk/tools/lto/LTOCodeGenerator.cpp\nM | /llvm/trunk/tools/opt/opt.cpp\n"}, {"commit_id": "187291", "date": "2013-07-27T02:54:44.883436Z", "author": "tstellar", "msg": "SimplifyCFG: Add missing tests from r187278", "modified": "A | /llvm/trunk/test/Transforms/SimplifyCFG/R600\nA | /llvm/trunk/test/Transforms/SimplifyCFG/R600/lit.local.cfg\nA | /llvm/trunk/test/Transforms/SimplifyCFG/R600/parallelandifcollapse.ll\nA | /llvm/trunk/test/Transforms/SimplifyCFG/R600/parallelorifcollapse.ll\n"}, {"commit_id": "187646", "date": "2013-08-02T08:06:43.638415Z", "author": "samsonov", "msg": "Fix dereferencing end iterator in SimplifyCFG. Patch by Ye Mei.", "modified": "M | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\n"}, {"commit_id": "187663", "date": "2013-08-02T18:40:24.747871Z", "author": "nadav", "msg": "SLPVectorizer: Fix PR16777. PHInodes may use multiple extracted values that come from different blocks.\nThanks Alexey Samsonov.\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/SLPVectorizer.cpp\nA | /llvm/trunk/test/Transforms/SLPVectorizer/X86/phi3.ll\n"}, {"commit_id": "187981", "date": "2013-08-08T13:55:45.500931Z", "author": "grosser", "msg": "PollyDependence: Simplify Read/Write/MayWrite before feeding them into ISL.\n\nContributed-by: Star Tan <tanmx_star@yeah.net>", "modified": "M | /polly/trunk/lib/Analysis/Dependences.cpp\n"}, {"commit_id": "188329", "date": "2013-08-13T23:34:32.639455Z", "author": "hfinkel", "msg": "BBVectorize: Add initial stores to the write set when tracking uses\n\nWhen computing the use set of a store, we need to add the store to the write\nset prior to iterating over later instructions. Otherwise, if there is a later\naliasing load of that store, that load will not be tagged as a use, and bad\nthings will happen.\n\ntrackUsesOfI still adds later dependent stores of an instruction to that\ninstruction's write set, but it never sees the original instruction, and so\nwhen tracking uses of a store, the store must be added to the write set by the\ncaller.\n\nFixes PR16834.", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/BBVectorize.cpp\nA | /llvm/trunk/test/Transforms/BBVectorize/X86/wr-aliases.ll\n"}, {"commit_id": "188612", "date": "2013-08-17T20:01:53.490641Z", "author": "dblaikie", "msg": "PR16927: Don't assert (or, previously, skip) static data members of enumeration type", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-static-member.cpp\n"}, {"commit_id": "188666", "date": "2013-08-19T10:41:30.989782Z", "author": "samsonov", "msg": "Fix PR16768: properly report malformed sanitizer blacklist file contents", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticDriverKinds.td\nM | /cfe/trunk/lib/Driver/SanitizerArgs.cpp\nM | /cfe/trunk/test/Driver/fsanitize-blacklist.c\n"}, {"commit_id": "188675", "date": "2013-08-19T13:59:22.606958Z", "author": "samsonov", "msg": "Re-apply r188666", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticDriverKinds.td\nM | /cfe/trunk/lib/Driver/CMakeLists.txt\nM | /cfe/trunk/lib/Driver/SanitizerArgs.cpp\nM | /cfe/trunk/test/Driver/fsanitize-blacklist.c\n"}, {"commit_id": "188688", "date": "2013-08-19T19:00:35.973054Z", "author": "pcc", "msg": "Introduce SpecialCaseList::isIn overload for GlobalAliases.\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D1437", "modified": "M | /llvm/trunk/include/llvm/Transforms/Utils/SpecialCaseList.h\nM | /llvm/trunk/lib/Transforms/Utils/SpecialCaseList.cpp\nM | /llvm/trunk/unittests/Transforms/Utils/SpecialCaseList.cpp\n"}, {"commit_id": "188869", "date": "2013-08-21T06:13:34.044191Z", "author": "majnemer", "msg": "DebugInfo: Do not use the DWARF Version for the .debug_pubnames or .debug_pubtypes version field\n\nSummary:\nLLVM would generate DWARF with version 3 in the .debug_pubname and\n.debug_pubtypes version fields.  This would lead SGI dwarfdump to fail\nparsing the DWARF with (in the instance of .debug_pubnames) would exit\nwith:\ndwarfdump ERROR:  dwarf_get_globals: DW_DLE_PUBNAMES_VERSION_ERROR (123)\n\nThis fixes PR16950.\n\nReviewers: echristo, dblaikie\n\nReviewed By: echristo\n\nCC: cfe-commits\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D1454", "modified": "M | /llvm/trunk/include/llvm/Support/Dwarf.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/test/DebugInfo/dwarf-public-names.ll\n"}, {"commit_id": "189453", "date": "2013-08-28T08:04:23.478485Z", "author": "djasper", "msg": "clang-format: Fix corner case in ObjC interface definitions.\n\nIn\n  @implementation ObjcClass\n  - (void)method;\n  {\n  }\n  @end\nthe ObjC compiler seems to accept the superfluous comma after \"method\",\nbut clang-format used to assert on the subsequent \"{\".\n\nThis fixes llvm.org/PR16604.", "modified": "M | /cfe/trunk/lib/Format/UnwrappedLineParser.cpp\nM | /cfe/trunk/unittests/Format/FormatTest.cpp\n"}, {"commit_id": "189672", "date": "2013-08-30T14:35:35.178937Z", "author": "d0k", "msg": "InstCombine: Check for zero shift amounts before subtracting one causing integer overflow.\n\nPR17026. Also avoid undefined shifts and shift amounts larger than 64 bits\n(those are always undef because we can't represent integer types that large).", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/shift.ll\n"}, {"commit_id": "189749", "date": "2013-09-02T09:20:39.971916Z", "author": "djasper", "msg": "clang-format: Fix segfault in overloaded operator parsing.\n\nBefore, constructs like:\n  using A::operator+;\n\ncaused a segfault. This fixes llvm.org/PR17050.", "modified": "M | /cfe/trunk/lib/Format/TokenAnnotator.cpp\nM | /cfe/trunk/unittests/Format/FormatTest.cpp\n"}, {"commit_id": "189801", "date": "2013-09-03T13:22:51.454148Z", "author": "samsonov", "msg": "ASan, LSan, MSan: try to find llvm-symbolizer binary in PATH if it is not provided. Now we don't need to explicitly set the location of llvm-symbolizer in lit test configs.", "modified": "M | /compiler-rt/trunk/lib/asan/asan_rtl.cc\nM | /compiler-rt/trunk/lib/asan/lit_tests/lit.cfg\nM | /compiler-rt/trunk/lib/lsan/lit_tests/AsanConfig/lit.cfg\nM | /compiler-rt/trunk/lib/lsan/lit_tests/LsanConfig/lit.cfg\nM | /compiler-rt/trunk/lib/lsan/lsan.cc\nM | /compiler-rt/trunk/lib/msan/lit_tests/lit.cfg\nM | /compiler-rt/trunk/lib/msan/msan.cc\nM | /compiler-rt/trunk/lib/sanitizer_common/sanitizer_symbolizer.h\nM | /compiler-rt/trunk/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cc\n"}, {"commit_id": "190122", "date": "2013-09-06T06:45:04.053535Z", "author": "dblaikie", "msg": "PR17046, PR17092: Debug Info assert-on-valid due to member loss when context creation recreates the item the context is created for\n\nBy removing the possibility of strange partial definitions with no\nmembers that older GCC's produced for the otherwise unreferenced outer\ntypes of referenced inner types, we can simplify debug info generation\nand correct this bug. Newer (4.8.1 and ToT) GCC's don't produce this\nquirky debug info, and instead produce the full definition for the outer\ntype (except in the case where that type is dynamic and its vtable is\nnot emitted in this TU).\n\nDuring the creation of the context for a type, we may revisit that type\n(due to the need to visit template parameters, among other things) and\nused to end up visiting it first there. Then when we would reach the\noriginal code attempting to define that type, we would lose debug info\nby overwriting its members.\n\nBy avoiding the possibility of latent \"defined with no members\" types,\nwe can be sure than whenever we already have a type in a cache (either a\ndefinition or declaration), we can just return that. In the case of a\nfull definition, our work is done. In the case of a partial definition,\nwe must already be in the process of completing it. And in the case of a\ndeclaration, the completed/vtable/etc callbacks can handle converting it\nto a definition.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-class.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-template-member.cpp\n"}, {"commit_id": "190484", "date": "2013-09-11T03:49:34.841833Z", "author": "efriedma", "msg": "volatile types are not trivially copyable.\n\nPR17123.", "modified": "M | /cfe/trunk/lib/AST/Type.cpp\nM | /cfe/trunk/lib/Sema/SemaChecking.cpp\nM | /cfe/trunk/test/SemaCXX/type-traits.cpp\n"}, {"commit_id": "190990", "date": "2013-09-19T06:02:43.930646Z", "author": "atrick", "msg": "Revert \"Encapsulate PassManager debug flags to avoid static init and cxa_exit.\"\n\nWorking on a better solution to this.\n\nThis reverts commit 7d4e9934e7ca83094c5cf41346966c8350179ff2.", "modified": "M | /llvm/trunk/include/llvm/PassManager.h\nM | /llvm/trunk/lib/IR/Core.cpp\nM | /llvm/trunk/lib/IR/PassManager.cpp\nM | /llvm/trunk/tools/llvm-as/llvm-as.cpp\nM | /llvm/trunk/tools/llvm-diff/llvm-diff.cpp\nM | /llvm/trunk/tools/llvm-dis/llvm-dis.cpp\nM | /llvm/trunk/tools/llvm-extract/llvm-extract.cpp\nM | /llvm/trunk/tools/llvm-link/llvm-link.cpp\nM | /llvm/trunk/tools/llvm-nm/llvm-nm.cpp\nM | /llvm/trunk/tools/llvm-prof/llvm-prof.cpp\nM | /llvm/trunk/tools/llvm-stress/llvm-stress.cpp\n"}, {"commit_id": "191484", "date": "2013-09-27T04:14:12.331845Z", "author": "majnemer", "msg": "Sema: Respect -fdelayed-template-parsing when parsing constexpr functions\n\nFunctions declared as constexpr must have their parsing delayed in\n-fdelayed-template-parsing mode so as not to upset later template\ninstantiation.\n\nN.B. My reading of the standard makes it seem like delayed template\nparsing is at odds with constexpr.  We may want to make refinements in\nother places in clang to make constexpr play nicer with this feature.\n\nThis fixes PR17334.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/test/Parser/DelayedTemplateParsing.cpp\n"}, {"commit_id": "191675", "date": "2013-09-30T15:40:17.453710Z", "author": "d0k", "msg": "Convert manual insert point restores to the new RAII object.", "modified": "M | /llvm/trunk/include/llvm/Analysis/ScalarEvolutionExpander.h\nM | /llvm/trunk/lib/Analysis/ScalarEvolutionExpander.cpp\nM | /llvm/trunk/lib/Transforms/Instrumentation/BoundsChecking.cpp\nM | /llvm/trunk/lib/Transforms/Utils/FlattenCFG.cpp\nM | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\n"}, {"commit_id": "191741", "date": "2013-10-01T12:17:11.528949Z", "author": "d0k", "msg": "SCEVExpander: Fix a regression I introduced by to eagerly adding RAII objects.\n\nPR17425.", "modified": "M | /llvm/trunk/lib/Analysis/ScalarEvolutionExpander.cpp\nM | /llvm/trunk/test/Transforms/LoopStrengthReduce/dominate-assert.ll\n"}, {"commit_id": "192064", "date": "2013-10-06T13:48:22.275527Z", "author": "d0k", "msg": "X86: Don't fold spills into SSE operations if the stack is unaligned.\n\nRegalloc can emit unaligned spills nowadays, but we can't fold the\nspills into SSE ops if we can't guarantee alignment. PR12250.", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrInfo.cpp\nA | /llvm/trunk/test/CodeGen/X86/unaligned-spill-folding.ll\n"}, {"commit_id": "192142", "date": "2013-10-07T23:43:33.620005Z", "author": "marshall", "msg": "Fix LWG Issue 2141: common_type trait produces reference types", "modified": "M | /libcxx/trunk/include/type_traits\nM | /libcxx/trunk/test/utilities/meta/meta.trans/meta.trans.other/common_type.pass.cpp\nM | /libcxx/trunk/test/utilities/meta/meta.unary/meta.unary.prop/is_trivialially_copyable.pass.cpp\nM | /libcxx/trunk/www/cxx1y_status.html\n"}, {"commit_id": "192963", "date": "2013-10-18T10:18:40.691773Z", "author": "sbaranga", "msg": "Add hardware division as a default feature on Cortex-A15. Also add test cases to check this, and change diagnostics for the hwdiv-arm feature to something useful.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARM.td\nM | /llvm/trunk/lib/Target/ARM/ARMInstrInfo.td\nA | /llvm/trunk/test/MC/ARM/idiv.s\nA | /llvm/trunk/test/MC/ARM/invalid-idiv.s\n"}, {"commit_id": "193058", "date": "2013-10-20T21:29:19.522581Z", "author": "pcc", "msg": "Implement function type checker for the undefined behavior sanitizer.\n\nThis uses function prefix data to store function type information at the\nfunction pointer.\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D1338", "modified": "M | /cfe/trunk/docs/UsersManual.rst\nM | /cfe/trunk/include/clang/Basic/Sanitizers.def\nM | /cfe/trunk/lib/CodeGen/CGBuiltin.cpp\nM | /cfe/trunk/lib/CodeGen/CGCUDARuntime.cpp\nM | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nM | /cfe/trunk/lib/CodeGen/TargetInfo.h\nM | /cfe/trunk/test/CodeGenCXX/catch-undef-behavior.cpp\nM | /cfe/trunk/test/Driver/fsanitize.c\n"}, {"commit_id": "193074", "date": "2013-10-21T10:54:53.931298Z", "author": "sbaranga", "msg": "Add the __ARM_ARCH_EXT_IDIV__ predefine. It is set to 1 if we have hardware divide in the mode that we are compiling in (depending on the target features), not defined if we don't. Should be compatible with the GCC conterpart. Also adding a -hwdiv option to overide the default behavior.", "modified": "M | /cfe/trunk/docs/UsersManual.rst\nM | /cfe/trunk/include/clang/Driver/Options.td\nM | /cfe/trunk/lib/Basic/Targets.cpp\nM | /cfe/trunk/lib/Driver/Tools.cpp\nA | /cfe/trunk/test/Driver/arm-hwdiv.c\nM | /cfe/trunk/test/Preprocessor/init.c\n"}, {"commit_id": "193075", "date": "2013-10-21T10:59:33.260189Z", "author": "sbaranga", "msg": "Set the default hardware division features for ARM cpus. Also set it as default for A32 armv8.", "modified": "M | /cfe/trunk/lib/Basic/Targets.cpp\nM | /cfe/trunk/test/Preprocessor/arm-target-features.c\n"}, {"commit_id": "193265", "date": "2013-10-23T20:08:55.357158Z", "author": "jrose", "msg": "[analyzer] Generate a LazyCompoundVal when loading from a union-typed region.\n\nThis ensures that variables accessible through a union are invalidated when\nthe union value is passed to a function. We still don't fully handle union\nvalues, but this should at least quiet some false positives.\n\nPR16596", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/RegionStore.cpp\nM | /cfe/trunk/test/Analysis/unions.cpp\n"}, {"commit_id": "193274", "date": "2013-10-23T21:31:20.358723Z", "author": "majnemer", "msg": "Parse: Disable delayed template parsing for constexpr functions\n\nCommit r191484 treated constexpr function templates as normal function\ntemplates with respect to delaying their parsing.  However, this is\nunnecessarily restrictive because there is no compatibility concern with\nconstexpr, MSVC doesn't support it.\n\nInstead, simply disable delayed template parsing for constexpr function\ntemplates.  This largely reverts the changes made in r191484 but keeps\nit's unit test.\n\nThis fixes PR17661.\n", "modified": "M | /cfe/trunk/lib/Parse/ParseCXXInlineMethods.cpp\nM | /cfe/trunk/lib/Parse/Parser.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/test/Parser/DelayedTemplateParsing.cpp\n"}, {"commit_id": "193392", "date": "2013-10-25T06:26:44.639116Z", "author": "srhines", "msg": "Switch __ARM_ARCH_7S__ to __ARM_ARCH_EXT_IDIV__ for use of sdiv/udiv assembly.\n\n__ARM_ARCH_EXT_IDIV__ is the define that ARM is using to indicate the presence\nof hardware integer divide (sdiv/udiv). Previously, this code was only being\ninvoked for processors marked 7S. We now can correctly generate hardware\ndivides on cortex-a15 devices.", "modified": "M | /compiler-rt/trunk/lib/arm/divmodsi4.S\nM | /compiler-rt/trunk/lib/arm/divsi3.S\nM | /compiler-rt/trunk/lib/arm/modsi3.S\nM | /compiler-rt/trunk/lib/arm/udivmodsi4.S\nM | /compiler-rt/trunk/lib/arm/udivsi3.S\nM | /compiler-rt/trunk/lib/arm/umodsi3.S\n"}, {"commit_id": "193986", "date": "2013-11-04T10:29:56.991962Z", "author": "d0k", "msg": "Make ADLResult::iterator a proper iterator.\n\nPR17796.", "modified": "M | /cfe/trunk/include/clang/Sema/Lookup.h\n"}, {"commit_id": "194055", "date": "2013-11-05T09:12:18.755134Z", "author": "rsmith", "msg": "C++1y sized deallocation: if we have a use, but not a definition, of a sized\ndeallocation function (and the corresponding unsized deallocation function has\nbeen declared), emit a weak discardable definition of the function that\nforwards to the corresponding unsized deallocation.\n\nThis allows a C++ standard library implementation to provide both a sized and\nan unsized deallocation function, where the unsized one does not just call the\nsized one, for instance by putting both in the same object file within an\narchive.\n", "modified": "M | /cfe/trunk/include/clang/AST/Decl.h\nM | /cfe/trunk/lib/AST/Decl.cpp\nM | /cfe/trunk/lib/CodeGen/CGClass.cpp\nM | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/Frontend/CompilerInvocation.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx1y-sized-deallocation.cpp\nM | /cfe/trunk/www/cxx_status.html\n"}, {"commit_id": "194188", "date": "2013-11-07T05:17:06.414427Z", "author": "faisalv", "msg": "This patch implements capturing of variables within generic lambdas.\n\nBoth Richard and I felt that the current wording in the working paper needed some tweaking - Please see http://llvm-reviews.chandlerc.com/D2035 for additional context and references to core-reflector messages that discuss wording tweaks.\n\nWhat is implemented is what we had intended to specify in Bristol; but, recently felt that the specification might benefit from some tweaking and fleshing.  \n\nAs a rough attempt to explain the semantics: If a nested lambda with a default-capture names a variable within its body, and if the enclosing full expression that contains the name of that variable is instantiation-dependent - then an enclosing lambda that is capture-ready (i.e. within a non-dependent context) must capture that variable, if all intervening nested lambdas can potentially capture that variable if they need to, and all intervening parent lambdas of the capture-ready lambda can and do capture the variable.      \n\nOf note, 'this' capturing is also currently underspecified in the working paper for generic lambdas.  What is implemented here is if the set of candidate functions in a nested generic lambda includes both static and non-static member functions (regardless of viability checking - i.e. num and type of parameters/arguments) - and if all intervening nested-inner lambdas between the capture-ready lambda and the function-call containing nested lambda can capture 'this' and if all enclosing lambdas of the capture-ready lambda can capture 'this', then 'this' is speculatively captured by that capture-ready lambda.\n\nHopefully a paper for the C++ committee (that Richard and I had started some preliminary work on) is forthcoming. \n\nThis essentially makes generic lambdas feature complete, except for known bugs. The more prominent ones (and the ones I am currently aware of) being:\n  - generic lambdas and init-captures are broken - but a patch that fixes this is already in the works ...\n  - nested variadic expansions such as:\n    auto K = [](auto ... OuterArgs) {\n      vp([=](auto ... Is) {\n          decltype(OuterArgs) OA = OuterArgs;\n          return 0;\n        }(5)...);\n      return 0;\n    };\n    auto M = K('a', ' ', 1, \" -- \", 3.14); \n   currently cause crashes.  I think I know how to fix this (since I had done so in my initial implementation) - but it will probably take some work and back & forth with Doug and Richard.\n\nA warm thanks to all who provided feedback - and especially to Doug Gregor and Richard Smith for their pivotal guidance: their insight and prestidigitation in such matters is boundless!\n\nNow let's hope this commit doesn't upset the buildbot gods ;)\n\nThanks!", "modified": "M | /cfe/trunk/include/clang/AST/ASTLambda.h\nM | /cfe/trunk/include/clang/Sema/ScopeInfo.h\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/include/clang/Sema/SemaInternal.h\nA | /cfe/trunk/include/clang/Sema/SemaLambda.h\nM | /cfe/trunk/lib/Sema/ScopeInfo.cpp\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaExprMember.cpp\nM | /cfe/trunk/lib/Sema/SemaLambda.cpp\nM | /cfe/trunk/test/CXX/expr/expr.prim/expr.prim.lambda/generic-lambda-unimplemented-1y.cpp\nM | /cfe/trunk/test/CXX/expr/expr.prim/expr.prim.lambda/p2-generic-lambda-1y.cpp\nM | /cfe/trunk/test/CXX/expr/expr.prim/expr.prim.lambda/p5-generic-lambda-1y.cpp\nA | /cfe/trunk/test/SemaCXX/cxx1y-generic-lambdas-capturing.cpp\nM | /cfe/trunk/test/SemaCXX/cxx1y-generic-lambdas.cpp\n"}, {"commit_id": "194220", "date": "2013-11-07T22:15:53.922782Z", "author": "majnemer", "msg": "IR: Do not canonicalize constant GEPs into an out-of-bounds array access\n\nSummary:\nConsider a GEP of:\ni8* getelementptr ({ [2 x i8], i32, i8, [3 x i8] }* @main.c, i32 0, i32 0, i64 0)\n\nIf we proceeded to GEP the aforementioned object by 8, would form a GEP of:\ni8* getelementptr ({ [2 x i8], i32, i8, [3 x i8] }* @main.c, i32 0, i32 0, i64 8)\n\nNote that we would go through the first array member, causing an\nout-of-bounds accesses.  This is problematic because we might get fooled\nif we are trying to evaluate loads using this GEP, for example, based\noff of an object with a constant initializer where the array is zero.\n\nThis fixes PR17732.\n\nReviewers: nicholas, chandlerc, void\n\nReviewed By: void\n\nCC: llvm-commits, echristo, void, aemerson\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D2093", "modified": "M | /llvm/trunk/lib/IR/ConstantFold.cpp\nA | /llvm/trunk/test/Transforms/GVN/pr17732.ll\n"}, {"commit_id": "194448", "date": "2013-11-12T03:48:27.575780Z", "author": "faisalv", "msg": "A quick fix to PR17877 that was introduced by r194188 (generic-lambda-capturing) that broke libc++.\n\nSee http://lists.cs.uiuc.edu/pipermail/cfe-dev/2013-November/033369.html for discussion on cfe-dev.\n\nThis fix explicitly checks whether we are within the declcontext of a lambda's call operator - which is what I had intended to be true (and assumed would be true if getCurLambda returns a valid pointer) before checking whether a lambda can capture the potential-captures of the innermost lambda.\n\nA deeper fix (that addresses why getCurLambda() returns a valid pointer when perhaps it shouldn't?) - as proposed by Richard Smith in http://llvm.org/bugs/show_bug.cgi?id=17877 - has been suggested as a FIXME.\n\nPatch was LGTM'd by Richard (just barely :)\n\nhttp://llvm-reviews.chandlerc.com/D2144", "modified": "M | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/test/SemaCXX/cxx1y-generic-lambdas.cpp\n"}, {"commit_id": "194764", "date": "2013-11-15T02:11:19.453760Z", "author": "jrose", "msg": "[analyzer] Silence warnings coming from allocators used by std::basic_string.\n\nThis is similar to r194004: because we can't reason about the data structure\ninvariants of std::basic_string, the analyzer decides it's possible for an\nallocator to be used to deallocate the string's inline storage. Just ignore\nthis by walking up the stack, skipping past methods in classes with\n\"allocator\" in the name, and seeing if we reach std::basic_string that way.\n\nPR17866", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp\nM | /cfe/trunk/test/Analysis/Inputs/system-header-simulator-cxx.h\nM | /cfe/trunk/test/Analysis/inlining/stl.cpp\n"}, {"commit_id": "194838", "date": "2013-11-15T18:34:43.169970Z", "author": "bogner", "msg": "Add the CMakeLists.txt that was missed in r194825", "modified": "A | /libcxx/trunk/include/CMakeLists.txt\n"}, {"commit_id": "195371", "date": "2013-11-21T19:03:34.930028Z", "author": "gclayton", "msg": "Exit if launch doesn't succeed.\n\n", "modified": "M | /lldb/trunk/tools/lldb-gdbserver/lldb-gdbserver.cpp\n"}, {"commit_id": "195556", "date": "2013-11-23T18:41:35.065728Z", "author": "akirtzidis", "msg": "[CodeGen] If there is a function definition with duplicate mangled name, emit an error instead of asserting.\n\nrdar://15522601 & http://llvm.org/PR18031", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\n"}, {"commit_id": "195887", "date": "2013-11-27T22:57:44.388656Z", "author": "majnemer", "msg": "Sema: Instantiation of variable definitions weren't local enough\n\nWe wouldn't properly save and restore the pending local instantiations\nwe had built up prior to instantiation of a variable definition.  This\nwould lead to us instantiating too much causing crashes and other\ngeneral badness.\n\nThis fixes PR14374.\n", "modified": "M | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/test/SemaTemplate/instantiate-local-class.cpp\n"}, {"commit_id": "196044", "date": "2013-12-01T11:47:42.333580Z", "author": "d0k", "msg": "Revamp error checking in the ms inline asm parser.\n\n- Actually abort when an error occurred.\n- Check that the frontend lookup worked when parsing length/size/type operators.\n\nTested by a clang test. PR18096.", "modified": "M | /llvm/trunk/lib/Target/X86/AsmParser/X86AsmParser.cpp\n"}, {"commit_id": "196045", "date": "2013-12-01T11:48:10.776759Z", "author": "d0k", "msg": "Reenable ms inline asm test.\n\nLLVM r196044 should make it pass.", "modified": "M | /cfe/trunk/test/Sema/ms-inline-asm.c\n"}, {"commit_id": "196129", "date": "2013-12-02T18:43:59.947572Z", "author": "kkhoo", "msg": "Conservative fix for PR17827 - don't optimize a shift + and + compare sequence where the shift is logical unless the comparison is unsigned", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCompares.cpp\nA | /llvm/trunk/test/Transforms/InstCombine/pr17827.ll\n"}, {"commit_id": "196164", "date": "2013-12-02T22:23:32.629136Z", "author": "kkhoo", "msg": "Use local variable for repeated use rather than 'get' method. No functional change intended.", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCompares.cpp\n"}, {"commit_id": "196488", "date": "2013-12-05T08:30:59.297133Z", "author": "rsmith", "msg": "PR17983: Fix crasher bug in C++1y mode when performing a non-global array\ndelete on a class which has no array cookie and has no class-specific operator\nnew.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx1y-sized-deallocation.cpp\n"}, {"commit_id": "196585", "date": "2013-12-06T17:19:20.459292Z", "author": "atrick", "msg": "comment grammar", "modified": "M | /llvm/trunk/lib/CodeGen/MachineScheduler.cpp\n"}, {"commit_id": "196779", "date": "2013-12-09T13:21:43.168875Z", "author": "samsonov", "msg": "PR17977: don't assume EOWNERDEAD is always defined\n\nSummary: See details in http://llvm.org/bugs/show_bug.cgi?id=17977\n\nReviewers: dvyukov\n\nReviewed By: dvyukov\n\nCC: glider, llvm-commits\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D2340", "modified": "M | /compiler-rt/trunk/lib/sanitizer_common/sanitizer_platform_limits_posix.cc\n"}, {"commit_id": "197024", "date": "2013-12-11T09:35:10.226400Z", "author": "rengolin", "msg": "Turning IAS on by default on ARM/Thumb\n\nThis is an experimental feature, where -integrated-as will be\non by default on ARM/Thumb. We aim to detect the missing features\nso that the next release is stable.\n\nUpdating the ReleaseNotes, too.\n\nAlso moving the AArch64 into the same place.", "modified": "M | /cfe/trunk/docs/ReleaseNotes.rst\nM | /cfe/trunk/lib/Driver/ToolChains.cpp\nM | /cfe/trunk/lib/Driver/ToolChains.h\nM | /cfe/trunk/test/Driver/freebsd.c\n"}, {"commit_id": "197078", "date": "2013-12-11T21:55:00.210018Z", "author": "sylvestre", "msg": "Bug #18214 - Adds LLVMObjCARCOpts.a to Makefile linkage for liblldb.\nPatch by Todd Fiala\n\n", "modified": "M | /lldb/trunk/lib/Makefile\n"}, {"commit_id": "197178", "date": "2013-12-12T20:45:24.435549Z", "author": "hfinkel", "msg": "Fix a use-after-free error in GlobalOpt CleanupConstantGlobalUsers\n\nGlobalOpt's CleanupConstantGlobalUsers function uses a worklist array to manage\nconstant users to be visited. The pointers in this array need to be weak\nhandles because when we delete a constant array, we may also be holding a\npointer to one of its elements (or an element of one of its elements if we're\ndealing with an array of arrays) in the worklist.\n\nFixes PR17347.", "modified": "M | /llvm/trunk/lib/Transforms/IPO/GlobalOpt.cpp\nA | /llvm/trunk/test/Transforms/GlobalOpt/array-elem-refs.ll\n"}, {"commit_id": "197492", "date": "2013-12-17T12:07:33.836083Z", "author": "dyatkovskiy", "msg": "Fix for PR18045:\nhttp://llvm.org/bugs/show_bug.cgi?id=18045\n\nShort issue description:\nFor X86 machines with sse < sse4.1 we got failures for some\nparticular load/store vector sequences:\n\n$ clang-trunk -m32 -O2 test-case.c\nfatal error: error in backend: Cannot select: 0x4200920: v4i32,ch = load 0x41d6ab0, 0x4205850,\n      0x41dcb10<LD16[getelementptr inbounds ([4 x i32]* @e, i32 0, i32 0)](align=4)> [ORD=82]\n      [ID=58]\n  0x4205850: i32 = X86ISD::Wrapper 0x41d5490 [ORD=26] [ID=43]\n    0x41d5490: i32 = TargetGlobalAddress<[4 x i32]* @e> 0 [ORD=26] [ID=23]\n  0x41dcb10: i32 = undef [ID=2]\n\nThe reason is that EltsFromConsecutiveLoads could emit such load instruction\nboth before and after legalize stage. Though this instruction is not legal for\nmachines with SSSE3 and lower.\n\nThe fix: In EltsFromConsecutiveLoads, if we have passed legalize stage, we\ncheck whether nodes it emits are legal. \n\nP.S.: If you get failure in time from 12:00 and till 22:00 (UTC-8),\nperhaps I'll slow with response, so you better reject this commit. Thanks!\n\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nA | /llvm/trunk/test/CodeGen/X86/v4i32load-crash.ll\n"}, {"commit_id": "197623", "date": "2013-12-18T23:02:36.752266Z", "author": "dgregor", "msg": "Require the type of a by-copy capture to be complete before creating its field.\n\nThe problem here is more serious than the fix implies. Adding a field\nto a class updates the triviality bits for the class (among other\nthings). Failing to require a complete type before adding the field\nmeant that these updates don't happen in the well-formed case where\nthe capture is an uninstantiated class template specialization,\nleading the lambda itself to be treated as having a trivial copy\nconstructor when it shouldn't. Fixes <rdar://problem/15560464>.\n\n", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/test/CXX/expr/expr.prim/expr.prim.lambda/p14.cpp\n"}, {"commit_id": "197657", "date": "2013-12-19T05:17:58.993256Z", "author": "compnerd", "msg": "ARM IAS: support .inst directive\n\nThis adds support for the .inst directive.  This is an ARM specific directive to\nindicate an instruction encoded as a constant expression.  The major difference\nbetween .word, .short, or .byte and .inst is that the latter will be\ndisassembled as an instruction since it does not get flagged as data.", "modified": "M | /llvm/trunk/include/llvm/MC/MCStreamer.h\nM | /llvm/trunk/lib/Target/ARM/AsmParser/ARMAsmParser.cpp\nM | /llvm/trunk/lib/Target/ARM/MCTargetDesc/ARMELFStreamer.cpp\nA | /llvm/trunk/test/MC/ARM/inst-arm-suffixes.s\nA | /llvm/trunk/test/MC/ARM/inst-constant-required.s\nA | /llvm/trunk/test/MC/ARM/inst-directive-emit.s\nA | /llvm/trunk/test/MC/ARM/inst-directive.s\nA | /llvm/trunk/test/MC/ARM/inst-overflow.s\nA | /llvm/trunk/test/MC/ARM/inst-thumb-overflow-2.s\nA | /llvm/trunk/test/MC/ARM/inst-thumb-overflow.s\nA | /llvm/trunk/test/MC/ARM/inst-thumb-suffixes.s\n"}, {"commit_id": "197705", "date": "2013-12-19T18:07:17.274588Z", "author": "kkhoo", "msg": "Improved fix for PR17827 (instcombine of shift/and/compare).\n\nThis change fixes the case of arithmetic shift right - do not attempt to fold that case.\nThis change also relaxes the conditions when attempting to fold the logical shift right and shift left cases.\n\nNo additional IR-level test cases included at this time. See http://llvm.org/bugs/show_bug.cgi?id=17827 for proofs that these are correct transformations.", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCompares.cpp\n"}, {"commit_id": "197713", "date": "2013-12-19T18:35:54.985575Z", "author": "kkhoo", "msg": "Stay classy (and legal) LLVM. Remove links to 3rd party SMT solver whose links may not be permanent.", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCompares.cpp\n"}, {"commit_id": "197787", "date": "2013-12-20T07:21:16.078315Z", "author": "compnerd", "msg": "ARM IAS: add support for the .pool directive\n\nThe .pool directive is an alias for the .ltorg directive used to create a\nliteral pool.  Simply treat .pool as if .ltorg was passed.", "modified": "M | /llvm/trunk/lib/Target/ARM/AsmParser/ARMAsmParser.cpp\nA | /llvm/trunk/test/MC/ARM/pool.s\n"}, {"commit_id": "198097", "date": "2013-12-28T05:54:33.391441Z", "author": "compnerd", "msg": "IAS: support .rep as an alias for .rept\n\nThe GNU assembler supports .rep as an alias for .rept.  This simply creates the\nalias for it and introduces a test for both .rept and .rep.", "modified": "M | /llvm/trunk/lib/MC/MCParser/AsmParser.cpp\nA | /llvm/trunk/test/MC/AsmParser/directive_rept.s\n"}, {"commit_id": "198172", "date": "2013-12-29T17:58:35.762348Z", "author": "compnerd", "msg": "ARM: provide VFP aliases for pre-V6 mnemonics\n\nIn order to provide compatibility with the GNU assembler, provide aliases for\npre-UAL mnemonics for floating point operations.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMInstrVFP.td\nM | /llvm/trunk/lib/Target/ARM/AsmParser/ARMAsmParser.cpp\nA | /llvm/trunk/test/MC/ARM/vfp-aliases-diagnostics.s\nA | /llvm/trunk/test/MC/ARM/vfp-aliases.s\n"}, {"commit_id": "198566", "date": "2014-01-05T19:40:56.585305Z", "author": "ctopper", "msg": "Fix ModR/M byte output for 16-bit addressing modes (PR18220)\n\nAdd some tests to validate correct register selection, including a fix\nto an existing test which was requiring the *wrong* output.\n\nPatch from David Woodhouse.\n\n", "modified": "M | /llvm/trunk/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp\nM | /llvm/trunk/test/MC/X86/address-size.s\n"}, {"commit_id": "198662", "date": "2014-01-07T02:28:42.543459Z", "author": "compnerd", "msg": "ARM IAS: improve .eabi_attribute handling\n\nParse tag names as well as expressions.  The former is part of the\nspecification, the latter is for improved compatibility with the GNU assembler.\nFix attribute value handling to be comformant to the specification.", "modified": "M | /llvm/trunk/include/llvm/MC/MCStreamer.h\nM | /llvm/trunk/lib/Target/ARM/ARMAsmPrinter.cpp\nD | /llvm/trunk/lib/Target/ARM/ARMBuildAttrs.h\nM | /llvm/trunk/lib/Target/ARM/AsmParser/ARMAsmParser.cpp\nA | /llvm/trunk/lib/Target/ARM/MCTargetDesc/ARMBuildAttrs.cpp\nA | /llvm/trunk/lib/Target/ARM/MCTargetDesc/ARMBuildAttrs.h\nM | /llvm/trunk/lib/Target/ARM/MCTargetDesc/ARMELFStreamer.cpp\nM | /llvm/trunk/lib/Target/ARM/MCTargetDesc/CMakeLists.txt\nM | /llvm/trunk/test/CodeGen/ARM/build-attributes-encoding.s\nA | /llvm/trunk/test/MC/ARM/directive-eabi_attribute-2.s\nA | /llvm/trunk/test/MC/ARM/directive-eabi_attribute-diagnostics.s\n"}, {"commit_id": "198735", "date": "2014-01-08T03:28:14.269794Z", "author": "compnerd", "msg": "ARM IAS: properly handle expression operands\n\nOperands which involved label arithemetic would previously fail to parse.  This\ncorrects that by adding the additional case for the shift operand validation.", "modified": "M | /llvm/trunk/lib/Target/ARM/AsmParser/ARMAsmParser.cpp\nM | /llvm/trunk/lib/Target/ARM/InstPrinter/ARMInstPrinter.cpp\nA | /llvm/trunk/test/MC/ARM/complex-operands.s\n"}, {"commit_id": "199549", "date": "2014-01-18T14:22:28.060329Z", "author": "emaste", "msg": "Handle LLDB_LIB_DIR on FreeBSD as on Linux\n\nDiagnosed and tested by Mike Ma.\nhttp://llvm.org/pr18191\n", "modified": "M | /lldb/trunk/test/dotest.py\n"}, {"commit_id": "200314", "date": "2014-01-28T12:58:58.985992Z", "author": "grosser", "msg": "Check if array base addresses are invariant\n\nArray base addresses need to be invariant in the region considered. The base\naddress has to be computed outside the region, or, when it is computed inside,\nthe value must not change with the iterations of the loops. For example, when a\ntwo-dimensional array is represented as a pointer to pointers the base address\nA[i] in an access A[i][j] changes with i; therefore, such regions have to be\nrejected.\n\nContributed by:  Armin Gr\u679a\u813dlinger <armin.groesslinger@uni-passau.de>", "modified": "M | /polly/trunk/include/polly/ScopDetection.h\nM | /polly/trunk/lib/Analysis/ScopDetection.cpp\nM | /polly/trunk/test/ScopDetect/base_pointer.ll\n"}, {"commit_id": "200315", "date": "2014-01-28T13:43:24.745661Z", "author": "grosser", "msg": "Do not verify the base addresses\n\nVerification of base addresses is difficult as the independent blocks pass may\nintroduce aliasing that was not there during scop detection. As a midterm\nsolution -polly-codegen-scev will remove the need for the independent blocks\npass. For now, we do not verify at compile time that the independent blocks pass\ndoes not make the base addresses loop invariant. Disabling this just removes\none of the multiple safety layers we have. We still can check for correctness\nin our regression tests.", "modified": "M | /polly/trunk/lib/Analysis/ScopDetection.cpp\n"}, {"commit_id": "200427", "date": "2014-01-29T23:08:10.093094Z", "author": "grosser", "msg": "IndependentBlocks: Do not assert for PHI nodes outside of scops\n\nThere does not seem to be a reason that we can not support PHI nodes outside of\nthe scop that reference values within the SCoP. Or at least, the attached test\ncase seems to do the right thing. We remove the assert for now.", "modified": "M | /polly/trunk/lib/IndependentBlocks.cpp\nA | /polly/trunk/test/IndependentBlocks/phi_outside_scop.ll\n"}, {"commit_id": "200612", "date": "2014-02-01T13:35:14.635983Z", "author": "chandlerc", "msg": "[LPM] Apply a really big hammer to fix PR18688 by recursively reforming\nLCSSA when we promote to SSA registers inside of LICM.\n\nCurrently, this is actually necessary. The promotion logic in LICM uses\nSSAUpdater which doesn't understand how to place LCSSA PHI nodes.\nTeaching it to do so would be a very significant undertaking. It may be\nworthwhile and I've left a FIXME about this in the code as well as\nstarting a thread on llvmdev to try to figure out the right long-term\nsolution.\n\nFor now, the PR needs to be fixed. Short of using the promition\nSSAUpdater to place both the LCSSA PHI nodes and the promoted PHI nodes,\nI don't see a cleaner or cheaper way of achieving this. Fortunately,\nLCSSA is relatively lazy and sparse -- it should only update\ninstructions which need it. We can also skip the recursive variant when\nwe don't promote to SSA values.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LICM.cpp\nA | /llvm/trunk/test/Transforms/LICM/lcssa-ssa-promoter.ll\n"}, {"commit_id": "201474", "date": "2014-02-16T04:56:31.789808Z", "author": "compnerd", "msg": "MCAsmParser: relax declaration parsing\n\nThe Linux kernel defines empty macros for compatibility with ARM UAL syntax.\nThe comma after the name is optional, and if present can be safely lexed.  This\nimproves compatibility with the GNU assembler.", "modified": "M | /llvm/trunk/lib/MC/MCParser/AsmParser.cpp\nA | /llvm/trunk/test/MC/AsmParser/macros-argument-parsing.s\n"}, {"commit_id": "201499", "date": "2014-02-17T00:40:17.905984Z", "author": "compnerd", "msg": "MCAsmParser: better handling for named arguments\n\nUntil this point only macro definition with named parameters were parsed but the\nnames were ignored.  This adds support for using that information for named\nparameter instantiation.\n\nIn order to support the full semantics of the keyword arguments, the arguments\nare no longer lazily initialised since the keyword arguments can be specified\nout of order and partially if they are defaulted.  Prepopulate the arguments\nwith the default value for any defaulted parameters, and then parse the\nspecified arguments.\n\nThis simplies some of the handling of the arguments in the inner loop since\nempty arguments simply increment the parameter index and move on.\n\nNote that keyword and positional arguments cannot be mixed.", "modified": "M | /llvm/trunk/lib/MC/MCParser/AsmParser.cpp\nM | /llvm/trunk/test/MC/AsmParser/macro-err1.s\nA | /llvm/trunk/test/MC/AsmParser/macros-argument-parsing-diagnostics.s\nM | /llvm/trunk/test/MC/AsmParser/macros-argument-parsing.s\n"}, {"commit_id": "201608", "date": "2014-02-18T22:24:57.100795Z", "author": "rafael", "msg": "Fix PR18743.\n\nThe IR\n@foo = private constant i32 42\n\nis valid, but before this patch we would produce an invalid MachO from it. It\nwas invalid because it would use an L label in a section where the liker needs\nthe labels in order to atomize it.\n\nOne way of fixing it would be to just reject this IR in the backend, but that\nwould not be very front end friendly.\n\nWhat this patch does is use an 'l' prefix in sections that we know the linker\nrequires symbols for atomizing them. This allows frontends to just use\nprivate and not worry about which sections they go to or how the linker handles\nthem.\n\nOne small issue with this strategy is that now a symbol name depends on the\nsection, which is not available before codegen. This is not a problem in\npractice. The reason is that it only happens with private linkage, which will\nbe ignored by the non codegen users (llvm-nm and llvm-ar).", "modified": "M | /llvm/trunk/include/llvm/CodeGen/AsmPrinter.h\nM | /llvm/trunk/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h\nM | /llvm/trunk/include/llvm/IR/Mangler.h\nM | /llvm/trunk/include/llvm/Target/TargetLowering.h\nM | /llvm/trunk/include/llvm/Target/TargetLoweringObjectFile.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/AsmPrinter.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/AsmPrinterDwarf.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCFIException.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/Win64Exception.cpp\nM | /llvm/trunk/lib/CodeGen/TargetLoweringBase.cpp\nM | /llvm/trunk/lib/CodeGen/TargetLoweringObjectFileImpl.cpp\nM | /llvm/trunk/lib/ExecutionEngine/MCJIT/MCJIT.cpp\nM | /llvm/trunk/lib/IR/Mangler.cpp\nM | /llvm/trunk/lib/LTO/LTOCodeGenerator.cpp\nM | /llvm/trunk/lib/LTO/LTOModule.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMTargetObjectFile.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMTargetObjectFile.h\nM | /llvm/trunk/lib/Target/PowerPC/PPCMCInstLower.cpp\nM | /llvm/trunk/lib/Target/Sparc/SparcTargetObjectFile.cpp\nM | /llvm/trunk/lib/Target/Sparc/SparcTargetObjectFile.h\nM | /llvm/trunk/lib/Target/TargetLoweringObjectFile.cpp\nM | /llvm/trunk/lib/Target/X86/X86MCInstLower.cpp\nM | /llvm/trunk/lib/Target/X86/X86TargetObjectFile.cpp\nM | /llvm/trunk/lib/Target/X86/X86TargetObjectFile.h\nM | /llvm/trunk/lib/Target/XCore/XCoreTargetObjectFile.cpp\nM | /llvm/trunk/test/CodeGen/PowerPC/private.ll\nM | /llvm/trunk/test/CodeGen/X86/2009-11-16-UnfoldMemOpBug.ll\nA | /llvm/trunk/test/CodeGen/X86/osx-private-labels.ll\nM | /llvm/trunk/test/CodeGen/X86/pr10420.ll\nM | /llvm/trunk/test/CodeGen/X86/private-2.ll\n"}, {"commit_id": "201711", "date": "2014-02-19T20:30:41.316918Z", "author": "rafael", "msg": "move getNameWithPrefix and getSymbol to TargetMachine.\n\nTargetLoweringBase is implemented in CodeGen, so before this patch we had\na dependency fom Target to CodeGen. This would show up as a link failure of\nllvm-stress when building with -DBUILD_SHARED_LIBS=ON.\n\nThis fixes pr18900.", "modified": "M | /llvm/trunk/include/llvm/Target/TargetLowering.h\nM | /llvm/trunk/include/llvm/Target/TargetMachine.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/AsmPrinter.cpp\nM | /llvm/trunk/lib/CodeGen/TargetLoweringBase.cpp\nM | /llvm/trunk/lib/CodeGen/TargetLoweringObjectFileImpl.cpp\nM | /llvm/trunk/lib/ExecutionEngine/MCJIT/MCJIT.cpp\nM | /llvm/trunk/lib/LTO/LTOCodeGenerator.cpp\nM | /llvm/trunk/lib/LTO/LTOModule.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMTargetObjectFile.cpp\nM | /llvm/trunk/lib/Target/PowerPC/PPCMCInstLower.cpp\nM | /llvm/trunk/lib/Target/Sparc/SparcTargetObjectFile.cpp\nM | /llvm/trunk/lib/Target/TargetLoweringObjectFile.cpp\nM | /llvm/trunk/lib/Target/TargetMachine.cpp\nM | /llvm/trunk/lib/Target/X86/X86TargetObjectFile.cpp\n"}, {"commit_id": "201907", "date": "2014-02-21T23:49:50.114594Z", "author": "whunt", "msg": "Complete Rewrite of CGRecordLayoutBuilder\n\nCGRecordLayoutBuilder was aging, complex, multi-pass, and shows signs of \nexisting before ASTRecordLayoutBuilder.  It redundantly performed many \nlayout operations that are now performed by ASTRecordLayoutBuilder and \nasserted that the results were the same.  With the addition of support \nfor the MS-ABI, such as placement of vbptrs, vtordisps, different \nbitfield layout and a variety of other features, CGRecordLayoutBuilder \nwas growing unwieldy in its redundancy.\n\nThis patch re-architects CGRecordLayoutBuilder to not perform any \nredundant layout but rather, as directly as possible, lower an \nASTRecordLayout to an llvm::type.  The new architecture is significantly \nsmaller and simpler than the CGRecordLayoutBuilder and contains fewer \nABI-specific code paths.  It's also one pass.\n\nThe architecture of the new system is described in the comments. For the \nmost part, the new system simply takes all of the fields and bases from \nan ASTRecordLayout, sorts them, inserts padding and dumps a record. \nBitfields, unions and primary virtual bases make this process a bit more \ncomplicated.  See the inline comments.\n\nIn addition, this patch updates a few lit tests due to the fact that the \nnew system computes more accurate llvm types than CGRecordLayoutBuilder. \nEach change is commented individually in the review.\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D2795\n\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGRecordLayoutBuilder.cpp\nM | /cfe/trunk/test/CodeGen/PR4611-bitfield-layout.c\nM | /cfe/trunk/test/CodeGen/bitfield-2.c\nM | /cfe/trunk/test/CodeGen/packed-nest-unpacked.c\nM | /cfe/trunk/test/CodeGen/packed-union.c\nM | /cfe/trunk/test/CodeGen/pragma-pack-1.c\nM | /cfe/trunk/test/CodeGen/pragma-pack-2.c\nM | /cfe/trunk/test/CodeGen/struct-x86-darwin.c\nM | /cfe/trunk/test/CodeGen/volatile.c\nM | /cfe/trunk/test/CodeGenCXX/bitfield-layout.cpp\nM | /cfe/trunk/test/CodeGenCXX/class-layout.cpp\nM | /cfe/trunk/test/CodeGenCXX/copy-constructor-synthesis.cpp\nM | /cfe/trunk/test/CodeGenCXX/pragma-pack-3.cpp\nM | /cfe/trunk/test/CodeGenCXX/vtable-layout-abi-examples.cpp\nM | /cfe/trunk/test/Sema/ms_class_layout.cpp\n"}, {"commit_id": "202129", "date": "2014-02-25T09:45:27.568162Z", "author": "chandlerc", "msg": "[SROA] Fix a *glaring* bug in r202091: you have to actually *write*\nthe break statement, not just think it to yourself....\n\nNo idea how this worked at all, much less survived most bots, my\nbootstrap, and some bot bootstraps!\n\nThe Polly one didn't survive, and this was filed as PR18959. I don't\nhave a reduced test case and honestly I'm not seeing the need. What we\nprobably need here are better asserts / debug-build behavior in\nSmallPtrSet so that this madness doesn't make it so far.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SROA.cpp\n"}, {"commit_id": "202188", "date": "2014-02-25T19:57:42.906866Z", "author": "adrian", "msg": "Debug info: Support variadic functions.\nVariadic functions have an unspecified parameter tag after the last\nargument. In IR this is represented as an unspecified parameter in the\nsubroutine type.\n\nPaired commit with CFE r202185.\n\nrdar://problem/13690847\n\nThis re-applies r202184 + a bugfix in DwarfDebug's argument handling.", "modified": "M | /llvm/trunk/include/llvm/DIBuilder.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.h\nA | /llvm/trunk/test/DebugInfo/X86/varargs.ll\n"}, {"commit_id": "202224", "date": "2014-02-26T03:14:14.778682Z", "author": "chandlerc", "msg": "[SROA] Fix PR18615 with some long overdue simplifications to the bounds\nchecking in SROA.\n\nThe primary change is to just rely on uge for checking that the offset\nis within the allocation size. This removes the explicit checks against\nisNegative which were terribly error prone (including the reversed logic\nthat led to PR18615) and prevented us from supporting stack allocations\nlarger than half the address space.... Ok, so maybe the latter isn't\n*common* but it's a silly restriction to have.\n\nAlso, we used to try to support a PHI node which loaded from before the\nstart of the allocation if any of the loaded bytes were within the\nallocation. This doesn't make any sense, we have never really supported\nloading or storing *before* the allocation starts. The simplified logic\njust doesn't care.\n\nWe continue to allow loading past the end of the allocation in part to\nsupport cases where there is a PHI and some loads are larger than others\nand the larger ones reach past the end of the allocation. We could solve\nthis a different and more conservative way, but I'm still somewhat\nparanoid about this.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SROA.cpp\nM | /llvm/trunk/test/Transforms/SROA/basictest.ll\n"}, {"commit_id": "202901", "date": "2014-03-04T22:07:09.816067Z", "author": "majnemer", "msg": "TokenKinds: _Atomic isn't a keyword in MS mode\n\nSummary:\nThis is needed to allow MSVC's <atomic> header to properly parse.\nIt uses _Atomic as a class-id.\n\nReviewers: rnk\n\nReviewed By: rnk\n\nCC: cfe-commits\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D2948\n", "modified": "M | /cfe/trunk/include/clang/Basic/TokenKinds.def\nM | /cfe/trunk/test/SemaCXX/MicrosoftCompatibility.cpp\n"}, {"commit_id": "203486", "date": "2014-03-10T20:47:39.191179Z", "author": "spop", "msg": "fix PR13550: add a cmake WITH_POLLY option", "modified": "M | /llvm/trunk/CMakeLists.txt\nM | /llvm/trunk/tools/CMakeLists.txt\n"}, {"commit_id": "204167", "date": "2014-03-18T18:50:58.144070Z", "author": "grosser", "msg": "autoconf: Add PLUTO_FOUND flag\n\nThis fixes llvm.org/PR12250.\n\nContributed-by: Sam Novak <snovak@uwsp.edu>", "modified": "M | /polly/trunk/Makefile.config.in\n"}, {"commit_id": "205217", "date": "2014-03-31T16:12:47.439320Z", "author": "majnemer", "msg": "MS ABI: Use the proper type for inalloca args\n\nSummary:\nThe definition of a type later in a translation unit may change it's\ntype from {}* to (%struct.foo*)*.  Earlier function definitions may use\nthe former while more recent definitions might use the later.  This is\nfine until they interact with one another (like one calling the other).\nIn these cases, a bitcast is needed because the inalloca must match the\nfunction call but the store to the lvalue which initializes the argument\nslot has to match the rvalue's type.\n\nThis technique is along the same lines with what the other,\nnon-inalloca, codepaths perform.\n\nThis fixes PR19287.\n\nReviewers: rnk\n\nCC: cfe-commits\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D3224", "modified": "M | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/test/CodeGenCXX/microsoft-abi-sret-and-byval.cpp\n"}, {"commit_id": "205378", "date": "2014-04-02T00:16:53.163751Z", "author": "rnk", "msg": "Fix type mismatch assertion related to inalloca and PR19287\n\nAugment the test case from r205217 to catch this related bug.\n\nFixes the Windows self-host which was failing on VariantValue.cpp.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/test/CodeGenCXX/microsoft-abi-sret-and-byval.cpp\n"}, {"commit_id": "205710", "date": "2014-04-07T13:36:21.351975Z", "author": "echristo", "msg": "Handle vlas during inline cost computation if they'll be turned\ninto a constant size alloca by inlining.\n\nRan a run over the testsuite, no results out of the noise, fixes\nthe testcase in the PR.\n\nPR19115.", "modified": "M | /llvm/trunk/lib/Analysis/IPA/InlineCost.cpp\nA | /llvm/trunk/test/Transforms/Inline/inline-vla.ll\n"}, {"commit_id": "206205", "date": "2014-04-14T21:00:40.808403Z", "author": "rsmith", "msg": "PR19415: Converting 'constexpr' to 'const' in a non-static data member can fail\nif the member is already 'const'. Don't assert in that case.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/test/FixIt/fixit-cxx0x.cpp\n"}, {"commit_id": "206774", "date": "2014-04-21T19:34:27.361735Z", "author": "yjiang", "msg": "ARM64: Combine shifts and uses from different basic block to bit-extract instruction", "modified": "M | /llvm/trunk/include/llvm/Target/TargetLowering.h\nM | /llvm/trunk/lib/CodeGen/CodeGenPrepare.cpp\nM | /llvm/trunk/lib/Target/ARM64/ARM64ISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/ARM64/ARM64ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/ARM64/bitfield-extract.ll\n"}, {"commit_id": "206803", "date": "2014-04-21T22:22:44.319463Z", "author": "yjiang", "msg": "Set default value of HasExtractBitsInsn to false", "modified": "M | /llvm/trunk/lib/CodeGen/TargetLoweringBase.cpp\n"}, {"commit_id": "206834", "date": "2014-04-22T01:20:34.484190Z", "author": "qcolombet", "msg": "[CodeGenPrepare] Use APInt to check the value of the immediate in a and\nwhile checking candidate for bit field extract.\nOtherwise the value may not fit in uint64_t and this will trigger an\nassertion.\n\nThis fixes PR19503.\n", "modified": "M | /llvm/trunk/lib/CodeGen/CodeGenPrepare.cpp\nM | /llvm/trunk/test/CodeGen/ARM64/bitfield-extract.ll\n"}, {"commit_id": "207008", "date": "2014-04-23T18:22:11.267327Z", "author": "rnk", "msg": "MS ABI: Use a different guard variable for each weak global\n\nWe were using the same guard variable and failing to initialize the\nsecond global.\n\nClang is still not MS ABI compatible in this area.  Fixing that is\nPR16959, which will require LLVM changes to @llvm.global_ctors.", "modified": "M | /cfe/trunk/lib/CodeGen/MicrosoftCXXABI.cpp\nM | /cfe/trunk/test/CodeGenCXX/microsoft-abi-static-initializers.cpp\n"}, {"commit_id": "207385", "date": "2014-04-27T23:59:25.517328Z", "author": "chandlerc", "msg": "Teach the pass manager's execution dump to print the current time before\neach line. This is particularly nice for tracking which run of\na particular pass over a particular function was slow.\n\nThis also required making the TimeValue string much more useful. First,\nthere is a standard format for writing out a date and time. Let's use\nthat rather than strings that would have to be parsed. Second, actually\noutput the nanosecond resolution that timevalue claims to have.\n\nThis is proving useful working on PR19499, so I figured it would be\ngenerally useful to commit.", "modified": "M | /llvm/trunk/lib/IR/LegacyPassManager.cpp\nM | /llvm/trunk/lib/Support/Unix/TimeValue.inc\n"}, {"commit_id": "207403", "date": "2014-04-28T08:52:44.770833Z", "author": "chandlerc", "msg": "[inliner] Significantly improve the compile time in cases like PR19499\nby avoiding inlining massive switches merely because they have no\ninstructions in them. These switches still show up where we fail to form\nlookup tables, and in those cases they are actually going to cause\na very significant code size hit anyways, so inlining them is not the\nright call. The right way to fix any performance regressions stemming\nfrom this is to enhance the switch-to-lookup-table logic to fire in more\nplaces.\n\nThis makes PR19499 about 5x less bad. It uncovers a second compile time\nproblem in that test case that is unrelated (surprisingly!).", "modified": "M | /llvm/trunk/lib/Analysis/IPA/InlineCost.cpp\nA | /llvm/trunk/test/Transforms/Inline/switch.ll\n"}, {"commit_id": "207406", "date": "2014-04-28T09:34:03.979839Z", "author": "chandlerc", "msg": "Fix very poor compile-time in PR19499 due to excessive tree walks in\ndomtree. When finding a nearest common dominator, if neither A dominates\nB nor B dominates A, we immediately resorted to a tree walk. The tree\nwalk here is *particularly* expensive because we have to build\na (potentially very large) set for one side's dominators and compare it\nwith the other side's.\n\nIf at any point we have DFS info, we don't need to do any of this. We\ncan just walk up one side's immediate dominators and return the first\none which dominates the other side. Because of the DFS info, the\ndominates queries are trivially constant time.\n\nThis reduces the optimizers time in the test case on PR19499 by 70%. It\nnow optimizes in about 30 seconds for me. And there is still more to be\ndone for this case.", "modified": "M | /llvm/trunk/include/llvm/Support/GenericDomTree.h\n"}, {"commit_id": "207409", "date": "2014-04-28T10:37:30.635978Z", "author": "chandlerc", "msg": "Fix rampant quadratic behavior in UpdatePHINodes. The operation of\nmapping from a basic block to an incoming value, either for removal or\njust lookup, is linear in the number of predecessors, and we were doing\nthis for every entry in the 'Preds' list which is in many cases almost\nall of them!\n\nUnfortunately, the fixes are quite ugly. PHI nodes just don't make this\noperation easy. The efficient way to fix this is to have a clever\n'remove_if' operation on PHI nodes that lets us do a single pass over\nall the incoming values of the original PHI node, extracting the ones we\ncare about. Then we could quickly construct the new phi node from this\nlist. This would remove the remaining underlying quadratic movement of\nunrelated incoming values and the need for silly backwards looping to\n\"minimize\" how often we hit the quadratic case.\n\nThis is the last obvious fix for PR19499. It shaves another 20% off the\ncompile time for me, and while UpdatePHINodes remains in the profile,\nmost of the time is now stemming from the well known inefficiencies of\nLVI and jump threading.", "modified": "M | /llvm/trunk/lib/Transforms/Utils/BasicBlockUtils.cpp\n"}, {"commit_id": "207451", "date": "2014-04-28T22:17:59.005137Z", "author": "majnemer", "msg": "CodeGen: Fix linkage of reference temporaries\n\nSummary:\nA reference temporary should inherit the linkage of the variable it\ninitializes.  Otherwise, we may hit cases where a reference temporary\nwouldn't have the same value in all translation units.\n\nReviewers: rsmith\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D3515", "modified": "M | /cfe/trunk/include/clang/Basic/Linkage.h\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/lib/CodeGen/CGDeclCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.h\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/test/CXX/temp/temp.spec/temp.explicit/p1-emit.cpp\nM | /cfe/trunk/test/CodeGenCXX/const-init-cxx11.cpp\nM | /cfe/trunk/test/CodeGenCXX/const-init-cxx1y.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx11-thread-local.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx1y-variable-template.cpp\nM | /cfe/trunk/test/CodeGenCXX/specialized-static-data-mem-init.cpp\nM | /cfe/trunk/test/CodeGenCXX/static-init-3.cpp\nM | /cfe/trunk/test/CodeGenCXX/template-instantiation.cpp\nM | /cfe/trunk/test/CodeGenCXX/vla.cpp\n"}, {"commit_id": "207569", "date": "2014-04-29T18:25:28.536572Z", "author": "anemet", "msg": "Reapply r207271 without the testcase\n\nPR19608 was filed to find a suitable testcase.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopStrengthReduce.cpp\n"}, {"commit_id": "207672", "date": "2014-04-30T16:31:28.956145Z", "author": "rnk", "msg": "-Wunused-parameter: Don't fire on defaulted or deleted functions\n\nPatch by Dinesh Dwivedi!\n\nDifferential Revision: http://reviews.llvm.org/D3376", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nA | /cfe/trunk/test/SemaCXX/cxx11-unused.cpp\n"}, {"commit_id": "207887", "date": "2014-05-02T23:49:01.441080Z", "author": "anemet", "msg": "[LSR] Add llc testcase for r207271/r207569.\n\nSee PR19608 for the details but to summarize it was easy to modify the .ll\nfile to get the desired def-use ordering.", "modified": "A | /llvm/trunk/test/Transforms/LoopStrengthReduce/ARM64/req-regs.ll\n"}, {"commit_id": "208386", "date": "2014-05-09T01:00:48.301306Z", "author": "nico", "msg": "Wrap to 80 columns, no code change.", "modified": "M | /cfe/trunk/lib/Lex/TokenLexer.cpp\n"}, {"commit_id": "208404", "date": "2014-05-09T10:28:58.819452Z", "author": "djasper", "msg": "clang-format: [JS] Allow up to 3 empty lines in Google's JS style.", "modified": "M | /cfe/trunk/lib/Format/Format.cpp\n"}, {"commit_id": "208436", "date": "2014-05-09T17:08:01.320545Z", "author": "d0k", "msg": "ThreadSafetyAnalysis: Don't crash when trying to analyze objc methods.\n\nThe thread safety analysis isn't very useful in ObjC (you can't annotate\nObjC classes or methods) but we can still analyze the actual code and\nshow violations in usage of C/C++ functions.\n\nFixes PR19541, which does not use thread safety attributes but crashes\nwith -Weverything.", "modified": "M | /cfe/trunk/include/clang/Analysis/Analyses/ThreadSafetyCommon.h\nM | /cfe/trunk/lib/Analysis/ThreadSafetyCommon.cpp\nA | /cfe/trunk/test/SemaObjC/warn-thread-safety-analysis.m\n"}, {"commit_id": "208454", "date": "2014-05-09T22:33:11.381207Z", "author": "nico", "msg": "Don't leak the CXStoredDiagnostics returned by clang_codeCompleteGetDiagnostic()\n\nr144269 changed clang_disposeDiagnostic() to be a no-op, but didn't update\ncode completion diagnostics.  Let CXCodeCompleteResults store all diagnostics\nreturned by clang_codeCompleteGetDiagnostic() and then free them up in\nclang_disposeCodeCompleteResults().\n\nCode completion diagnostics referred to data stored in CXCodeCompleteResults\nbefore already, so it wasn't possible to refer to the results of\nclang_codeCompleteGetDiagnostic() after clang_disposeCodeCompleteResults()\nbefore this change already -- hence this should be a safe, backwards-compatible\nchange.\n\nLeak found by LSan, fixes PR19690.\n", "modified": "M | /cfe/trunk/tools/libclang/CIndexCodeCompletion.cpp\n"}, {"commit_id": "208477", "date": "2014-05-10T19:15:24.020143Z", "author": "nico", "msg": "Add test coverage for invalid conversion functions with default args.\n\nThis currently leaks memory (PR19689) but wasn't covered by tests, so LSan\ncouldn't find it.\n", "modified": "M | /cfe/trunk/test/SemaCXX/conversion-function.cpp\n"}, {"commit_id": "208481", "date": "2014-05-10T19:23:28.394030Z", "author": "nico", "msg": "Don't leak default arg tokens on invalid destructors or conversion functions.\n\nFixes PR19689, and possibly the last leak in clang (PR19521). PR19689 contains\na few suggestions on how to make the default argument token code a bit more\nsolid, these changes can possibly be landed in follow-ups.\n", "modified": "M | /cfe/trunk/include/clang/Sema/DeclSpec.h\n"}, {"commit_id": "209555", "date": "2014-05-23T21:13:45.651035Z", "author": "rnk", "msg": "Use comdats to avoid double initialization of weak data\n\nInitializers of global data that can appear multiple TUs (static data\nmembers of class templates or __declspec(selectany) data) are now in a\ncomdat group keyed on the global variable being initialized.  On\nnon-Windows platforms, this is a code size and startup time\noptimization.  On Windows, this is necessary for ABI compatibility with\nMSVC.\n\nFixes PR16959.\n\nReviewers: rsmith\n\nDifferential Revision: http://reviews.llvm.org/D3811", "modified": "M | /cfe/trunk/lib/CodeGen/CGDeclCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.h\nM | /cfe/trunk/lib/CodeGen/MicrosoftCXXABI.cpp\nM | /cfe/trunk/test/CodeGenCXX/apple-kext.cpp\nM | /cfe/trunk/test/CodeGenCXX/init-priority-attr.cpp\nM | /cfe/trunk/test/CodeGenCXX/microsoft-abi-static-initializers.cpp\nM | /cfe/trunk/test/CodeGenCXX/static-member-variable-explicit-specialization.cpp\n"}, {"commit_id": "210615", "date": "2014-06-11T00:31:00.699739Z", "author": "rsmith", "msg": "PR19996: don't crash if -Wuninitialized sees a c++1y lambda init-capture.\n", "modified": "M | /cfe/trunk/lib/Analysis/UninitializedValues.cpp\nM | /cfe/trunk/test/SemaCXX/uninit-variables.cpp\n"}, {"commit_id": "210632", "date": "2014-06-11T04:08:55.583811Z", "author": "majnemer", "msg": "CodeGen: Correct linkage of thread_local for OS X\n\nThe backing store of thread local variables is internal for OS X and all\naccesses must go through the thread wrapper.\n\nHowever, individual TUs may have inlined through the thread wrapper.\nTo fix this, give the thread wrapper functions WeakAnyLinkage.  This\nprevents them from getting inlined into call-sites.\n\nThis fixes PR19989.", "modified": "M | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/CodeGen/ItaniumCXXABI.cpp\nM | /cfe/trunk/test/CodeGenCXX/tls-init-funcs.cpp\n"}, {"commit_id": "211500", "date": "2014-06-23T15:13:23.918512Z", "author": "rafael", "msg": "Stop producing func.eh symbols on Darwin.\n\nAccording Nick Kledzik (http://llvm.org/bugs/show_bug.cgi?id=19430#c2):\n\"... mach-o no longer needs names in the __eh_frame section (and has not for\nyears).\"\n\nIain Sandoe confirms it is also unnecessary for their old darwin support.", "modified": "M | /llvm/trunk/include/llvm/MC/MCObjectFileInfo.h\nM | /llvm/trunk/lib/MC/MCDwarf.cpp\nM | /llvm/trunk/lib/MC/MCObjectFileInfo.cpp\nM | /llvm/trunk/test/MC/MachO/eh-frame-reloc.s\nD | /llvm/trunk/test/MC/MachO/eh-symbols.s\n"}, {"commit_id": "211583", "date": "2014-06-24T10:47:52.129034Z", "author": "d0k", "msg": "InstCombine: Disable umul.with.overflow recognition for vectors.\n\nIt doesn't make a lot on most targets and the code isn't ready for it. PR20113.", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCompares.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/overflow-mul.ll\n"}, {"commit_id": "211627", "date": "2014-06-24T20:05:18.273003Z", "author": "wschmidt", "msg": "[PPC64] Fix PR20071 (fctiduz generated for targets lacking that instruction)\n\nPR20071 identifies a problem in PowerPC's fast-isel implementation for\nfloating-point conversion to integer.  The fctiduz instruction was added in\nPower ISA 2.06 (i.e., Power7 and later).  However, this instruction is being\ngenerated regardless of which 64-bit PowerPC target is selected.\n\nThe intent is for fast-isel to punt to DAG selection when this instruction is\nnot available.  This patch implements that change.  For testing purposes, the\nexisting fast-isel-conversion.ll test adds a RUN line for -mcpu=970 and tests\nfor the expected code generation.  Additionally, the existing test\nfast-isel-conversion-p5.ll was found to be incorrectly expecting the\nunavailable instruction to be generated.  I've removed these test variants\nsince we have adequate coverage in fast-isel-conversion.ll.\n", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCFastISel.cpp\nM | /llvm/trunk/test/CodeGen/PowerPC/fast-isel-conversion-p5.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/fast-isel-conversion.ll\n"}, {"commit_id": "211718", "date": "2014-06-25T17:09:41.816396Z", "author": "sepavloff", "msg": "Fix treatment of types defined in function prototype\n\nTypes defined in function prototype are diagnosed earlier in C++ compilation.\nThey are put into declaration context where the prototype is introduced. Later on,\nwhen FunctionDecl object is created, these types are moved into the function context.\n\nThis patch fixes PR19018 and PR18963.\n\nDifferential Revision: http://reviews.llvm.org/D4145\n", "modified": "M | /cfe/trunk/lib/AST/Decl.cpp\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/test/Sema/decl-in-prototype.c\nM | /cfe/trunk/test/SemaCXX/type-definition-in-specifier.cpp\n"}, {"commit_id": "212160", "date": "2014-07-02T04:39:38.216774Z", "author": "rtrieu", "msg": "Prevent Clang from crashing on template code.\n\nFixes PR20110, where Clang hits an assertion failure when it expects that the\nsub-expression of a bit cast to pointer to also be a pointer, but gets a value\ninstead.\n\nDifferential Revision: http://reviews.llvm.org/D4280\n", "modified": "M | /cfe/trunk/lib/Sema/SemaChecking.cpp\nA | /cfe/trunk/test/SemaCXX/PR20110.cpp\n"}, {"commit_id": "212491", "date": "2014-07-07T21:28:37.439498Z", "author": "tfiala", "msg": "Mark test_watchpoint_multiple_threads_with_dwarf as XFAIL on Linux/clang.\n\nSee http://llvm.org/bugs/show_bug.cgi?id=20233 for details.\n", "modified": "M | /lldb/trunk/test/functionalities/watchpoint/multiple_threads/TestWatchpointMultipleThreads.py\n"}, {"commit_id": "212591", "date": "2014-07-09T07:50:33.931187Z", "author": "djasper", "msg": "clang-format: Revamp function declaration/definition indentation.\n\nKey changes:\n- Correctly (well ...) distinguish function declarations and variable\n  declarations with ()-initialization.\n- Don't indent when breaking function declarations/definitions after the\n  return type.\n- Indent variable declarations and typedefs when breaking after the\n  type.\n\nThis fixes llvm.org/PR17999.", "modified": "M | /cfe/trunk/include/clang/Format/Format.h\nM | /cfe/trunk/lib/Format/ContinuationIndenter.cpp\nM | /cfe/trunk/lib/Format/Format.cpp\nM | /cfe/trunk/lib/Format/FormatToken.h\nM | /cfe/trunk/lib/Format/TokenAnnotator.cpp\nM | /cfe/trunk/lib/Format/TokenAnnotator.h\nM | /cfe/trunk/unittests/Format/FormatTest.cpp\n"}, {"commit_id": "212841", "date": "2014-07-11T20:28:10.370318Z", "author": "majnemer", "msg": "CodeGen: Don't emit a thread-wrapper if we can't touch the backing variable\n\nOS X TLS has all accesses going through the thread-wrapper function and\ngives the backing thread-local variable internal linkage.  This means\nthat thread-wrappers must have WeakAnyLinkage so that references to the\ninternal thread-local variables do not get propagated to other code.\n\nIt also means that translation units which do not provide a definition\nfor the thread-local variable cannot attempt to emit a thread-wrapper\nbecause the thread wrapper will attempt to reference the backing\nvariable.\n\nDifferential Revision: http://reviews.llvm.org/D4109", "modified": "M | /cfe/trunk/lib/CodeGen/ItaniumCXXABI.cpp\nM | /cfe/trunk/test/CodeGenCXX/tls-init-funcs.cpp\n"}, {"commit_id": "213665", "date": "2014-07-22T15:47:09.837852Z", "author": "tnorthover", "msg": "X86: drop relocations on __eh_frame sections globally.\n\nWithout this, we produce non-extern relocations when targeting older OS X\nversions that ld64 can't cope with in the particular context of __eh_frame\nsections (who'd want generic relocation-processing anyway?).\n\nThis means that an updated linker (ld64 from Xcode 3.2.6 or later) may be\nneeded when targeting such platforms with a modern version of LLVM, but this is\nprobably the case anyway and a reasonable requirement.\n\nPR20212, rdar://problem/17544795", "modified": "M | /llvm/trunk/lib/Target/X86/MCTargetDesc/X86MCAsmInfo.cpp\nM | /llvm/trunk/test/MC/MachO/eh-frame-reloc.s\n"}, {"commit_id": "213898", "date": "2014-07-24T22:15:28.693836Z", "author": "chandlerc", "msg": "[SDAG] Introduce a combined set to the DAG combiner which tracks nodes\nwhich have successfully round-tripped through the combine phase, and use\nthis to ensure all operands to DAG nodes are visited by the combiner,\neven if they are only added during the combine phase.\n\nThis is critical to have the combiner reach nodes that are *introduced*\nduring combining. Previously these would sometimes be visited and\nsometimes not be visited based on whether they happened to end up on the\nworklist or not. Now we always run them through the combiner.\n\nThis fixes quite a few bad codegen test cases lurking in the suite while\nalso being more principled. Among these, the TLS codegeneration is\nparticularly exciting for programs that have this in the critical path\nlike TSan-instrumented binaries (although I think they engineer to use\na different TLS that is faster anyways).\n\nI've tried to check for compile-time regressions here by running llc\nover a merged (but not LTO-ed) clang bitcode file and observed at most\na 3% slowdown in llc. Given that this is essentially a worst case (none\nof opt or clang are running at this phase) I think this is tolerable.\nThe actual LTO case should be even less costly, and the cost in normal\ncompilation should be negligible.\n\nWith this combining logic, it is possible to re-legalize as we combine\nwhich is necessary to implement PSHUFB formation on x86 as\na post-legalize DAG combine (my ultimate goal).\n\nDifferential Revision: http://reviews.llvm.org/D4638", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nD | /llvm/trunk/test/CodeGen/AArch64/arm64-dagcombiner-indexed-load.ll\nM | /llvm/trunk/test/CodeGen/ARM/aapcs-hfa-code.ll\nM | /llvm/trunk/test/CodeGen/Mips/cmov.ll\nM | /llvm/trunk/test/CodeGen/R600/add_i64.ll\nM | /llvm/trunk/test/CodeGen/R600/or.ll\nM | /llvm/trunk/test/CodeGen/X86/2010-04-23-mmx-movdq2q.ll\nM | /llvm/trunk/test/CodeGen/X86/i8-umulo.ll\nM | /llvm/trunk/test/CodeGen/X86/jump_sign.ll\nM | /llvm/trunk/test/CodeGen/X86/lower-bitcast.ll\nM | /llvm/trunk/test/CodeGen/X86/pr15267.ll\nM | /llvm/trunk/test/CodeGen/X86/store-narrow.ll\nM | /llvm/trunk/test/CodeGen/X86/trunc-ext-ld-st.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-idiv.ll\nM | /llvm/trunk/test/CodeGen/X86/widen_cast-1.ll\nM | /llvm/trunk/test/CodeGen/X86/widen_conv-1.ll\nM | /llvm/trunk/test/CodeGen/X86/widen_load-2.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-64-tls-1.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-setcc-int-to-fp-combine.ll\n"}, {"commit_id": "215137", "date": "2014-08-07T19:43:01.810563Z", "author": "rnk", "msg": "Debug info: Use record layout to find vbase offsets instead of vtables\n\nThis fixes an assertion when generating full debug info in the MS ABI\nfor classes with virtual bases.\n\nFixes PR20579.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info.cpp\n"}, {"commit_id": "215149", "date": "2014-08-07T21:29:25.194468Z", "author": "rnk", "msg": "Debug info: Use the vbtable offset for virtual bases in the MS ABI\n\nThere are no vtable offset offsets in the MS ABI, but vbtable offsets\nare analogous.  There are no consumers of this information yet, but at\nleast we don't crash now.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info.cpp\n"}, {"commit_id": "215416", "date": "2014-08-12T00:22:39.675122Z", "author": "rsmith", "msg": "Reject virt-specifiers on friend declarations. Give anonymous bitfields a\nlocation so their diagnostics have somewhere to point.\n", "modified": "M | /cfe/trunk/include/clang/Parse/Parser.h\nM | /cfe/trunk/lib/Parse/ParseDecl.cpp\nM | /cfe/trunk/lib/Parse/ParseDeclCXX.cpp\nM | /cfe/trunk/test/Parser/cxx-class.cpp\n"}, {"commit_id": "215867", "date": "2014-08-17T23:38:08.437565Z", "author": "rafael", "msg": "Use copy initialization to initialize std::unique_ptr.\n\nThanks to David Blaikie for the suggestion.", "modified": "M | /llvm/trunk/lib/ExecutionEngine/MCJIT/MCJIT.cpp\nM | /llvm/trunk/lib/ExecutionEngine/RuntimeDyld/ObjectImageCommon.h\nM | /llvm/trunk/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp\n"}, {"commit_id": "216075", "date": "2014-08-20T16:51:18.433594Z", "author": "jrose", "msg": "[analyzer] IdenticalExpr: use getBytes rather than getString to compare string literals.\n\nPR20693. Patch by Anders R\u679annholm.", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Checkers/IdenticalExprChecker.cpp\nM | /cfe/trunk/test/Analysis/identical-expressions.cpp\n"}, {"commit_id": "216182", "date": "2014-08-21T14:35:47.964023Z", "author": "jroelofs", "msg": "Add a thread-model knob for lowering atomics on baremetal & single threaded systems\n\nhttp://reviews.llvm.org/D4984\n", "modified": "M | /llvm/trunk/include/llvm/CodeGen/CommandFlags.h\nM | /llvm/trunk/include/llvm/Target/TargetOptions.h\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMTargetMachine.cpp\nM | /llvm/trunk/test/CodeGen/ARM/atomic-op.ll\n"}, {"commit_id": "216562", "date": "2014-08-27T17:04:39.834334Z", "author": "nico", "msg": "Call ResolveExceptionSpec for non-OdrUsed functions.\n\nIn C++11, instantiation of exception specs is deferred. The instantiation is\ndone in MarkFunctionReferenced(), which wasn't called for non-OdrUsed functions,\nwhich then caused an assert in codegen. Fixes PR19190, see the bug for details.\n", "modified": "M | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx11-exception-spec.cpp\n"}, {"commit_id": "216989", "date": "2014-09-02T22:45:13.858244Z", "author": "rengolin", "msg": "Only emit movw on ARMv6T2+\n\nFix PR18364.\n\nPatch by Dimitry Andric.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMInstrInfo.td\nM | /llvm/trunk/test/CodeGen/ARM/carry.ll\n"}, {"commit_id": "216990", "date": "2014-09-02T22:46:18.208581Z", "author": "rengolin", "msg": "Missing test from r216989", "modified": "A | /llvm/trunk/test/CodeGen/ARM/pr18364-movw.ll\n"}, {"commit_id": "217472", "date": "2014-09-10T00:59:37.198250Z", "author": "nico", "msg": "Don't crash on access decls with invalid scope specifier, PR20887.", "modified": "M | /cfe/trunk/lib/Parse/ParseDeclCXX.cpp\nM | /cfe/trunk/test/Parser/cxx-class.cpp\n"}, {"commit_id": "218295", "date": "2014-09-23T06:06:43.358462Z", "author": "akirtzidis", "msg": "[ADT/IntrusiveRefCntPtr] Give friend access to IntrusiveRefCntPtr<X> so the relevant move constructor can access 'Obj'.\n", "modified": "M | /llvm/trunk/include/llvm/ADT/IntrusiveRefCntPtr.h\n"}, {"commit_id": "218372", "date": "2014-09-24T04:44:54.406903Z", "author": "nico", "msg": "Mark module atomic as cplusplus11.\n\nWith clang, the header atomic requires __has_feature(cxx_atomic), which is only\ntrue in c++11 mode. Because of this, when using modules in c++98 with libc++\ncompilation of the std module would fail without this change, PR21002.\n\n(With gcc, only gcc4.7+ is needed, no c++11. But gcc doesn't have modules yet,\nand the module.modulemap language can't express things like \"this is only\nrequired if the compiler is clang\". If gcc gets module support, we'd probably\nhave a module.modulemap file for each compiler that libc++ supports?)\n", "modified": "M | /libcxx/trunk/include/module.modulemap\n"}, {"commit_id": "218431", "date": "2014-09-25T00:26:15.944682Z", "author": "ahatanak", "msg": "[X86,AVX] Add an isel pattern for X86VBroadcast.\n\nThis fixes PR21050 and rdar://problem/18434607.\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrSSE.td\nM | /llvm/trunk/test/CodeGen/X86/avx-movdup.ll\n"}, {"commit_id": "218503", "date": "2014-09-26T06:28:25.621192Z", "author": "amusman", "msg": "Small fix for bug 18635.\n(clang crashed in CodeGen in llvm::Module::getNamedValue on\n thread_local std::unique_ptr<int>).\nDifferential Revision: http://reviews.llvm.org/D5353\n", "modified": "M | /cfe/trunk/lib/CodeGen/ItaniumCXXABI.cpp\nA | /cfe/trunk/test/CodeGenCXX/pr18635.cpp\n"}, {"commit_id": "218843", "date": "2014-10-02T00:42:30.740605Z", "author": "echristo", "msg": "Remove test directories with no tests.", "modified": "D | /llvm/trunk/test/tools/llvm-dwarfdump/AArch64/lit.local.cfg\nD | /llvm/trunk/test/tools/llvm-dwarfdump/ARM/lit.local.cfg\n"}, {"commit_id": "219282", "date": "2014-10-08T06:42:19.321676Z", "author": "ghoflehner", "msg": "[InstCombine] re-commit r218721 with fix for pr21199\n\nThe icmp-select-icmp optimization targets select-icmp.eq\nonly. This is now ensured by testing the branch predicate\nexplictly. This commit also includes the test case for pr21199.\n", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombine.h\nM | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCompares.cpp\nM | /llvm/trunk/lib/Transforms/InstCombine/InstructionCombining.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/pr12338.ll\nA | /llvm/trunk/test/Transforms/InstCombine/pr21199.ll\nA | /llvm/trunk/test/Transforms/InstCombine/select-cmp-br.ll\n"}, {"commit_id": "220060", "date": "2014-10-17T18:00:12.624976Z", "author": "dblaikie", "msg": "Rename TemplateArgument::getTypeForDecl to getParamTypeForDecl for clarity\n\nCode review feedback from Richard Smith on r219900.", "modified": "M | /cfe/trunk/include/clang/AST/TemplateBase.h\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/AST/ASTImporter.cpp\nM | /cfe/trunk/lib/AST/ItaniumMangle.cpp\nM | /cfe/trunk/lib/AST/MicrosoftMangle.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/Serialization/ASTWriter.cpp\n"}, {"commit_id": "220158", "date": "2014-10-19T02:19:27.666805Z", "author": "bwilson", "msg": "Use the triple's isiOS() method instead of checking the value directly. NFC.", "modified": "M | /cfe/trunk/lib/Basic/Targets.cpp\n"}, {"commit_id": "220221", "date": "2014-10-20T18:56:54.530918Z", "author": "dblaikie", "msg": "PR21312: Fix a regression in non-type template parameters of function type that are static member functions.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-template.cpp\n"}, {"commit_id": "220787", "date": "2014-10-28T17:00:19.069873Z", "author": "rsmith", "msg": "PR17730: Add test that we don't crash on this testcase. (The bug is already fixed.)\n", "modified": "A | /cfe/trunk/test/SemaTemplate/crash.cpp\n"}, {"commit_id": "220867", "date": "2014-10-29T18:55:09.980717Z", "author": "djasper", "msg": "Refactor libTooling to reduce required dependencies.\n\nThis moves classes for storing and applying replacements to separate\nfiles. These classes specifically are used by clang-format which doesn't\nhave any other dependencies on clangAST. Thereby, the size of\nclang-format's binary can be cut roughly in half and its build time sped\nup.", "modified": "A | /cfe/trunk/include/clang/Tooling/Core\nA | /cfe/trunk/include/clang/Tooling/Core/Replacement.h\nM | /cfe/trunk/include/clang/Tooling/Refactoring.h\nM | /cfe/trunk/lib/Format/CMakeLists.txt\nM | /cfe/trunk/lib/Tooling/CMakeLists.txt\nA | /cfe/trunk/lib/Tooling/Core\nA | /cfe/trunk/lib/Tooling/Core/CMakeLists.txt\nA | /cfe/trunk/lib/Tooling/Core/Makefile\nA | /cfe/trunk/lib/Tooling/Core/Replacement.cpp\nM | /cfe/trunk/lib/Tooling/Makefile\nM | /cfe/trunk/lib/Tooling/Refactoring.cpp\nM | /cfe/trunk/tools/clang-format/CMakeLists.txt\nM | /cfe/trunk/tools/clang-format/Makefile\nM | /cfe/trunk/tools/libclang/Makefile\nM | /cfe/trunk/unittests/Format/CMakeLists.txt\nM | /cfe/trunk/unittests/Format/Makefile\nM | /cfe/trunk/unittests/Tooling/Makefile\n"}, {"commit_id": "221511", "date": "2014-11-07T07:26:38.527588Z", "author": "majnemer", "msg": "CodeGen, Itanium: Properly dllimport RTTI data\n\nWe would blindly assume that RTTI data should have the same linkage as\nthe vtable because we didn't think the RTTI data was external.  This\noversight stemmed because we didn't take dllimport into account.\n\nThis fixes PR21512.", "modified": "M | /cfe/trunk/lib/CodeGen/ItaniumCXXABI.cpp\nM | /cfe/trunk/test/CodeGenCXX/dllimport-rtti.cpp\n"}, {"commit_id": "221513", "date": "2014-11-07T08:54:19.149076Z", "author": "majnemer", "msg": "SCCP: overdefined calls cannot become constant\n\nWe would attempt to fold away a call instruction which had been marked\noverdefined.  However, it's not valid to transition to constant from\noverdefined.\n\nThis fixes PR21512.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SCCP.cpp\nM | /llvm/trunk/test/Transforms/SCCP/ipsccp-basic.ll\n"}, {"commit_id": "221626", "date": "2014-11-10T20:40:21.429791Z", "author": "mkuper", "msg": "[X86] Fix pattern match for 32-to-64-bit zext in the presence of AssertSext\n\nThis fixes an issue with matching trunc -> assertsext -> zext on x86-64, which would not zero the high 32-bits.\nSee PR20494 for details.\n\nDifferential Revision: http://reviews.llvm.org/D6128", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrCompiler.td\nA | /llvm/trunk/test/CodeGen/X86/TruncAssertZext.ll\n"}, {"commit_id": "221629", "date": "2014-11-10T21:07:41.039378Z", "author": "mkuper", "msg": "Reverting r221626 due to a too-strict test.", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrCompiler.td\nD | /llvm/trunk/test/CodeGen/X86/TruncAssertZext.ll\n"}, {"commit_id": "221672", "date": "2014-11-11T07:07:40.681246Z", "author": "mkuper", "msg": "[X86] Fix pattern match for 32-to-64-bit zext in the presence of AssertSext\n\nThis fixes an issue with matching trunc -> assertsext -> zext on x86-64, which would not zero the high 32-bits. See PR20494 for details.\nRecommitting - This time, with a hopefully working test.\n\nDifferential Revision: http://reviews.llvm.org/D6128", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrCompiler.td\nA | /llvm/trunk/test/CodeGen/X86/TruncAssertZext.ll\n"}, {"commit_id": "221924", "date": "2014-11-13T21:17:58.800330Z", "author": "mcrosier", "msg": "[GVN] Perform Scalar PRE on gep indices that feed loads before doing Load PRE.\n\nPhabricator Revision: http://reviews.llvm.org/D6103\nPatch by \"Balaram Makam\" <bmakam@codeaurora.org>!", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/GVN.cpp\nA | /llvm/trunk/test/Transforms/GVN/pre-gep-load.ll\n"}, {"commit_id": "222074", "date": "2014-11-15T01:41:41.584962Z", "author": "rnk", "msg": "Fix IRGen for passing transparent unions\n\nWe have had a test for this for a long time with a FIXME saying what we\nshould be doing. This just does it.\n\nFixes PR21573.", "modified": "M | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nM | /cfe/trunk/test/CodeGen/transparent-union.c\n"}, {"commit_id": "222590", "date": "2014-11-21T23:36:44.841644Z", "author": "ghoflehner", "msg": "[InstCombine] Re-commit of  r218721 (Optimize icmp-select-icmp sequence)\n\nFixes the self-host fail. Note that this commit activates dominator\nanalysis in the combiner by default (like the original commit did).\n\n", "modified": "M | /llvm/trunk/include/llvm/IR/Value.h\nM | /llvm/trunk/lib/IR/Value.cpp\nM | /llvm/trunk/lib/Transforms/InstCombine/InstCombine.h\nM | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCompares.cpp\nM | /llvm/trunk/lib/Transforms/InstCombine/InstructionCombining.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/pr12338.ll\nA | /llvm/trunk/test/Transforms/InstCombine/pr21199.ll\nA | /llvm/trunk/test/Transforms/InstCombine/pr21210.ll\nA | /llvm/trunk/test/Transforms/InstCombine/select-cmp-br.ll\n"}, {"commit_id": "222673", "date": "2014-11-24T18:17:04.247176Z", "author": "ericwf", "msg": "[compiler-rt] Make the MSAN wmemset intercepter call wmemset instead of memset. Fixes PR 21579\n\nSummary:\nExactly what the title says. I've tested this change against the libc++ test failures and it solves all of them. The check-msan rule also still passes.\nI'm not sure why it called memset originally. \n\nI can add tests if requested but currently there are no tests involving wide chars and they are a c++11 features.\n\nReviewers: kcc, eugenis\n\nReviewed By: eugenis\n\nSubscribers: llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D6352", "modified": "M | /compiler-rt/trunk/lib/msan/msan_interceptors.cc\nM | /compiler-rt/trunk/lib/msan/tests/msan_test.cc\n"}, {"commit_id": "222874", "date": "2014-11-27T10:14:27.536588Z", "author": "grosser", "msg": "autoconf: Move libraries later to ensure that all symbols are found\n\nThis fixes llvm.org/PR19540", "modified": "M | /polly/trunk/lib/Makefile\n"}, {"commit_id": "223074", "date": "2014-12-01T20:52:32.951875Z", "author": "ab", "msg": "[AArch64] Fix v2i8->i16 bitcast legalization.\n\nr213378 improved f16 bitcasts, so that they go directly through subregs,\ninstead of through the stack.  That code now causes an assertion failure\nfor bitcasts from other 16-bits types (most importantly v2i8).\n\nCorrect that by doing the custom lowering for i16 bitcasts only when the\ninput is an f16.\n\nPart of PR21549.\n\nDifferential Revision: http://reviews.llvm.org/D6307\n", "modified": "M | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.cpp\nA | /llvm/trunk/test/CodeGen/AArch64/bitcast-v2i8.ll\n"}, {"commit_id": "223075", "date": "2014-12-01T20:59:00.936659Z", "author": "ab", "msg": "[AArch64] Don't combine \"select (setcc i1 LHS, RHS), vL, vR\".\n\nr208210 introduced an optimization that improves the vector select\ncodegen by doing the setcc on vectors directly.\nThis is a problem they the setcc operands are i1s, because the\noptimization would create vectors of i1, which aren't legal.\n\nPart of PR21549.\n\nDifferential Revision: http://reviews.llvm.org/D6308\n", "modified": "M | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/AArch64/arm64-neon-select_cc.ll\n"}, {"commit_id": "223147", "date": "2014-12-02T20:03:22.980939Z", "author": "rdivacky", "msg": "Introduce CPUStringIsValid() into MCSubtargetInfo and use it for ARM .cpu parsing.\n\nPreviously .cpu directive in ARM assembler didnt switch to the new CPU and\ntherefore acted as a nop. This implemented real action for .cpu and eg. \nallows to assembler FreeBSD kernel with -integrated-as.\n", "modified": "M | /llvm/trunk/include/llvm/MC/MCSubtargetInfo.h\nM | /llvm/trunk/lib/Target/ARM/AsmParser/ARMAsmParser.cpp\nA | /llvm/trunk/test/MC/ARM/cpu-test.s\n"}, {"commit_id": "223419", "date": "2014-12-05T00:10:15.795256Z", "author": "smatveev", "msg": "[ASan, LSan] Improve tracking of thread creation.\n\nIn the current scheme of things, the call to ThreadStart() in the child\nthread is not synchronized with the parent thread. So, if a pointer is passed to\npthread_create, there may be a window of time during which this pointer will not\nbe discoverable by LSan. I.e. the pthread_create interceptor has already\nreturneed and thus the pointer is no longer on the parent stack, but we don't\nyet know the location of the child stack. This has caused bogus leak reports\n(see http://llvm.org/bugs/show_bug.cgi?id=21621/).\n\nThis patch makes the pthread_create interceptor wait until the child thread is\nproperly registered before returning.", "modified": "M | /compiler-rt/trunk/lib/asan/asan_interceptors.cc\nM | /compiler-rt/trunk/lib/asan/asan_rtl.cc\nM | /compiler-rt/trunk/lib/asan/asan_thread.cc\nM | /compiler-rt/trunk/lib/asan/asan_thread.h\nM | /compiler-rt/trunk/lib/lsan/lsan_interceptors.cc\nA | /compiler-rt/trunk/test/lsan/TestCases/leak_check_before_thread_started.cc\n"}, {"commit_id": "223802", "date": "2014-12-09T18:38:53.171862Z", "author": "dexonsmith", "msg": "IR: Split Metadata from Value\n\nSplit `Metadata` away from the `Value` class hierarchy, as part of\nPR21532.  Assembly and bitcode changes are in the wings, but this is the\nbulk of the change for the IR C++ API.\n\nI have a follow-up patch prepared for `clang`.  If this breaks other\nsub-projects, I apologize in advance :(.  Help me compile it on Darwin\nI'll try to fix it.  FWIW, the errors should be easy to fix, so it may\nbe simpler to just fix it yourself.\n\nThis breaks the build for all metadata-related code that's out-of-tree.\nRest assured the transition is mechanical and the compiler should catch\nalmost all of the problems.\n\nHere's a quick guide for updating your code:\n\n  - `Metadata` is the root of a class hierarchy with three main classes:\n    `MDNode`, `MDString`, and `ValueAsMetadata`.  It is distinct from\n    the `Value` class hierarchy.  It is typeless -- i.e., instances do\n    *not* have a `Type`.\n\n  - `MDNode`'s operands are all `Metadata *` (instead of `Value *`).\n\n  - `TrackingVH<MDNode>` and `WeakVH` referring to metadata can be\n    replaced with `TrackingMDNodeRef` and `TrackingMDRef`, respectively.\n\n    If you're referring solely to resolved `MDNode`s -- post graph\n    construction -- just use `MDNode*`.\n\n  - `MDNode` (and the rest of `Metadata`) have only limited support for\n    `replaceAllUsesWith()`.\n\n    As long as an `MDNode` is pointing at a forward declaration -- the\n    result of `MDNode::getTemporary()` -- it maintains a side map of its\n    uses and can RAUW itself.  Once the forward declarations are fully\n    resolved RAUW support is dropped on the ground.  This means that\n    uniquing collisions on changing operands cause nodes to become\n    \"distinct\".  (This already happened fairly commonly, whenever an\n    operand went to null.)\n\n    If you're constructing complex (non self-reference) `MDNode` cycles,\n    you need to call `MDNode::resolveCycles()` on each node (or on a\n    top-level node that somehow references all of the nodes).  Also,\n    don't do that.  Metadata cycles (and the RAUW machinery needed to\n    construct them) are expensive.\n\n  - An `MDNode` can only refer to a `Constant` through a bridge called\n    `ConstantAsMetadata` (one of the subclasses of `ValueAsMetadata`).\n\n    As a side effect, accessing an operand of an `MDNode` that is known\n    to be, e.g., `ConstantInt`, takes three steps: first, cast from\n    `Metadata` to `ConstantAsMetadata`; second, extract the `Constant`;\n    third, cast down to `ConstantInt`.\n\n    The eventual goal is to introduce `MDInt`/`MDFloat`/etc. and have\n    metadata schema owners transition away from using `Constant`s when\n    the type isn't important (and they don't care about referring to\n    `GlobalValue`s).\n\n    In the meantime, I've added transitional API to the `mdconst`\n    namespace that matches semantics with the old code, in order to\n    avoid adding the error-prone three-step equivalent to every call\n    site.  If your old code was:\n\n        MDNode *N = foo();\n        bar(isa             <ConstantInt>(N->getOperand(0)));\n        baz(cast            <ConstantInt>(N->getOperand(1)));\n        bak(cast_or_null    <ConstantInt>(N->getOperand(2)));\n        bat(dyn_cast        <ConstantInt>(N->getOperand(3)));\n        bay(dyn_cast_or_null<ConstantInt>(N->getOperand(4)));\n\n    you can trivially match its semantics with:\n\n        MDNode *N = foo();\n        bar(mdconst::hasa               <ConstantInt>(N->getOperand(0)));\n        baz(mdconst::extract            <ConstantInt>(N->getOperand(1)));\n        bak(mdconst::extract_or_null    <ConstantInt>(N->getOperand(2)));\n        bat(mdconst::dyn_extract        <ConstantInt>(N->getOperand(3)));\n        bay(mdconst::dyn_extract_or_null<ConstantInt>(N->getOperand(4)));\n\n    and when you transition your metadata schema to `MDInt`:\n\n        MDNode *N = foo();\n        bar(isa             <MDInt>(N->getOperand(0)));\n        baz(cast            <MDInt>(N->getOperand(1)));\n        bak(cast_or_null    <MDInt>(N->getOperand(2)));\n        bat(dyn_cast        <MDInt>(N->getOperand(3)));\n        bay(dyn_cast_or_null<MDInt>(N->getOperand(4)));\n\n  - A `CallInst` -- specifically, intrinsic instructions -- can refer to\n    metadata through a bridge called `MetadataAsValue`.  This is a\n    subclass of `Value` where `getType()->isMetadataTy()`.\n\n    `MetadataAsValue` is the *only* class that can legally refer to a\n    `LocalAsMetadata`, which is a bridged form of non-`Constant` values\n    like `Argument` and `Instruction`.  It can also refer to any other\n    `Metadata` subclass.\n\n(I'll break all your testcases in a follow-up commit, when I propagate\nthis change to assembly.)", "modified": "M | /llvm/trunk/bindings/go/llvm/DIBuilderBindings.cpp\nM | /llvm/trunk/include/llvm/CodeGen/LexicalScopes.h\nM | /llvm/trunk/include/llvm/CodeGen/MachineInstr.h\nM | /llvm/trunk/include/llvm/CodeGen/MachineModuleInfo.h\nM | /llvm/trunk/include/llvm/CodeGen/SelectionDAGNodes.h\nM | /llvm/trunk/include/llvm/IR/DIBuilder.h\nM | /llvm/trunk/include/llvm/IR/DebugInfo.h\nM | /llvm/trunk/include/llvm/IR/DebugLoc.h\nM | /llvm/trunk/include/llvm/IR/IntrinsicInst.h\nM | /llvm/trunk/include/llvm/IR/MDBuilder.h\nA | /llvm/trunk/include/llvm/IR/Metadata.def\nM | /llvm/trunk/include/llvm/IR/Metadata.h\nA | /llvm/trunk/include/llvm/IR/MetadataTracking.h\nM | /llvm/trunk/include/llvm/IR/Module.h\nA | /llvm/trunk/include/llvm/IR/TrackingMDRef.h\nM | /llvm/trunk/include/llvm/IR/TypeFinder.h\nM | /llvm/trunk/include/llvm/IR/Value.h\nM | /llvm/trunk/include/llvm/IR/ValueMap.h\nM | /llvm/trunk/include/llvm/Transforms/Utils/ValueMapper.h\nM | /llvm/trunk/include/llvm-c/Core.h\nM | /llvm/trunk/lib/Analysis/BranchProbabilityInfo.cpp\nM | /llvm/trunk/lib/Analysis/ScalarEvolution.cpp\nM | /llvm/trunk/lib/Analysis/TypeBasedAliasAnalysis.cpp\nM | /llvm/trunk/lib/Analysis/ValueTracking.cpp\nM | /llvm/trunk/lib/AsmParser/LLParser.cpp\nM | /llvm/trunk/lib/AsmParser/LLParser.h\nM | /llvm/trunk/lib/Bitcode/Reader/BitcodeReader.cpp\nM | /llvm/trunk/lib/Bitcode/Reader/BitcodeReader.h\nM | /llvm/trunk/lib/Bitcode/Writer/BitcodeWriter.cpp\nM | /llvm/trunk/lib/Bitcode/Writer/ValueEnumerator.cpp\nM | /llvm/trunk/lib/Bitcode/Writer/ValueEnumerator.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/AsmPrinterInlineAsm.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\nM | /llvm/trunk/lib/CodeGen/CodeGenPrepare.cpp\nM | /llvm/trunk/lib/CodeGen/MachineInstr.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\nM | /llvm/trunk/lib/CodeGen/StackColoring.cpp\nM | /llvm/trunk/lib/CodeGen/TargetLoweringObjectFileImpl.cpp\nM | /llvm/trunk/lib/IR/AsmWriter.cpp\nM | /llvm/trunk/lib/IR/AutoUpgrade.cpp\nM | /llvm/trunk/lib/IR/CMakeLists.txt\nM | /llvm/trunk/lib/IR/Core.cpp\nM | /llvm/trunk/lib/IR/DIBuilder.cpp\nM | /llvm/trunk/lib/IR/DebugInfo.cpp\nM | /llvm/trunk/lib/IR/DebugLoc.cpp\nM | /llvm/trunk/lib/IR/DiagnosticInfo.cpp\nM | /llvm/trunk/lib/IR/Instructions.cpp\nM | /llvm/trunk/lib/IR/IntrinsicInst.cpp\nM | /llvm/trunk/lib/IR/LLVMContextImpl.cpp\nM | /llvm/trunk/lib/IR/LLVMContextImpl.h\nM | /llvm/trunk/lib/IR/MDBuilder.cpp\nM | /llvm/trunk/lib/IR/Metadata.cpp\nA | /llvm/trunk/lib/IR/MetadataTracking.cpp\nM | /llvm/trunk/lib/IR/Module.cpp\nM | /llvm/trunk/lib/IR/TypeFinder.cpp\nM | /llvm/trunk/lib/IR/Value.cpp\nM | /llvm/trunk/lib/IR/ValueSymbolTable.cpp\nM | /llvm/trunk/lib/IR/Verifier.cpp\nM | /llvm/trunk/lib/LTO/LTOModule.cpp\nM | /llvm/trunk/lib/Linker/LinkModules.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMAsmPrinter.cpp\nM | /llvm/trunk/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp\nM | /llvm/trunk/lib/Target/NVPTX/NVPTXUtilities.cpp\nM | /llvm/trunk/lib/Transforms/IPO/StripSymbols.cpp\nM | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCalls.cpp\nM | /llvm/trunk/lib/Transforms/Instrumentation/AddressSanitizer.cpp\nM | /llvm/trunk/lib/Transforms/Instrumentation/SanitizerCoverage.cpp\nM | /llvm/trunk/lib/Transforms/ObjCARC/ObjCARCOpts.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/LoopUnrollPass.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/SROA.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/ScalarReplAggregates.cpp\nM | /llvm/trunk/lib/Transforms/Utils/AddDiscriminators.cpp\nM | /llvm/trunk/lib/Transforms/Utils/CloneFunction.cpp\nM | /llvm/trunk/lib/Transforms/Utils/InlineFunction.cpp\nM | /llvm/trunk/lib/Transforms/Utils/Local.cpp\nM | /llvm/trunk/lib/Transforms/Utils/LoopUnrollRuntime.cpp\nM | /llvm/trunk/lib/Transforms/Utils/PromoteMemoryToRegister.cpp\nM | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nM | /llvm/trunk/lib/Transforms/Utils/ValueMapper.cpp\nM | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nM | /llvm/trunk/test/Assembler/functionlocal-metadata-attachments.ll\nM | /llvm/trunk/test/Assembler/functionlocal-metadata-complex-3.ll\nM | /llvm/trunk/test/Feature/metadata.ll\nA | /llvm/trunk/test/Linker/Inputs/unique-fwd-decl-order.ll\nA | /llvm/trunk/test/Linker/unique-fwd-decl-order.ll\nM | /llvm/trunk/test/Transforms/GlobalOpt/metadata.ll\nM | /llvm/trunk/unittests/IR/MDBuilderTest.cpp\nM | /llvm/trunk/unittests/IR/MetadataTest.cpp\n"}, {"commit_id": "223849", "date": "2014-12-09T23:04:59.568436Z", "author": "dexonsmith", "msg": "IR: Metadata: Detect an RAUW recursion\n\nSpeculatively handle a recursion in\n`GenericMDNode::handleChangedOperand()`.  I'm hoping this fixes the\nfailing hexagon bot [1].\n\n[1]: http://lab.llvm.org:8011/builders/llvm-hexagon-elf/builds/13434", "modified": "M | /llvm/trunk/include/llvm/IR/Metadata.h\nM | /llvm/trunk/lib/IR/Metadata.cpp\n"}, {"commit_id": "223858", "date": "2014-12-09T23:56:39.028819Z", "author": "dexonsmith", "msg": "IR: Fix memory corruption in MDNode new/delete\n\nThere were two major problems with `MDNode` memory management.\n\n 1. `MDNode::operator new()` called a placement array constructor for\n    `MDOperand`.  What?  Each operand needs to be placed individually.\n\n 2. `MDNode::operator delete()` failed to destruct the `MDOperand`s at\n    all.\n\nFrankly it's hard to understand how this worked locally, how this\nsurvived an LTO bootstrap, or how it worked on most of the bots.", "modified": "M | /llvm/trunk/lib/IR/Metadata.cpp\n"}, {"commit_id": "223916", "date": "2014-12-10T04:59:18.021390Z", "author": "dexonsmith", "msg": "ClangFunction: Fix destruction order of parser and execution unit\n\nFix PR21802 by correcting the destruction order of\n`ClangExpressionParser` and `IRExecutionUnit` in `ClangFunction`.  The\nformer has hooks into the latter -- i.e., `clang::CGDebugInfo` points at\nthe `LLVMContext` -- so it needs to be torn down first.\n\nThis was exposed by r223802 in LLVM, which started doing work in the\n`CGDebugInfo` teardown.", "modified": "M | /lldb/trunk/include/lldb/Expression/ClangFunction.h\nM | /lldb/trunk/source/Expression/ClangFunction.cpp\n"}, {"commit_id": "224098", "date": "2014-12-12T05:11:47.988059Z", "author": "kromanova", "msg": "A fix for PR21176. \n \nDW_OP_const <const> doesn't describe a constant value, but a value at a constant address. \nThe proper way to describe a constant value is DW_OP_constu <const>, DW_OP_stack_value. \nAdded DW_OP_stack_value to the stack. \n\nMarked incorrect-variable-debugloc1.ll to xfail for PowerPC64, while the the failure (PR21881) \nis being investigated. \n\n", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nA | /llvm/trunk/test/DebugInfo/incorrect-variable-debugloc1.ll\n"}, {"commit_id": "224146", "date": "2014-12-12T19:24:33.239912Z", "author": "dexonsmith", "msg": "IR: Don't track nullptr on metadata RAUW\n\nThe RAUW support in `Metadata` supports going to `nullptr` specifically\nto handle values being deleted, causing `ValueAsMetadata` to be deleted.\n\nFix the case where the reference is from a `TrackingMDRef` (as opposed\nto an `MDOperand` or a `MetadataAsValue`).\n\nThis is surprisingly rare -- metadata tracked by `TrackingMDRef` going\nto null -- but it came up in an openSUSE bootstrap during inlining.  The\ntracking ref was held by the `ValueMap` because it was referencing a\nlocal, the basic block containing the local became dead after it had\nbeen merged in, and when the local was deleted, the tracking ref\nasserted in an `isa`.", "modified": "M | /llvm/trunk/lib/IR/Metadata.cpp\nM | /llvm/trunk/unittests/IR/MetadataTest.cpp\n"}, {"commit_id": "224323", "date": "2014-12-16T07:00:22.096446Z", "author": "abataev", "msg": "[OPENMP] Bugfix for processing of global variables in OpenMP regions.\nCurrently, if global variable is marked as a private OpenMP variable, the compiler crashes in debug version or generates incorrect code in release version. It happens because in the OpenMP region the original global variable is used instead of the generated private copy. It happens because currently globals variables are not captured in the OpenMP region.\nThis patch adds capturing of global variables iff private copy of the global variable must be used in the OpenMP region.\nDifferential Revision: http://reviews.llvm.org/D6259\n", "modified": "M | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CGStmtOpenMP.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/Frontend/Rewrite/RewriteModernObjC.cpp\nM | /cfe/trunk/lib/Frontend/Rewrite/RewriteObjC.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaOpenMP.cpp\nM | /cfe/trunk/test/OpenMP/parallel_firstprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/parallel_private_codegen.cpp\n"}, {"commit_id": "224916", "date": "2014-12-29T09:30:33.405714Z", "author": "majnemer", "msg": "Sema: Only permit permit modifiable l-values as asm output params\n\nFunctions are l-values in C++ but shouldn't be available as output\nparameters in inline assembly.  Neither should overloaded function\nl-values.\n\nThis fixes PR21949.", "modified": "M | /cfe/trunk/lib/Sema/SemaStmtAsm.cpp\nM | /cfe/trunk/test/SemaCXX/statements.cpp\n"}, {"commit_id": "224918", "date": "2014-12-29T10:29:53.415365Z", "author": "majnemer", "msg": "Sema: Permit array l-values in asm output operands\n\nGCC permits array l-values in asm output operands even though they\naren't modifiable l-values.  We used to permit it but this behavior\nregressed in r224916.", "modified": "M | /cfe/trunk/lib/Sema/SemaStmtAsm.cpp\nM | /cfe/trunk/test/SemaCXX/statements.cpp\n"}, {"commit_id": "224941", "date": "2014-12-29T18:18:45.062008Z", "author": "dblaikie", "msg": "Reapply \"DebugInfo: Generalize debug info location handling\"\n\nOriginally committed in r224385 and reverted in r224441 due to concerns\nthis change might've introduced a crash. Turns out this change fixes the\ncrash introduced by one of my earlier more specific location handling\nchanges (those specific fixes are reverted by this patch, in favor of\nthe more general solution).\n\nOriginal commit message:\n\nThis is a more scalable (fixed in mostly one place, rather than many\nplaces that will need constant improvement/maintenance) solution to\nseveral commits I've made recently to increase source fidelity for\nsubexpressions.\n\nThis resetting had to be done at the DebugLoc level (not the\nSourceLocation level) to preserve scoping information (if the resetting\nwas done with CGDebugInfo::EmitLocation, it would've caused the tail end\nof an expression's codegen to end up in a potentially different scope\nthan the start, even though it was at the same source location). The\ndrawback to this is that it might leave CGDebugInfo out of sync. Ideally\nCGDebugInfo shouldn't have a duplicate sense of the current\nSourceLocation, but for now it seems it does... - I don't think I'm\ngoing to tackle removing that just now.\n\nI expect this'll probably cause some more buildbot fallout & I'll\ninvestigate that as it comes up.\n\nAlso these sort of improvements might be starting to show a weakness/bug\nin LLVM's line table handling: we don't correctly emit is_stmt for\nstatements, we just put it on every line table entry. This means one\nstatement split over multiple lines appears as multiple 'statements' and\ntwo statements on one line (without column info) are treated as one\nstatement.\n\nI don't think we have any IR representation of statements that would\nhelp us distinguish these cases and identify the beginning of each\nstatement - so that might be something we need to add (possibly to the\nlexical scope chain - a scope for each statement). This does cause some\nproblems for GDB and possibly other DWARF consumers.", "modified": "M | /cfe/trunk/lib/CodeGen/CGBlocks.cpp\nM | /cfe/trunk/lib/CodeGen/CGClass.cpp\nM | /cfe/trunk/lib/CodeGen/CGCleanup.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/lib/CodeGen/CGDeclCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CGException.cpp\nM | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprComplex.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nM | /cfe/trunk/lib/CodeGen/CGStmtOpenMP.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/test/CodeGenCXX/PR20038.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-line.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-scope.cpp\n"}, {"commit_id": "225049", "date": "2014-12-31T18:20:52.259194Z", "author": "rafael", "msg": "Avoid building compiler-rt with LTO.\n\nDuring a LTO we still need to build a compiler_rt with regular object files\nin the .a.", "modified": "M | /compiler-rt/trunk/CMakeLists.txt\nM | /compiler-rt/trunk/cmake/config-ix.cmake\n"}, {"commit_id": "225060", "date": "2015-01-01T09:49:44.414072Z", "author": "majnemer", "msg": "CodeGen: Don't crash when a lambda uses a local constexpr variable\n\nThe DeclRefExpr might be for a variable initialized by a constant\nexpression which hasn't been ODR used.\nEmit the initializer for the variable instead of trying to capture the\nvariable itself.\n\nThis fixes PR22071.", "modified": "M | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/test/CodeGenCXX/lambda-expressions.cpp\n"}, {"commit_id": "225071", "date": "2015-01-02T01:33:12.036782Z", "author": "nicholas", "msg": "Instantiation of a CXXMethodDecl may fail when the parameter type cannot be instantiated. Do not crash in this case. Fixes PR22040!\n\nThe FIXME in the test is caused by TemplateDeclInstantiator::VisitCXXRecordDecl\nreturning a nullptr instead of creating an invalid decl. This is a common\npattern across all of TemplateDeclInstantiator, so I'm not comfortable changing\nit. The reason it's not invalid in the class template is due to support for an\nMSVC extension, see r137573.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/test/SemaTemplate/instantiate-method.cpp\n"}, {"commit_id": "225127", "date": "2015-01-04T07:36:02.068755Z", "author": "majnemer", "msg": "InstCombine: match can find ConstantExprs, don't assume we have a Value\n\nWe assumed the output of a match was a Value, this would cause us to\nassert because we would fail a cast<>.  Instead, use a helper in the\nOperator family to hide the distinction between Value and Constant.\n\nThis fixes PR22087.", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/mul.ll\n"}, {"commit_id": "225250", "date": "2015-01-06T07:12:52.664972Z", "author": "majnemer", "msg": "X86: Don't make illegal GOTTPOFF relocations\n\n\"ELF Handling for Thread-Local Storage\" specifies that R_X86_64_GOTTPOFF\nrelocation target a movq or addq instruction.\n\nProhibit the truncation of such loads to movl or addl.\n\nThis fixes PR22083.\n\nDifferential Revision: http://reviews.llvm.org/D6839", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.h\nM | /llvm/trunk/test/CodeGen/X86/tls-models.ll\n"}, {"commit_id": "225293", "date": "2015-01-06T20:25:34.159782Z", "author": "samsonov", "msg": "Use -DSANITIZER_DEBUG=1 if COMPILER_RT_DEBUG=ON, now that PR22083 is fixed.", "modified": "M | /compiler-rt/trunk/CMakeLists.txt\n"}, {"commit_id": "225536", "date": "2015-01-09T19:19:56.597329Z", "author": "tnorthover", "msg": "Re-reapply r221924: \"[GVN] Perform Scalar PRE on gep indices that feed loads before\ndoing Load PRE\"\n\nIt's not really expected to stick around, last time it provoked a weird LTO\nbuild failure that I can't reproduce now, and the bot logs are long gone. I'll\nre-revert it if the failures recur.\n\nOriginal description: Perform Scalar PRE on gep indices that feed loads before\ndoing Load PRE.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/GVN.cpp\nM | /llvm/trunk/test/Analysis/TypeBasedAliasAnalysis/gvn-nonlocal-type-mismatch.ll\nA | /llvm/trunk/test/Transforms/GVN/pre-gep-load.ll\n"}, {"commit_id": "225558", "date": "2015-01-09T23:17:25.286555Z", "author": "samsonov", "msg": "Fix UBSan error reports in ValueMapCallbackVH and AssertingVH<T> empty/tombstone keys generation.\n\nSummary:\nOne more attempt to fix UBSan reports: make sure DenseMapInfo::getEmptyKey()\nand DenseMapInfo::getTombstoneKey() doesn't do any upcasts/downcasts to/from Value*.\n\nTest Plan: check-llvm test suite with/without UBSan bootstrap\n\nReviewers: chandlerc, dexonsmith\n\nSubscribers: llvm-commits, majnemer\n\nDifferential Revision: http://reviews.llvm.org/D6903", "modified": "M | /llvm/trunk/include/llvm/IR/ValueHandle.h\nM | /llvm/trunk/include/llvm/IR/ValueMap.h\n"}, {"commit_id": "225597", "date": "2015-01-11T05:08:57.483332Z", "author": "majnemer", "msg": "X86: Properly decode shuffle masks when the constant pool type is weird\n\nIt's possible for the constant pool entry for the shuffle mask to come\nfrom a completely different operation.  This occurs when Constants have\nthe same bit pattern but have different types.\n\nMake DecodePSHUFBMask tolerant of types which, after a bitcast, are\nappropriately sized vector types.\n\nThis fixes PR22188.", "modified": "M | /llvm/trunk/lib/Target/X86/Utils/X86ShuffleDecode.cpp\nM | /llvm/trunk/lib/Target/X86/Utils/X86ShuffleDecode.h\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86MCInstLower.cpp\nM | /llvm/trunk/test/CodeGen/X86/pshufb-mask-comments.ll\n"}, {"commit_id": "225599", "date": "2015-01-11T07:29:51.723314Z", "author": "majnemer", "msg": "Revert most of r225597\n\nWe can't rely on a DataLayout enlightened constant folder.", "modified": "M | /llvm/trunk/lib/Target/X86/Utils/X86ShuffleDecode.cpp\nM | /llvm/trunk/lib/Target/X86/Utils/X86ShuffleDecode.h\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86MCInstLower.cpp\nM | /llvm/trunk/test/CodeGen/X86/pshufb-mask-comments.ll\n"}, {"commit_id": "226208", "date": "2015-01-15T21:18:30.013475Z", "author": "hans", "msg": "Warn about dllexported explicit class template instantiation declarations (PR22035)\n\nClang would previously become confused and crash here.\n\nIt does not make a lot of sense to export these, so warning seems appropriate.\n\nMSVC will export some member functions for this kind of specializations, whereas\nMinGW ignores the dllexport-edness. The latter behaviour seems better.\n\nDifferential Revision: http://reviews.llvm.org/D6984", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/test/CodeGenCXX/dllexport.cpp\nM | /cfe/trunk/test/SemaCXX/dllexport.cpp\n"}, {"commit_id": "226396", "date": "2015-01-18T09:21:15.152744Z", "author": "chandlerc", "msg": "[PM] Pull the analyses used for another utility routine into its API\nrather than relying on the pass object.\n\nThis one is a bit annoying, but will pay off. First, supporting this one\nwill make the next one much easier, and for utilities like LoopSimplify,\nthis is moving them (slowly) closer to not having to pass the pass\nobject around throughout their APIs.", "modified": "M | /llvm/trunk/include/llvm/Transforms/Utils/BasicBlockUtils.h\nM | /llvm/trunk/lib/Transforms/Scalar/JumpThreading.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/LoopUnswitch.cpp\nM | /llvm/trunk/lib/Transforms/Utils/BasicBlockUtils.cpp\nM | /llvm/trunk/lib/Transforms/Utils/BreakCriticalEdges.cpp\nM | /llvm/trunk/lib/Transforms/Utils/LoopSimplify.cpp\nM | /llvm/trunk/lib/Transforms/Utils/LoopUnrollRuntime.cpp\n"}, {"commit_id": "226866", "date": "2015-01-22T21:36:45.744089Z", "author": "dexonsmith", "msg": "IR: Update references to temporaries before deleting\n\nDuring `MDNode::deleteTemporary()`, call `replaceAllUsesWith(nullptr)`\nto update all tracking references to `nullptr`.\n\nThis fixes PR22280, where inverted destruction order between tracking\nreferences and the temporaries themselves caused a use-after-free in\n`LLParser`.\n\nAn alternative fix would be to add an assertion that there are no users,\nand continue to fix inverted destruction order in clients (like\n`LLParser`), but instead I decided to make getting-teardown-right easy.\n(If someone disagrees let me know.)", "modified": "M | /llvm/trunk/include/llvm/IR/Metadata.h\nM | /llvm/trunk/lib/IR/Metadata.cpp\nA | /llvm/trunk/test/Assembler/invalid-mdnode-badref.ll\nM | /llvm/trunk/unittests/IR/MetadataTest.cpp\n"}, {"commit_id": "227056", "date": "2015-01-25T19:04:08.005900Z", "author": "adrian", "msg": "Debug info: Fix PR22296 by omitting the DW_AT_location if we lost the\nphysical register that is described in a DBG_VALUE.\n\nIn the testcase the DBG_VALUE describing \"p5\" becomes unavailable\nbecause the register its address is in is clobbered and we (currently)\naren't smart enough to realize that the value is rematerialized immediately\nafter the DBG_VALUE and/or is actually a stack slot.", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfExpression.cpp\nA | /llvm/trunk/test/DebugInfo/X86/nophysreg.ll\n"}, {"commit_id": "227171", "date": "2015-01-27T06:21:43.458399Z", "author": "majnemer", "msg": "LoopRotate: Don't walk the uses of a Constant\n\nLoopRotate wanted to avoid live range interference by looking at the\nuses of a Value in the loop latch and seeing if any lied outside of the\nloop.  We would wrongly perform this operation on Constants.\n\nThis fixes PR22337.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopRotation.cpp\nA | /llvm/trunk/test/Transforms/LoopRotate/pr22337.ll\n"}, {"commit_id": "227800", "date": "2015-02-02T12:45:34.134476Z", "author": "eeckstein", "msg": "Fix: SLPVectorizer crashes with assertion when vectorizing a cmp instruction.\n\nThe commit r225977 uncovered this bug. The problem was that the vectorizer tried to\nread the second operand of an already deleted instruction.\nThe bug didn't show up before r225977 because the freed memory still contained a non-null pointer.\nWith r225977 deletion of instructions is delayed and the read operand pointer is always null.\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/SLPVectorizer.cpp\nA | /llvm/trunk/test/Transforms/SLPVectorizer/X86/crash_cmpop.ll\n"}, {"commit_id": "228129", "date": "2015-02-04T10:11:59.679399Z", "author": "rengolin", "msg": "Reverting VLD1/VST1 base-updating/post-incrementing combining\n\nThis reverts patches 223862, 224198, 224203, and 224754, which were all\nrelated to the vector load/store combining and were reverted/reaplied\na few times due to the same alignment problems we're seeing now.\n\nFurther tests, mainly self-hosting Clang, will be needed to reapply this\npatch in the future.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/ARM/alloc-no-stack-realign.ll\nM | /llvm/trunk/test/CodeGen/ARM/memcpy-inline.ll\nD | /llvm/trunk/test/CodeGen/ARM/vector-load.ll\nD | /llvm/trunk/test/CodeGen/ARM/vector-store.ll\nM | /llvm/trunk/test/Transforms/LoopStrengthReduce/ARM/ivchain-ARM.ll\n"}, {"commit_id": "228411", "date": "2015-02-06T17:59:49.416033Z", "author": "rnk", "msg": "Don't dllexport declarations\n\nFixes PR22488", "modified": "M | /llvm/trunk/lib/Target/X86/X86AsmPrinter.cpp\nM | /llvm/trunk/test/CodeGen/X86/dllexport.ll\n"}, {"commit_id": "228490", "date": "2015-02-07T08:26:40.702626Z", "author": "majnemer", "msg": "MC: Emit COFF section flags in the \"proper\" order\n\nCOFF section flags are not idempotent:\n  'rd' will make a read-write section because 'd' implies write\n  'dr' will make a read-only section because 'r' disables write", "modified": "M | /llvm/trunk/lib/MC/MCSectionCOFF.cpp\nM | /llvm/trunk/test/CodeGen/ARM/Windows/read-only-data.ll\nM | /llvm/trunk/test/CodeGen/ARM/Windows/structors.ll\nM | /llvm/trunk/test/CodeGen/X86/coff-comdat.ll\nM | /llvm/trunk/test/CodeGen/X86/dllexport-x86_64.ll\nM | /llvm/trunk/test/CodeGen/X86/dllexport.ll\nM | /llvm/trunk/test/CodeGen/X86/global-sections.ll\nM | /llvm/trunk/test/CodeGen/X86/win_cst_pool.ll\nM | /llvm/trunk/test/DebugInfo/COFF/asm.ll\nM | /llvm/trunk/test/DebugInfo/COFF/multifile.ll\nM | /llvm/trunk/test/DebugInfo/COFF/multifunction.ll\nM | /llvm/trunk/test/DebugInfo/COFF/simple.ll\nM | /llvm/trunk/test/DebugInfo/COFF/tail-call-without-lexical-scopes.ll\nM | /llvm/trunk/test/DebugInfo/X86/coff_debug_info_type.ll\nM | /llvm/trunk/test/MC/COFF/bss_section.ll\nM | /llvm/trunk/test/MC/COFF/const-gv-with-rel-init.ll\nM | /llvm/trunk/test/MC/COFF/global_ctors_dtors.ll\nM | /llvm/trunk/test/MC/COFF/initialised-data.ll\nM | /llvm/trunk/test/MC/COFF/section-passthru-flags.s\n"}, {"commit_id": "228726", "date": "2015-02-10T19:13:46.592321Z", "author": "dexonsmith", "msg": "IR: Add MDNode::replaceWithPermanent()\n\nAdd new API for converting temporaries that may self-reference.\nSelf-referencing nodes are not allowed to be uniqued, so sending them\ninto `replaceWithUniqued()` is dangerous (and this commit adds\nassertions that prevent it).\n\n`replaceWithPermanent()` has similar semantics to `get()` followed by\ncalls to `replaceOperandWith()`.  In particular, if there's a\nself-reference, it returns a distinct node; otherwise, it returns a\nuniqued one.  Like `replaceWithUniqued()` and `replaceWithDistinct()`\n(well, it calls out to them) it mutates the temporary node in place if\npossible, only calling `replaceAllUsesWith()` on a uniquing collision.", "modified": "M | /llvm/trunk/include/llvm/IR/Metadata.h\nM | /llvm/trunk/lib/IR/Metadata.cpp\nM | /llvm/trunk/unittests/IR/MetadataTest.cpp\n"}, {"commit_id": "228732", "date": "2015-02-10T19:50:20.240577Z", "author": "samsonov", "msg": "[UBSan] Reduce the number of getCallerLocation() calls.\n\ngetCallerLocation() is expensive as it issues a call to symbolizer.\n(In fact, this function has a memory leak at the moment, but this\nwill be fixed in the nearest future). We should only call it if\nwe're actually going to print an error report, in particular,\nonce for every reported source location.\n\n__ubsan_handle_type_mismatch: call getCallerLocation() only if\nprovided source location is invalid, and only if the report is not\ndeduplicated.\n\n__ubsan_handle_float_cast_overflow: call getSourceLocation with\ncorrect CallerPC (the one in user code, not in UBSan handler). Source\nlocation for this check is not currently emitted by frontend.", "modified": "M | /compiler-rt/trunk/lib/ubsan/ubsan_diag.cc\nM | /compiler-rt/trunk/lib/ubsan/ubsan_diag.h\nM | /compiler-rt/trunk/lib/ubsan/ubsan_handlers.cc\n"}, {"commit_id": "228826", "date": "2015-02-11T12:15:41.603838Z", "author": "jamesm", "msg": "[SimplifyCFG] Swap to using TargetTransformInfo for cost\n analysis.\n\nWe're already using TTI in SimplifyCFG, so remove the hard-baked \"cheapness\"\nheuristic and use TTI directly. Generally NFC intended, but we're using a slightly\ndifferent heuristic now so there is a slight test churn.\n\nTest changes:\n  * combine-comparisons-by-cse.ll: Removed unneeded branch check.\n  * 2014-08-04-muls-it.ll: Test now doesn't branch but emits muleq.\n  * coalesce-subregs.ll: Superfluous block check.\n  * 2008-01-02-hoist-fp-add.ll: fadd is safe to speculate. Change to udiv.\n  * PhiBlockMerge.ll: Superfluous CFG checking code. Main checks still present.\n  * select-gep.ll: A variable GEP is not expensive, just TCC_Basic, according to the TTI.", "modified": "M | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nM | /llvm/trunk/test/CodeGen/AArch64/arm64-promote-const.ll\nM | /llvm/trunk/test/CodeGen/AArch64/combine-comparisons-by-cse.ll\nM | /llvm/trunk/test/CodeGen/ARM/2014-08-04-muls-it.ll\nM | /llvm/trunk/test/CodeGen/ARM/coalesce-subregs.ll\nM | /llvm/trunk/test/Transforms/SimplifyCFG/2008-01-02-hoist-fp-add.ll\nM | /llvm/trunk/test/Transforms/SimplifyCFG/PhiBlockMerge.ll\nM | /llvm/trunk/test/Transforms/SimplifyCFG/select-gep.ll\n"}, {"commit_id": "228852", "date": "2015-02-11T17:45:05.250023Z", "author": "adrian", "msg": "Generalize DIBuilder's createReplaceableForwardDecl() to a more flexible\ncreateReplaceableCompositeType() that allows to create non-forward-declared\ntemporary nodes.\n\nPaired commit with CFE.", "modified": "M | /llvm/trunk/include/llvm/IR/DIBuilder.h\nM | /llvm/trunk/lib/IR/DIBuilder.cpp\n"}, {"commit_id": "228853", "date": "2015-02-11T17:45:08.734649Z", "author": "adrian", "msg": "Add a trackIfUnresolved to DIBuilder::createInheritance(),\ntested via the clang test CodeGenCXX/vtable-holder-self-reference.cpp .", "modified": "M | /llvm/trunk/lib/IR/DIBuilder.cpp\n"}, {"commit_id": "228854", "date": "2015-02-11T17:45:10.907429Z", "author": "adrian", "msg": "Allow DIBuilder::replaceVTableHolder() to work with temporary nodes,\ntested via the clang test CodeGenCXX/vtable-holder-self-reference.cpp .", "modified": "M | /llvm/trunk/lib/IR/DIBuilder.cpp\n"}, {"commit_id": "228855", "date": "2015-02-11T17:45:15.626357Z", "author": "adrian", "msg": "Fix PR19351. While building up a composite type it is important to use\na non-uniqueable temporary node that is only turned into a permanent\nunique or distinct node after it is finished.\nOtherwise an intermediate node may get accidentally uniqued with another\nnode as illustrated by the testcase.\n\nPaired commit with LLVM.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nA | /cfe/trunk/test/CodeGen/debug-info-same-line.c\n"}, {"commit_id": "228979", "date": "2015-02-12T23:26:26.066781Z", "author": "majnemer", "msg": "X86: Don't crash if we can't decode the pshufb mask\n\nConstant pool entries are uniqued by their contents regardless of their\ntype.  This means that a pshufb can have a shuffle mask which isn't a\nsimple array of bytes.\n\nThe code path which attempts to decode the mask didn't check for\nfailure, causing PR22559.", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/pshufb-mask-comments.ll\n"}, {"commit_id": "229099", "date": "2015-02-13T10:48:30.812588Z", "author": "jamesm", "msg": "[SimplifyCFG] Be more aggressive\n\nUp the phi node folding threshold from a cheap \"1\" to a meagre \"2\".\n\nUpdate tests for extra added selects and slight code churn.", "modified": "M | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nM | /llvm/trunk/test/CodeGen/AArch64/analyzecmp.ll\nM | /llvm/trunk/test/CodeGen/AArch64/arm64-promote-const.ll\n"}, {"commit_id": "229215", "date": "2015-02-14T02:01:24.986880Z", "author": "bogner", "msg": "llvm-cov: Simplify coverage reports, fixing PR22575 in the process\n\nPR22575 occurred because we were unsafely storing references into a\nstd::vector. If the vector moved because it grew, we'd be left\niterating through garbage memory. This avoids the issue by simplifying\nthe logic to gather coverage information as we go, rather than storing\nit and iterating over it.\n\nI'm relying on the existing tests showing that this is semantically\nNFC, since it's difficult to hit the issue this fixes without\nrelatively large covered programs.", "modified": "M | /llvm/trunk/tools/llvm-cov/CMakeLists.txt\nM | /llvm/trunk/tools/llvm-cov/CodeCoverage.cpp\nM | /llvm/trunk/tools/llvm-cov/CoverageReport.cpp\nM | /llvm/trunk/tools/llvm-cov/CoverageReport.h\nD | /llvm/trunk/tools/llvm-cov/CoverageSummary.cpp\nD | /llvm/trunk/tools/llvm-cov/CoverageSummary.h\nM | /llvm/trunk/tools/llvm-cov/CoverageSummaryInfo.cpp\nM | /llvm/trunk/tools/llvm-cov/CoverageSummaryInfo.h\n"}, {"commit_id": "229217", "date": "2015-02-14T02:05:05.749681Z", "author": "bogner", "msg": "llvm-cov: Actually use the command line arguments when reporting\n\nThis code didn't really make sense as is. If a filename is passed in,\nthe user obviously wants the coverage *for that file*, not *for\neverything*.", "modified": "M | /llvm/trunk/test/tools/llvm-cov/Inputs/report.covmapping\nM | /llvm/trunk/test/tools/llvm-cov/report.cpp\nM | /llvm/trunk/tools/llvm-cov/CodeCoverage.cpp\nM | /llvm/trunk/tools/llvm-cov/CoverageReport.cpp\nM | /llvm/trunk/tools/llvm-cov/CoverageReport.h\n"}, {"commit_id": "229408", "date": "2015-02-16T17:26:51.903144Z", "author": "spatel", "msg": "x86-64 ABI: unwrap single element structs / arrays of 256-bit vectors to pass and return in registers\n\nThis is a patch for PR22563 ( http://llvm.org/bugs/show_bug.cgi?id=22563 ).\n\nWe were not correctly unwrapping a single 256-bit AVX vector that was defined as an array of 1 inside a struct.\n\nWe would generate a <4 x float> param/return value instead of <8 x float> and lose half of the vector.\n\nDifferential Revision: http://reviews.llvm.org/D7614\n", "modified": "M | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nM | /cfe/trunk/test/CodeGen/x86_64-arguments.c\n"}, {"commit_id": "229419", "date": "2015-02-16T18:59:54.806675Z", "author": "jamesm", "msg": "Run LICM as part of the cleanup phase from the scalar optimizer.\n\nThings like LoopUnrolling can produce loop invariant values - make sure\nwe pick them up.", "modified": "M | /llvm/trunk/lib/Transforms/IPO/PassManagerBuilder.cpp\n"}, {"commit_id": "229719", "date": "2015-02-18T18:45:54.250662Z", "author": "d0k", "msg": "Driver: Fix use of dangling std::string temporary\n\nWhat's going on here is that the ternary operator produces a std::string rvalue\nthat the StringRef points to. I'd hoped bugs like this were a thing of the past\nwith our asan testing but apparently this code path is only used when LLVM is\nconfigured with a custom --with-c-include-dirs setting.\n\nUnbreaks bootstrapping with GCC5 on Fedora (PR22625), patch by Jonathan Wakely!", "modified": "M | /cfe/trunk/lib/Driver/ToolChains.cpp\n"}, {"commit_id": "229731", "date": "2015-02-18T19:32:25.556426Z", "author": "sanjoy", "msg": "Partial fix for bug 22589\n\nDon't spend the entire iteration space in the scalar loop prologue if\ncomputing the trip count overflows.  This change also gets rid of the\nbackedge check in the prologue loop and the extra check for\noverflowing trip-count.\n\nDifferential Revision: http://reviews.llvm.org/D7715\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Utils/LoopUnrollRuntime.cpp\nM | /llvm/trunk/test/Transforms/LoopUnroll/runtime-loop.ll\nM | /llvm/trunk/test/Transforms/LoopUnroll/runtime-loop1.ll\nM | /llvm/trunk/test/Transforms/LoopUnroll/tripcount-overflow.ll\n"}, {"commit_id": "229904", "date": "2015-02-19T19:50:52.437304Z", "author": "cbieneman", "msg": "Checking if TARGET_OS_IPHONE is defined isn't good enough for 10.7 and earlier.\n\nOlder versions of the TargetConditionals header always defined TARGET_OS_IPHONE to something (0 or 1), so we need to test not only for the existence but also if it is 1.\n\nThis resolves PR22631.", "modified": "M | /llvm/trunk/lib/Support/Unix/Program.inc\n"}, {"commit_id": "231227", "date": "2015-03-04T09:12:08.186850Z", "author": "kbeyls", "msg": "Fix PR22408 - LLVM producing AArch64 TLS relocations that GNU linkers cannot handle yet.\n\nAs is described at http://llvm.org/bugs/show_bug.cgi?id=22408, the GNU linkers\nld.bfd and ld.gold currently only support a subset of the whole range of AArch64\nELF TLS relocations. Furthermore, they assume that some of the code sequences to\naccess thread-local variables are produced in a very specific sequence.\nWhen the sequence is not as the linker expects, it can silently mis-relaxe/mis-optimize\nthe instructions.\nEven if that wouldn't be the case, it's good to produce the exact sequence,\nas that ensures that linkers can perform optimizing relaxations.\n\nThis patch:\n\n* implements support for 16MiB TLS area size instead of 4GiB TLS area size. Ideally clang\n  would grow an -mtls-size option to allow support for both, but that's not part of this patch.\n* by default doesn't produce local dynamic access patterns, as even modern ld.bfd and ld.gold\n  linkers do not support the associated relocations. An option (-aarch64-elf-ldtls-generation)\n  is added to enable generation of local dynamic code sequence, but is off by default.\n* makes sure that the exact expected code sequence for local dynamic and general dynamic\n  accesses is produced, by making use of a new pseudo instruction. The patch also removes\n  two (AArch64ISD::TLSDESC_BLR, AArch64ISD::TLSDESC_CALL) pre-existing AArch64-specific pseudo\n  SDNode instructions that are superseded by the new one (TLSDESC_CALLSEQ).\n\n", "modified": "M | /llvm/trunk/lib/Target/AArch64/AArch64AsmPrinter.cpp\nM | /llvm/trunk/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp\nM | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.cpp\nM | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.h\nM | /llvm/trunk/lib/Target/AArch64/AArch64InstrInfo.td\nM | /llvm/trunk/lib/Target/AArch64/AArch64MCInstLower.cpp\nM | /llvm/trunk/lib/Target/AArch64/Utils/AArch64BaseInfo.h\nM | /llvm/trunk/test/CodeGen/AArch64/arm64-tls-dynamics.ll\nM | /llvm/trunk/test/CodeGen/AArch64/arm64-tls-execs.ll\n"}, {"commit_id": "231972", "date": "2015-03-11T21:58:40.588056Z", "author": "joerg", "msg": "Always include stddef.h to make sure size_t exists.\n\nFrom Alexander Esilevich.\n", "modified": "M | /compiler-rt/trunk/lib/builtins/clear_cache.c\n"}, {"commit_id": "232579", "date": "2015-03-18T01:06:24.878446Z", "author": "nicholas", "msg": "Fix the LLVM type used when lowering initializer list reference temporaries to global variables. Reapplies r232454 with fix for PR22940.\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx0x-initializer-stdinitializerlist.cpp\n"}, {"commit_id": "232611", "date": "2015-03-18T04:15:23.210705Z", "author": "majnemer", "msg": "MSVC Compat: Permit char16_t, char32_t and _Atomic when targeting > 2013\n\nWe disabled support for _Atomic because the STL had name conflicts,\nthey've been resolved in 2015.  Similarly, reenable char16_t and\nchar32_t.", "modified": "M | /cfe/trunk/include/clang/Basic/TokenKinds.def\nM | /cfe/trunk/lib/Basic/IdentifierTable.cpp\nM | /cfe/trunk/test/SemaCXX/MicrosoftCompatibility.cpp\n"}, {"commit_id": "232651", "date": "2015-03-18T17:33:40.669351Z", "author": "rafael", "msg": "Handle X86::reloc_riprel_4byte in 32 bits mode.\n\nWe can get there with .code64.\n\nFixes pr22349.", "modified": "M | /llvm/trunk/lib/Target/X86/MCTargetDesc/X86ELFObjectWriter.cpp\nM | /llvm/trunk/test/MC/ELF/relocation-386.s\n"}, {"commit_id": "232680", "date": "2015-03-18T22:04:43.639155Z", "author": "majnemer", "msg": "MS ABI: Don't try to emit VF/VB-Tables for extern class templates\n\nThere will be an explicit template instantiation in another translation\nunit which will provide the definition of the VF/VB-Tables.\n\nThis fixes PR22932.", "modified": "M | /cfe/trunk/lib/AST/VTableBuilder.cpp\nM | /cfe/trunk/lib/CodeGen/CGVTables.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/CodeGen/MicrosoftCXXABI.cpp\nM | /cfe/trunk/test/CodeGenCXX/microsoft-abi-vbtables.cpp\nM | /cfe/trunk/test/CodeGenCXX/microsoft-abi-vftables.cpp\n"}, {"commit_id": "232839", "date": "2015-03-20T19:51:34.965695Z", "author": "dexonsmith", "msg": "Bugpoint: Fix invalid 'inlinedAt:' references in testcase\n\nThese are causing crashes in `DebugInfoFinder` after a WIP patch to\nincrease strictness of `DIDescriptor` accessors.", "modified": "M | /llvm/trunk/test/BugPoint/metadata.ll\n"}, {"commit_id": "233138", "date": "2015-03-24T23:46:25.211533Z", "author": "rnk", "msg": "Fix obviously broken assertion, NFC", "modified": "M | /cfe/trunk/lib/AST/RecordLayoutBuilder.cpp\n"}, {"commit_id": "233477", "date": "2015-03-28T09:34:40.749536Z", "author": "grosser", "msg": "Code generate parameters and run-time checks after branching new code region\n\nWhen creating parameters the SCEVexpander may introduce new induction variables,\nthat possibly create scalar dependences in the original scop, before we code\ngenerate the scop. The resulting scalar dependences may then inhibit correct\ncode generation of the scop. To prevent this, we first version the code without\na run-time check and only then introduce new parameters and the run-time\ncondition. The if-condition that guards the original scop from being modified by\nthe SCEVexpander.\n\nThis change causes some test case changes as the run-time conditions are now\nintroduced in the split basic block rather than in the entry basic block.\n\nThis fixes http://llvm.org/PR22069\n\nTest case reduced by: Karthik Senthil", "modified": "M | /polly/trunk/lib/CodeGen/IslCodeGeneration.cpp\nA | /polly/trunk/test/Isl/CodeGen/20150328-SCEVExpanderIntroducesNewIV.ll\nM | /polly/trunk/test/Isl/CodeGen/aliasing_different_pointer_types.ll\nM | /polly/trunk/test/Isl/CodeGen/multidim_2d_parametric_array_static_loop_bounds.ll\nM | /polly/trunk/test/Isl/CodeGen/run-time-condition-with-scev-parameters.ll\n"}, {"commit_id": "233749", "date": "2015-03-31T20:35:26.706634Z", "author": "hfinkel", "msg": "[SDAG] Handle non-integer preferred memset types for non-constant values\n\nThe existing code in getMemsetValue only handled integer-preferred types when\nthe fill value was not a constant. Make this more robust in two ways:\n\n  1. If the preferred type is a floating-point value, do the mul-splat trick on\n     the corresponding integer type and then bitcast.\n  2. If the preferred type is a vector, do the mul-splat trick on one vector\n     element, and then build a vector out of them.\n\nFixes PR22754 (although, we should also turn off use of vector types at -O0).", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAG.cpp\nA | /llvm/trunk/test/CodeGen/PowerPC/memset-nc-le.ll\nA | /llvm/trunk/test/CodeGen/PowerPC/memset-nc.ll\n"}, {"commit_id": "233755", "date": "2015-03-31T20:56:09.689511Z", "author": "hfinkel", "msg": "[PowerPC] Don't use a vector preferred memory type at -O0\n\nEven at -O0, we fall back to SDAG when we hit intrinsics, and if the intrinsic\nis a memset/memcpy/etc. we might normally use vector types. At -O0, this is\nprobably not a good idea (because, if there is a bug in the lowering code,\nthere would be no good way to turn it off). At -O0, only use scalar preferred\ntypes.\n\nRelated to PR22754.", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/PowerPC/memset-nc.ll\n"}, {"commit_id": "234493", "date": "2015-04-09T15:03:23.850719Z", "author": "spatel", "msg": "Process the -freciprocal-math optimization flag (PR20912)\n\nThe driver currently accepts but ignores the -freciprocal-math flag.\nThis patch passes the flag through and enables 'arcp' fast-math-flag\ngeneration in IR.\n\nNote that this change does not actually enable the optimization for\nany target. The reassociation optimization that this flag specifies\nwas implemented by http://reviews.llvm.org/D6334 :\nhttp://llvm.org/viewvc/llvm-project?view=revision&revision=222510\n\nBecause the optimization is done in the backend rather than IR,\nthe backend must be modified to understand instruction-level\nfast-math-flags or a new function-level attribute must be created.\n\nAlso note that -freciprocal-math is independent of any target-specific\nusage of reciprocal estimate hardware instructions. That requires\nits own flag ('-mrecip').\n\nhttps://llvm.org/bugs/show_bug.cgi?id=20912\n", "modified": "M | /cfe/trunk/include/clang/Driver/Options.td\nM | /cfe/trunk/include/clang/Frontend/CodeGenOptions.def\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.cpp\nM | /cfe/trunk/lib/Driver/Tools.cpp\nM | /cfe/trunk/lib/Frontend/CompilerInvocation.cpp\nM | /cfe/trunk/test/CodeGen/finite-math.c\nM | /cfe/trunk/test/Driver/fast-math.c\n"}, {"commit_id": "234638", "date": "2015-04-10T21:07:09.491344Z", "author": "sanjoy", "msg": "[InstCombine][CodeGenPrep] Create llvm.uadd.with.overflow in CGP.\n\nSummary:\nThis change moves creating calls to `llvm.uadd.with.overflow` from\nInstCombine to CodeGenPrep.  Combining overflow check patterns into\ncalls to the said intrinsic in InstCombine inhibits optimization because\nit introduces an intrinsic call that not all other transforms and\nanalyses understand.\n\nDepends on D8888.\n\nReviewers: majnemer, atrick\n\nSubscribers: llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D8889", "modified": "M | /llvm/trunk/include/llvm/IR/PatternMatch.h\nM | /llvm/trunk/lib/CodeGen/CodeGenPrepare.cpp\nM | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCompares.cpp\nM | /llvm/trunk/test/CodeGen/X86/add-of-carry.ll\nA | /llvm/trunk/test/Transforms/CodeGenPrepare/overflow-intrinsics.ll\nM | /llvm/trunk/test/Transforms/InstCombine/overflow.ll\n"}, {"commit_id": "234786", "date": "2015-04-13T20:01:20.825205Z", "author": "nico", "msg": "Revert r234613 (and follow-ups 234614, 234616, 234618), it caused PR23216.", "modified": "M | /cfe/trunk/include/clang/AST/Mangle.h\nM | /cfe/trunk/include/clang/Basic/Attr.td\nM | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/include/clang/Sema/AttributeList.h\nM | /cfe/trunk/lib/AST/ItaniumMangle.cpp\nM | /cfe/trunk/lib/AST/MicrosoftMangle.cpp\nM | /cfe/trunk/lib/CodeGen/CGException.cpp\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/Driver/SanitizerArgs.cpp\nM | /cfe/trunk/test/CodeGen/exceptions-seh-finally.c\nM | /cfe/trunk/test/CodeGen/exceptions-seh-leave.c\nM | /cfe/trunk/test/CodeGen/exceptions-seh.c\nM | /cfe/trunk/test/CodeGenCXX/exceptions-seh.cpp\nM | /cfe/trunk/test/SemaCXX/switch-implicit-fallthrough.cpp\n"}, {"commit_id": "234789", "date": "2015-04-13T20:04:22.960389Z", "author": "nico", "msg": "Revert r234613 (and follow-ups 234614, 234616, 234618), it caused PR23216.", "modified": "M | /cfe/trunk/include/clang/AST/Mangle.h\nM | /cfe/trunk/lib/AST/ItaniumMangle.cpp\nM | /cfe/trunk/lib/AST/MicrosoftMangle.cpp\nM | /cfe/trunk/lib/CodeGen/CGException.cpp\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/test/CodeGen/exceptions-seh-finally.c\nM | /cfe/trunk/test/CodeGen/exceptions-seh-leave.c\nM | /cfe/trunk/test/CodeGen/exceptions-seh.c\nM | /cfe/trunk/test/CodeGenCXX/exceptions-seh.cpp\n"}, {"commit_id": "234937", "date": "2015-04-14T20:38:14.170732Z", "author": "rnk", "msg": "[Inliner] Don't inline functions with frameescape calls\n\nInlining such intrinsics is very difficult, since you need to\nsimultaneously transform many calls to llvm.framerecover and potentially\nduplicate the functions containing them.  Normally this intrinsic isn't\nadded until EH preparation, which is part of the backend pass pipeline\nafter inlining.  However, if it were to get fed through the inliner,\nthis change will ensure that it doesn't break the code.", "modified": "M | /llvm/trunk/lib/Analysis/IPA/InlineCost.cpp\nA | /llvm/trunk/test/Transforms/Inline/frameescape.ll\n"}, {"commit_id": "234942", "date": "2015-04-14T20:59:00.936707Z", "author": "rnk", "msg": "Reland r234613 (and follow-ups 234614, 234616, 234618)\n\nThe frameescape intrinsic cannot be inlined, so I fixed the inliner in\nr234937. This should address PR23216.", "modified": "M | /cfe/trunk/include/clang/AST/Mangle.h\nM | /cfe/trunk/lib/AST/ItaniumMangle.cpp\nM | /cfe/trunk/lib/AST/MicrosoftMangle.cpp\nM | /cfe/trunk/lib/CodeGen/CGException.cpp\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/test/CodeGen/exceptions-seh-finally.c\nM | /cfe/trunk/test/CodeGen/exceptions-seh-leave.c\nM | /cfe/trunk/test/CodeGen/exceptions-seh.c\nM | /cfe/trunk/test/CodeGenCXX/exceptions-seh.cpp\n"}, {"commit_id": "235232", "date": "2015-04-17T22:20:57.245542Z", "author": "ab", "msg": "[MemCpyOpt] Optimize double-storing by memset+memcpy.\n\nA common idiom in some code is to do the following:\n\n  memset(dst, 0, dst_size);\n  memcpy(dst, src, src_size);\n\nSome of the memset is redundant; instead, we can do:\n\n  memcpy(dst, src, src_size);\n  memset(dst + src_size, 0,\n         dst_size <= src_size ? 0 : dst_size - src_size);\n\nOriginal patch by: Joel Jones\nDifferential Revision: http://reviews.llvm.org/D498\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/MemCpyOptimizer.cpp\nA | /llvm/trunk/test/Transforms/MemCpyOpt/memset-memcpy-redundant-memset.ll\n"}, {"commit_id": "235243", "date": "2015-04-17T23:43:33.637529Z", "author": "ab", "msg": "[AArch64] Don't force MVT::Untyped when selecting LD1LANEpost.\n\nThe result is either an Untyped reg sequence, on ldN with N > 1, or\njust the type of the input vector, on ld1.  Don't force Untyped.\nInstead, just use the type of the reg sequence.\n\nThis mirrors the behavior of createTuple, which feeds the LD1*_POST.\n\nThe narrow code path wasn't actually covered by tests, because V64\ninsert_vector_elt are widened to V128 before the LD1LANEpost combine\nhas the chance to run, usually.\n\nThe only case where it does run on V64 vectors is if the vector ops\nlegalizer ran.  So, tickle the code with a ctpop.\n\nFixes PR23265.\n", "modified": "M | /llvm/trunk/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp\nM | /llvm/trunk/test/CodeGen/AArch64/arm64-indexed-vector-ldst.ll\n"}, {"commit_id": "235921", "date": "2015-04-27T21:27:54.962799Z", "author": "rsmith", "msg": "PR23334: Perform semantic checking of lambda capture initialization in the right context.\n\nPreviously we'd try to perform checks on the captures from the middle of\nparsing the lambda's body, at the point where we detected that a variable\nneeded to be captured. This was wrong in a number of subtle ways. In\nPR23334, we couldn't correctly handle the list of potential odr-uses\nresulting from the capture, and our attempt to recover from that resulted\nin a use-after-free.\n\nWe now defer building the initialization expression until we leave the lambda\nbody and return to the enclosing context, where the initialization does the\nright thing. This patch only covers lambda-expressions, but we should apply\nthe same change to blocks and captured statements too.\n", "modified": "M | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Analysis/UninitializedValues.cpp\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaLambda.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiate.cpp\nM | /cfe/trunk/lib/Sema/TreeTransform.h\nM | /cfe/trunk/test/CXX/expr/expr.prim/expr.prim.lambda/p2.cpp\nM | /cfe/trunk/test/CXX/expr/expr.prim/expr.prim.lambda/templates.cpp\nA | /cfe/trunk/test/SemaCXX/PR23334.cpp\nM | /cfe/trunk/test/SemaCXX/cxx1y-generic-lambdas.cpp\nM | /cfe/trunk/test/SemaCXX/uninitialized.cpp\n"}, {"commit_id": "236551", "date": "2015-05-05T22:51:35.753293Z", "author": "eugenis", "msg": "[asan] Use a version script to limit the symbols exported by the ASan shared runtime library.\n", "modified": "M | /compiler-rt/trunk/cmake/Modules/SanitizerUtils.cmake\nM | /compiler-rt/trunk/lib/asan/CMakeLists.txt\nM | /compiler-rt/trunk/lib/sanitizer_common/scripts/gen_dynamic_list.py\n"}, {"commit_id": "236603", "date": "2015-05-06T14:53:50.849689Z", "author": "djasper", "msg": "clang-format: Allow ternary expressions inside template parameters if\nthe template parameters aren't inside an expression context.\n\nThis fixes llvm.org/PR23270.", "modified": "M | /cfe/trunk/lib/Format/TokenAnnotator.cpp\nM | /cfe/trunk/unittests/Format/FormatTest.cpp\n"}, {"commit_id": "236670", "date": "2015-05-06T23:49:14.070520Z", "author": "dblaikie", "msg": "[opaque pointer type] Pass explicit pointer type through GEP constant folding", "modified": "M | /llvm/trunk/lib/IR/ConstantFold.cpp\nM | /llvm/trunk/lib/IR/ConstantFold.h\nM | /llvm/trunk/lib/IR/Constants.cpp\nM | /llvm/trunk/lib/Transforms/IPO/GlobalOpt.cpp\n"}, {"commit_id": "237066", "date": "2015-05-11T23:09:46.797655Z", "author": "ab", "msg": "[MemCpyOpt] Look at any dependency -not just source- for memset+memcpy.\n\nThis fixes another miscompile introduced by r235232: when there was a\ndependency on the memcpy destination other than the memset, we would\nignore it, because we only looked at the source dependency.\n\nIt was a mistake to use SrcDepInfo.  Instead, just use DepInfo.\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/MemCpyOptimizer.cpp\nM | /llvm/trunk/test/Transforms/MemCpyOpt/memset-memcpy-redundant-memset.ll\n"}, {"commit_id": "237175", "date": "2015-05-12T20:56:32.517856Z", "author": "rnk", "msg": "[X86] Always return the sret parameter in eax/rax, even on 32-bit\n\nSummary:\nThis rule was always in the old SysV i386 ABI docs and the new ones that\nH.J. Lu has put together, but we never noticed:\n\n  EAX   scratch register; also used to return integer and pointer values\n        from functions; also stores the address of a returned struct or union\n\nFixes PR23491.\n\nReviewers: majnemer\n\nSubscribers: llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D9715", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/cmovcmov.ll\nM | /llvm/trunk/test/CodeGen/X86/sret-implicit.ll\n"}, {"commit_id": "237621", "date": "2015-05-18T22:07:20.496126Z", "author": "tnorthover", "msg": "AArch64: work around ld64 bug more aggressively.\n\nld64 currently mishandles internal pointer relocations (i.e.\nARM64_RELOC_UNSIGNED referred to by section & offset rather than symbol). The\nexisting __cfstring clause was an early discovery and workaround for this, but\nthe problem is wider and we should avoid such relocations wherever possible for\nnow.\n\nThis code should be reverted to allowing internal relocations as soon as\npossible.\n\nPR23437.", "modified": "M | /llvm/trunk/lib/Target/AArch64/MCTargetDesc/AArch64MachObjectWriter.cpp\nD | /llvm/trunk/test/MC/MachO/AArch64/cfstring.s\nA | /llvm/trunk/test/MC/MachO/AArch64/ld64-workaround.s\nM | /llvm/trunk/test/MC/MachO/AArch64/mergeable.s\n"}, {"commit_id": "237630", "date": "2015-05-18T22:46:30.360331Z", "author": "rnk", "msg": "Revert changes to DefaultABIInfo accidentally introduced in r208733\n\nAlso add trivial handling of transparent unions.\n\nPPC32, MSP430, and XCore apparently all rely on DefaultABIInfo. This\nshould worry you, because DefaultABIInfo is not implementing the rules\nof any particular ABI.\n\nFixes PR23097, patch by Andy Gibbs.", "modified": "M | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nA | /cfe/trunk/test/CodeGenCXX/powerpc-byval.cpp\n"}, {"commit_id": "237639", "date": "2015-05-18T23:35:09.047813Z", "author": "rnk", "msg": "Re-land r237175: [X86] Always return the sret parameter in eax/rax ...\n\nThis reverts commit r237210.\n\nAlso fix X86/complex-fca.ll to match the code that we used to generate\non win32 and now generate everwhere to conform to SysV.", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/cmovcmov.ll\nM | /llvm/trunk/test/CodeGen/X86/complex-fca.ll\nM | /llvm/trunk/test/CodeGen/X86/sret-implicit.ll\n"}, {"commit_id": "237682", "date": "2015-05-19T11:06:56.231072Z", "author": "mkuper", "msg": "[X86] ABI change for x86-32: pass 3 vector arguments in-register instead of 4, except on Darwin.\n\nThis changes the ABI used on 32-bit x86 for passing vector arguments. \nHistorically, clang passes the first 4 vector arguments in-register, and additional vector arguments on the stack, regardless of platform. That is different from the behavior of gcc, icc, and msvc, all of which pass only the first 3 arguments in-register.\nThe 3-register convention is documented, unofficially, in Agner's calling convention guide, and, officially, in the recently released version 1.0 of the i386 psABI.\n\nDarwin is kept as is because the OS X ABI Function Call Guide explicitly documents the current (4-register) behavior.\n\nThis fixes PR21510\n\nDifferential revision: http://reviews.llvm.org/D9644", "modified": "M | /llvm/trunk/lib/Target/X86/X86CallingConv.td\nM | /llvm/trunk/test/CodeGen/X86/fp-trunc.ll\nM | /llvm/trunk/test/CodeGen/X86/illegal-vector-args-return.ll\nA | /llvm/trunk/test/CodeGen/X86/x86-32-vector-calling-conv.ll\n"}, {"commit_id": "237769", "date": "2015-05-20T04:24:19.095215Z", "author": "abataev", "msg": "[OPENMP] -fopenmp enables OpenMP support (fix for http://llvm.org/PR23492)\n\n-fopenmp turns on OpenMP support and links libiomp5 as OpenMP library. Also there is -fopenmp={libiomp5|libgomp} option that allows to override effect of -fopenmp and link libgomp library (if -fopenmp=libgomp is specified).\nDifferential Revision: http://reviews.llvm.org/D9736\n", "modified": "M | /cfe/trunk/include/clang/Driver/Options.td\nM | /cfe/trunk/lib/Driver/Tools.cpp\nM | /cfe/trunk/lib/Frontend/CompilerInvocation.cpp\nM | /cfe/trunk/test/OpenMP/atomic_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/atomic_capture_codegen.cpp\nM | /cfe/trunk/test/OpenMP/atomic_codegen.cpp\nM | /cfe/trunk/test/OpenMP/atomic_messages.c\nM | /cfe/trunk/test/OpenMP/atomic_messages.cpp\nM | /cfe/trunk/test/OpenMP/atomic_read_codegen.c\nM | /cfe/trunk/test/OpenMP/atomic_update_codegen.cpp\nM | /cfe/trunk/test/OpenMP/atomic_write_codegen.c\nM | /cfe/trunk/test/OpenMP/barrier_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/barrier_codegen.cpp\nM | /cfe/trunk/test/OpenMP/barrier_messages.cpp\nM | /cfe/trunk/test/OpenMP/critical_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/critical_codegen.cpp\nM | /cfe/trunk/test/OpenMP/critical_messages.cpp\nM | /cfe/trunk/test/OpenMP/flush_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/flush_codegen.cpp\nM | /cfe/trunk/test/OpenMP/flush_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/for_codegen.cpp\nM | /cfe/trunk/test/OpenMP/for_collapse_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_firstprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/for_firstprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_lastprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/for_lastprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_loop_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_misc_messages.c\nM | /cfe/trunk/test/OpenMP/for_private_codegen.cpp\nM | /cfe/trunk/test/OpenMP/for_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_reduction_codegen.cpp\nM | /cfe/trunk/test/OpenMP/for_reduction_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_schedule_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_aligned_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_collapse_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_firstprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_lastprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_linear_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_loop_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_misc_messages.c\nM | /cfe/trunk/test/OpenMP/for_simd_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_reduction_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_safelen_messages.cpp\nM | /cfe/trunk/test/OpenMP/for_simd_schedule_messages.cpp\nM | /cfe/trunk/test/OpenMP/linking.c\nM | /cfe/trunk/test/OpenMP/master_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/master_codegen.cpp\nM | /cfe/trunk/test/OpenMP/master_messages.cpp\nM | /cfe/trunk/test/OpenMP/nesting_of_regions.cpp\nM | /cfe/trunk/test/OpenMP/openmp_common.c\nM | /cfe/trunk/test/OpenMP/ordered_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/ordered_codegen.cpp\nM | /cfe/trunk/test/OpenMP/ordered_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/parallel_codegen.cpp\nM | /cfe/trunk/test/OpenMP/parallel_copyin_codegen.cpp\nM | /cfe/trunk/test/OpenMP/parallel_copyin_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_default_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_firstprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/parallel_firstprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_codegen.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_collapse_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_copyin_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_default_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_firstprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_if_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_lastprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_loop_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_misc_messages.c\nM | /cfe/trunk/test/OpenMP/parallel_for_num_threads_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_proc_bind_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_reduction_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_schedule_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_aligned_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_collapse_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_copyin_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_default_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_firstprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_if_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_lastprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_linear_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_loop_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_misc_messages.c\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_num_threads_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_proc_bind_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_reduction_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_safelen_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_for_simd_schedule_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_if_codegen.cpp\nM | /cfe/trunk/test/OpenMP/parallel_if_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_num_threads_codegen.cpp\nM | /cfe/trunk/test/OpenMP/parallel_num_threads_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_private_codegen.cpp\nM | /cfe/trunk/test/OpenMP/parallel_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_proc_bind_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_reduction_codegen.cpp\nM | /cfe/trunk/test/OpenMP/parallel_reduction_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_codegen.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_copyin_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_default_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_firstprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_if_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_lastprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_misc_messages.c\nM | /cfe/trunk/test/OpenMP/parallel_sections_num_threads_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_proc_bind_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_reduction_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_sections_shared_messages.cpp\nM | /cfe/trunk/test/OpenMP/parallel_shared_messages.cpp\nM | /cfe/trunk/test/OpenMP/predefined_macro.c\nM | /cfe/trunk/test/OpenMP/sections_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/sections_codegen.cpp\nM | /cfe/trunk/test/OpenMP/sections_firstprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/sections_firstprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/sections_lastprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/sections_lastprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/sections_misc_messages.c\nM | /cfe/trunk/test/OpenMP/sections_private_codegen.cpp\nM | /cfe/trunk/test/OpenMP/sections_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/sections_reduction_codegen.cpp\nM | /cfe/trunk/test/OpenMP/sections_reduction_messages.cpp\nM | /cfe/trunk/test/OpenMP/simd_aligned_messages.cpp\nM | /cfe/trunk/test/OpenMP/simd_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/simd_codegen.cpp\nM | /cfe/trunk/test/OpenMP/simd_collapse_messages.cpp\nM | /cfe/trunk/test/OpenMP/simd_lastprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/simd_linear_messages.cpp\nM | /cfe/trunk/test/OpenMP/simd_loop_messages.cpp\nM | /cfe/trunk/test/OpenMP/simd_metadata.c\nM | /cfe/trunk/test/OpenMP/simd_misc_messages.c\nM | /cfe/trunk/test/OpenMP/simd_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/simd_reduction_messages.cpp\nM | /cfe/trunk/test/OpenMP/simd_safelen_messages.cpp\nM | /cfe/trunk/test/OpenMP/single_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/single_codegen.cpp\nM | /cfe/trunk/test/OpenMP/single_copyprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/single_firstprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/single_firstprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/single_misc_messages.c\nM | /cfe/trunk/test/OpenMP/single_private_codegen.cpp\nM | /cfe/trunk/test/OpenMP/single_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/target_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/target_if_messages.cpp\nM | /cfe/trunk/test/OpenMP/target_messages.cpp\nM | /cfe/trunk/test/OpenMP/task_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/task_codegen.cpp\nM | /cfe/trunk/test/OpenMP/task_default_messages.cpp\nM | /cfe/trunk/test/OpenMP/task_final_messages.cpp\nM | /cfe/trunk/test/OpenMP/task_firstprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/task_firstprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/task_if_codegen.cpp\nM | /cfe/trunk/test/OpenMP/task_if_messages.cpp\nM | /cfe/trunk/test/OpenMP/task_messages.cpp\nM | /cfe/trunk/test/OpenMP/task_private_codegen.cpp\nM | /cfe/trunk/test/OpenMP/task_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/task_shared_messages.cpp\nM | /cfe/trunk/test/OpenMP/taskwait_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/taskwait_codegen.cpp\nM | /cfe/trunk/test/OpenMP/taskwait_messages.cpp\nM | /cfe/trunk/test/OpenMP/taskyield_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/taskyield_codegen.cpp\nM | /cfe/trunk/test/OpenMP/taskyield_messages.cpp\nM | /cfe/trunk/test/OpenMP/teams_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/teams_default_messages.cpp\nM | /cfe/trunk/test/OpenMP/teams_firstprivate_messages.cpp\nM | /cfe/trunk/test/OpenMP/teams_messages.cpp\nM | /cfe/trunk/test/OpenMP/teams_private_messages.cpp\nM | /cfe/trunk/test/OpenMP/teams_reduction_messages.cpp\nM | /cfe/trunk/test/OpenMP/teams_shared_messages.cpp\nM | /cfe/trunk/test/OpenMP/threadprivate_ast_print.cpp\nM | /cfe/trunk/test/OpenMP/threadprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/threadprivate_messages.cpp\nM | /cfe/trunk/test/PCH/chain-openmp-threadprivate.cpp\n"}, {"commit_id": "237828", "date": "2015-05-20T20:10:26.177345Z", "author": "d0k", "msg": "[X86] Remove unused node after morphing it from shr to and.\n\nIn some cases it won't get cleaned up properly leading to crashes\ndownstream. PR23353.\n\nBased on a patch by Davide Italiano.", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/cmp.ll\n"}, {"commit_id": "237843", "date": "2015-05-20T22:31:55.350064Z", "author": "hans", "msg": "Revert r237828 \"[X86] Remove unused node after morphing it from shr to and.\"\n\nThis caused assertions during DAG combine: PR23601.", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/cmp.ll\n"}, {"commit_id": "237858", "date": "2015-05-20T23:55:16.602255Z", "author": "ab", "msg": "[MemCpyOpt] Don't move the memset when optimizing memset+memcpy.\n\nFixes PR23599, another miscompile introduced by r235232: when there is\nanother dependency on the destination of the created memset (i.e., the\npart of the original destination that the memcpy doesn't depend on)\nbetween the memcpy and the original memset, we would insert the created\nmemset after the memcpy, and thus after the other dependency.\n\nInstead, insert the created memset right after the old one.\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/MemCpyOptimizer.cpp\nM | /llvm/trunk/test/Transforms/MemCpyOpt/memset-memcpy-redundant-memset.ll\n"}, {"commit_id": "238351", "date": "2015-05-27T19:34:01.646201Z", "author": "dnovillo", "msg": "Final fix for PR 23499 and IR test case.\n\nThis fixes a bit I forgot in r238335. In addition to the data record and\nthe counter, we can also move the name of the counter to the comdat for\nthe associated function.\n\nI'm also adding an IR test case to check that these three elements are\nplaced in the proper comdat.", "modified": "M | /llvm/trunk/lib/Transforms/Instrumentation/InstrProfiling.cpp\nA | /llvm/trunk/test/Instrumentation/InstrProfiling/PR23499.ll\n"}, {"commit_id": "238367", "date": "2015-05-27T22:38:01.796080Z", "author": "eugenis", "msg": "[asan] Fix build dependency issues with ASan version list file.\n\nCMake pre-3.1 has a bug where a shared library depending on a custom_target\ndoes not really depend on it.\n\nThis commit implements a hilariously ugly workaround for this problem, see\ncode comments for more details.\n", "modified": "M | /compiler-rt/trunk/lib/asan/CMakeLists.txt\n"}, {"commit_id": "238861", "date": "2015-06-02T19:34:40.458695Z", "author": "adibiagio", "msg": "[x86-64 ABI] Fix for PR23082: an assertion failure when passing/returning a wrapper union in a full YMM register.\n\nThis patch fixes an assertion failure in method\n'X86_64ABIInfo::GetByteVectorType'.\n\nMethod 'GetByteVectorType' (in TargetInfo.cpp) is responsible\nfor mapping a QualType 'Ty' (for an argument or return value) to an LLVM IR\ntype that, according to the ABI, must be passed in a XMM/YMM vector register.\n\nWhen selecting the IR vector type, method 'GetByteVectorType' always tries to\nchoose the \"best\" IR vector type for the 'Ty' in input. In particular, if Ty\nis a wrapper structure, it keeps unwrapping it until it finds a vector type VTy.\nThat VTy is the \"preferred IR type\".\n\nHowever, function 'isSingleElementStructure' (used to unwrap structures) does\nnot know how to look through union types. So, before this patch, if Ty was in\na nest of wrapper structures with at least two union types, we would have\ntriggered an assertion failure (added at revision 230971).\n\nWith this patch, if method 'GetByteVectorType' fails to find the preferred\nvector type, we just return a valid (although potentially 'less friendly')\nvector type based on the type size. So, rather than asserting on an 'unexpected'\n'Ty' in input, we conservatively return vector type <2 x double> if Ty is 16\nbytes, or <4 x double> if Ty is 32 bytes.\n\nDifferential Revision: http://reviews.llvm.org/D10190\n", "modified": "M | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nM | /cfe/trunk/test/CodeGenCXX/x86_64-arguments-avx.cpp\n"}, {"commit_id": "239015", "date": "2015-06-04T07:01:56.883421Z", "author": "majnemer", "msg": "[ConstantFold] Don't skip the first gep index when folding geps\n\nWe neglected to check if the first index made the GEP ineligible for\n'inbounds'.\n\nThis fixes PR23753.", "modified": "M | /llvm/trunk/lib/IR/ConstantFold.cpp\nA | /llvm/trunk/test/Transforms/LoopStrengthReduce/pr23753.ll\n"}, {"commit_id": "239309", "date": "2015-06-08T16:56:23.893889Z", "author": "matze", "msg": "X86: Reject register operands with obvious type mismatches.\n\nWhile we have some code to transform specification like {ax} into\n{eax}/{rax} if the operand type isn't 16bit, we should reject cases\nwhere there is no sane way to do this, like the i128 type in the\nexample.\n\nRelated to rdar://21042280\n\nDifferential Revision: http://reviews.llvm.org/D10260", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nA | /llvm/trunk/test/CodeGen/X86/asm-reject-reg-type-mismatch.ll\n"}, {"commit_id": "239577", "date": "2015-06-12T00:41:34.434842Z", "author": "ericwf", "msg": "Fix PR23293 - Do not unlock shared state before notifying consumers.\n\nWithin the shared state methods do not unlock the lock guards manually. This\ncould cause a race condition where the shared state is destroyed before the\nmethod is complete.\n", "modified": "M | /libcxx/trunk/include/future\nM | /libcxx/trunk/src/future.cpp\nA | /libcxx/trunk/test/std/thread/futures/futures.async/async_race.pass.cpp\n"}, {"commit_id": "239639", "date": "2015-06-12T21:23:23.883630Z", "author": "hans", "msg": "[ms] Don't try to delay lookup for failures in SFINAE context (PR23823)\n\nThe underlying problem in PR23823 already existed before my recent change\nin r239558, but that change made it worse (failing not only for undeclared\nsymbols, but also failed overload resolution). This makes Clang not try to\ndelay the lookup in SFINAE context. I assume no current code is relying on\nSFINAE working with lookups that need to be delayed, because that never\nseems to have worked.\n\nDifferential Revision: http://reviews.llvm.org/D10417", "modified": "M | /cfe/trunk/lib/Sema/SemaOverload.cpp\nM | /cfe/trunk/test/SemaTemplate/ms-lookup-template-base-classes.cpp\n"}, {"commit_id": "239843", "date": "2015-06-16T19:10:58.173420Z", "author": "dnovillo", "msg": "Fix PR 23525 - Separate header mass propagation in irregular loops.\n\nSummary:\nWhen propagating mass through irregular loops, the mass flowing through\neach loop header may not be equal. This was causing wrong frequencies\nto be computed for irregular loop headers.\n\nFixed by keeping track of masses flowing through each of the headers in\nan irregular loop. To do this, we now keep track of per-header backedge\nweights. After the loop mass is distributed through the loop, the\nbackedge weights are used to re-distribute the loop mass to the loop\nheaders.\n\nSince each backedge will have a mass proportional to the different\nbranch weights, the loop headers will end up with a more approximate\nweight distribution (as opposed to the current distribution that assumes\nthat every loop header is the same).\n\nReviewers: dexonsmith\n\nSubscribers: llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D10348", "modified": "M | /llvm/trunk/include/llvm/Analysis/BlockFrequencyInfoImpl.h\nM | /llvm/trunk/lib/Analysis/BlockFrequencyInfoImpl.cpp\nA | /llvm/trunk/test/Analysis/BlockFrequencyInfo/PR23525.ll\nM | /llvm/trunk/test/Analysis/BlockFrequencyInfo/irreducible.ll\n"}, {"commit_id": "239953", "date": "2015-06-17T22:07:28.051856Z", "author": "samsonov", "msg": "[Sanitizers] Provide better diagnostic for sanitizers unsupported for target triple.\n\nSummary:\nIntroduce ToolChain::getSupportedSanitizers() that would return the set\nof sanitizers available on given toolchain. By default, these are\nsanitizers which don't necessarily require runtime support (i.e.\nset from -fsanitize=undefined-trap).\n\nSanitizers (ASan, DFSan, TSan, MSan etc.) which cannot function\nwithout runtime library are marked as supported only on platforms\nfor which we actually build these runtimes.\n\nThis would allow more fine-grained checks in the future: for instance,\nwe have to restrict availability of -fsanitize=vptr to Mac OS 10.9+\n(PR23539)\n\nUpdate test cases accrodingly: add tests for certain unsupported\nconfigurations, remove test cases for -fsanitize=vptr + PS4\nintegration, as we don't build the runtime for PS4 at the moment.\n\nTest Plan: regression test suite\n\nReviewers: pcc\n\nSubscribers: cfe-commits, filcab, eugenis, thakis, kubabrecka, emaste, rsmith\n\nDifferential Revision: http://reviews.llvm.org/D10467", "modified": "M | /cfe/trunk/include/clang/Basic/Sanitizers.h\nM | /cfe/trunk/include/clang/Driver/ToolChain.h\nM | /cfe/trunk/lib/Basic/Sanitizers.cpp\nM | /cfe/trunk/lib/Driver/MSVCToolChain.cpp\nM | /cfe/trunk/lib/Driver/SanitizerArgs.cpp\nM | /cfe/trunk/lib/Driver/ToolChains.cpp\nM | /cfe/trunk/lib/Driver/ToolChains.h\nM | /cfe/trunk/test/Driver/asan.c\nM | /cfe/trunk/test/Driver/fsanitize.c\nM | /cfe/trunk/test/Driver/rtti-options.cpp\n"}, {"commit_id": "240030", "date": "2015-06-18T17:17:32.162204Z", "author": "tberghammer", "msg": "Add new test for stress testing stack unwinding\n\nThis test case generates new tests from the source files dropped into\nits directory. For stress testing stack unwinding it steps through the\ncode line by line and then tests unwinding from each instruction.", "modified": "A | /lldb/trunk/test/functionalities/unwind/standard\nA | /lldb/trunk/test/functionalities/unwind/standard/Makefile\nA | /lldb/trunk/test/functionalities/unwind/standard/TestStandardUnwind.py\nA | /lldb/trunk/test/functionalities/unwind/standard/hand_written\nA | /lldb/trunk/test/functionalities/unwind/standard/hand_written/fprintf.cpp\nA | /lldb/trunk/test/functionalities/unwind/standard/hand_written/new_delete.cpp\n"}, {"commit_id": "240104", "date": "2015-06-18T23:45:51.833878Z", "author": "kfischer", "msg": "Don't link ObjCARCOpts twice. Fixes PR22543\n\nObjCARCOpts is already included by ClangCodeGen. Linking it again causes the error in PR22543.\n\nDifferential Revision: http://reviews.llvm.org/D10399", "modified": "M | /lldb/trunk/lib/Makefile\nM | /lldb/trunk/tools/lldb-server/Makefile\n"}, {"commit_id": "240130", "date": "2015-06-19T12:16:55.785094Z", "author": "rafael", "msg": "Make all temporary symbols unnamed.\n\nWhat this does is make all symbols that would otherwise start with a .L\n(or L on MachO) unnamed.\n\nSome of these symbols still show up in the symbol table, but we can just\nmake them unnamed.\n\nIn order to make sure we produce identical results when going thought assembly,\nall .L (not just the compiler produced ones), are now unnamed.\n\nRunning llc on llvm-as.opt.bc, the peak memory usage goes from 208.24MB to\n205.57MB.", "modified": "M | /llvm/trunk/include/llvm/MC/MCContext.h\nM | /llvm/trunk/lib/MC/ELFObjectWriter.cpp\nM | /llvm/trunk/lib/MC/MCContext.cpp\nM | /llvm/trunk/lib/MC/MachObjectWriter.cpp\nM | /llvm/trunk/test/CodeGen/SPARC/obj-relocs.ll\nM | /llvm/trunk/test/MC/ARM/elf-reloc-02.s\nM | /llvm/trunk/test/MC/ELF/basic-elf-32.s\nM | /llvm/trunk/test/MC/ELF/compression.s\nM | /llvm/trunk/test/MC/ELF/discriminator.s\nM | /llvm/trunk/test/MC/ELF/merge.s\nM | /llvm/trunk/test/MC/ELF/relocation-386.s\nA | /llvm/trunk/test/MC/ELF/undef-temp.s\nM | /llvm/trunk/test/MC/ELF/undef.s\nD | /llvm/trunk/test/MC/ELF/undef2.s\nM | /llvm/trunk/test/MC/MachO/AArch64/classrefs.s\nM | /llvm/trunk/test/MC/MachO/AArch64/darwin-ARM64-reloc.s\nM | /llvm/trunk/test/MC/MachO/AArch64/ld64-workaround.s\nM | /llvm/trunk/test/MC/MachO/AArch64/mergeable.s\nM | /llvm/trunk/test/MC/MachO/AArch64/reloc-crash.s\nM | /llvm/trunk/test/MC/MachO/x86_64-mergeable.s\nM | /llvm/trunk/test/MC/MachO/x86_64-symbols.s\nM | /llvm/trunk/test/MC/Mips/cpsetup.s\nM | /llvm/trunk/test/MC/Mips/elf-relsym.s\nM | /llvm/trunk/test/MC/Mips/xgot.s\nM | /llvm/trunk/test/MC/Sparc/sparc-pic.s\n"}, {"commit_id": "240179", "date": "2015-06-19T21:36:47.115761Z", "author": "samsonov", "msg": "[Sanitizers] Provide better diagnostic for sanitizers unsupported for target triple.\n\nIntroduce ToolChain::getSupportedSanitizers() that would return the set\nof sanitizers available on given toolchain. By default, these are\nsanitizers which don't necessarily require runtime support and are\nnot toolchain- or architecture-dependent.\n\nSanitizers (ASan, DFSan, TSan, MSan etc.) which cannot function\nwithout runtime library are marked as supported only on platforms\nfor which we actually build these runtimes.\n\nThis would allow more fine-grained checks in the future: for instance,\nwe have to restrict availability of -fsanitize=vptr to Mac OS 10.9+\n(PR23539).\n\nUpdate test cases accrodingly: add tests for certain unsupported\nconfigurations, remove test cases for -fsanitize=vptr + PS4\nintegration, as we don't build the runtime for PS4 at the moment.\n\nThis change was first submitted as r239953 and reverted in r239958.\nThe problem was and still is in Darwin toolchains, which get the\nknowledge about target platform too late after initializaition, while\nnow we require this information when ToolChain::getSanitizerArgs() is\ncalled. r240170 works around this issue.", "modified": "M | /cfe/trunk/include/clang/Driver/ToolChain.h\nM | /cfe/trunk/lib/Driver/MSVCToolChain.cpp\nM | /cfe/trunk/lib/Driver/SanitizerArgs.cpp\nM | /cfe/trunk/lib/Driver/ToolChain.cpp\nM | /cfe/trunk/lib/Driver/ToolChains.cpp\nM | /cfe/trunk/lib/Driver/ToolChains.h\nM | /cfe/trunk/test/Driver/fsanitize.c\nM | /cfe/trunk/test/Driver/rtti-options.cpp\n"}, {"commit_id": "240193", "date": "2015-06-19T23:43:47.408504Z", "author": "nico", "msg": "Revert 240130, it caused crashes (repro in PR23900).", "modified": "M | /llvm/trunk/include/llvm/MC/MCContext.h\nM | /llvm/trunk/lib/MC/ELFObjectWriter.cpp\nM | /llvm/trunk/lib/MC/MCContext.cpp\nM | /llvm/trunk/lib/MC/MCParser/AsmParser.cpp\nM | /llvm/trunk/lib/MC/MachObjectWriter.cpp\nM | /llvm/trunk/test/CodeGen/SPARC/obj-relocs.ll\nM | /llvm/trunk/test/MC/ARM/elf-reloc-02.s\nM | /llvm/trunk/test/MC/ELF/basic-elf-32.s\nM | /llvm/trunk/test/MC/ELF/compression.s\nM | /llvm/trunk/test/MC/ELF/discriminator.s\nM | /llvm/trunk/test/MC/ELF/merge.s\nM | /llvm/trunk/test/MC/ELF/relocation-386.s\nD | /llvm/trunk/test/MC/ELF/undef-temp.s\nM | /llvm/trunk/test/MC/ELF/undef.s\nA | /llvm/trunk/test/MC/ELF/undef2.s\nM | /llvm/trunk/test/MC/MachO/AArch64/classrefs.s\nM | /llvm/trunk/test/MC/MachO/AArch64/darwin-ARM64-reloc.s\nM | /llvm/trunk/test/MC/MachO/AArch64/ld64-workaround.s\nM | /llvm/trunk/test/MC/MachO/AArch64/mergeable.s\nM | /llvm/trunk/test/MC/MachO/AArch64/reloc-crash.s\nM | /llvm/trunk/test/MC/MachO/x86_64-mergeable.s\nM | /llvm/trunk/test/MC/MachO/x86_64-symbols.s\nM | /llvm/trunk/test/MC/Mips/cpsetup.s\nM | /llvm/trunk/test/MC/Mips/elf-relsym.s\nM | /llvm/trunk/test/MC/Mips/xgot.s\nM | /llvm/trunk/test/MC/Sparc/sparc-pic.s\n"}, {"commit_id": "240300", "date": "2015-06-22T17:46:53.765975Z", "author": "rafael", "msg": "Avoid a Symbol -> Name -> Symbol conversion.\n\nBefore this we were producing a TargetExternalSymbol from a MCSymbol.\nThat meant extracting the symbol name and fetching the symbol again\ndown the pipeline.\n\nThis patch adds a DAG.getMCSymbol that lets the MCSymbol pass unchanged on the\nDAG.\n\nDoing so removes the need for MO_NOPREFIX and fixes the root cause of pr23900,\nallowing r240130 to be committed again.", "modified": "M | /llvm/trunk/include/llvm/CodeGen/ISDOpcodes.h\nM | /llvm/trunk/include/llvm/CodeGen/MachineOperand.h\nM | /llvm/trunk/include/llvm/CodeGen/SelectionDAG.h\nM | /llvm/trunk/include/llvm/CodeGen/SelectionDAGNodes.h\nM | /llvm/trunk/include/llvm/Target/TargetSelectionDAG.td\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/InstrEmitter.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAG.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp\nM | /llvm/trunk/lib/Target/X86/MCTargetDesc/X86BaseInfo.h\nM | /llvm/trunk/lib/Target/X86/X86ISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86InstrCompiler.td\nM | /llvm/trunk/lib/Target/X86/X86MCInstLower.cpp\nM | /llvm/trunk/utils/TableGen/CodeGenDAGPatterns.cpp\n"}, {"commit_id": "240462", "date": "2015-06-23T21:10:15.297498Z", "author": "bwilson", "msg": "PR22560: Fix argument order for ARM _MoveToCoprocessor builtins.\n\nThe Microsoft-extension _MoveToCoprocessor and _MoveToCoprocessor2\nbuiltins take the register value to be moved as the first argument,\nbut the corresponding mcr and mcr2 LLVM intrinsics expect that value\nto be the third argument. Handle this as a special case, while still\nleaving those intrinsics as generic MSBuiltins. I considered the\nalternative of handling these in EmitARMBuiltinExpr, but that does\nnot work well for the follow-up change that I'm going to make to improve\nthe error handling for PR22560 -- we need the GetBuiltinType() checks\nfor ICEArguments, and the ARM version of that code is only used for\nNeon intrinsics where the last argument is special and not\nchecked in the normal way.", "modified": "M | /cfe/trunk/lib/CodeGen/CGBuiltin.cpp\nM | /cfe/trunk/test/CodeGen/arm-microsoft-intrinsics.c\n"}, {"commit_id": "240463", "date": "2015-06-23T21:10:24.321965Z", "author": "bwilson", "msg": "Improve error handling for PR22560.\n\nThe ARM _MoveToCoprocessor and _MoveFromCoprocessor builtins require\ninteger constants for most arguments, but clang was not checking that.\nWith this change, we now report meaningful errors instead of crashing\nin the backend.", "modified": "M | /cfe/trunk/include/clang/Basic/BuiltinsARM.def\nA | /cfe/trunk/test/Sema/arm-microsoft-intrinsics.c\n"}, {"commit_id": "240522", "date": "2015-06-24T06:05:20.303290Z", "author": "bwilson", "msg": "Move the special-case check from r240462 into ARM-specific code.\n\nThis fixes a serious bug in r240462: checking the BuiltinID for\nARM::BI_MoveToCoprocessor* in EmitBuiltinExpr() ignores the fact that\neach target has an overlapping range of the BuiltinID values. That check\ncan trigger for builtins from other targets, leading to very bad\nbehavior.\n\nPart of the reason I did not implement r240462 this way to begin with is\nthe special handling of the last argument for Neon builtins. In this\nchange, I have factored out the check to see which builtins have that\nextra argument into a new HasExtraNeonArgument() function. There is still\nsome awkwardness in having to check for those builtins in two separate\nplaces, i.e., once to see if the extra argument is present and once to\ngenerate the appropriate IR, but this seems much cleaner than my previous\npatch.", "modified": "M | /cfe/trunk/lib/CodeGen/CGBuiltin.cpp\n"}, {"commit_id": "240523", "date": "2015-06-24T06:07:41.553655Z", "author": "bwilson", "msg": "Do not treat ARM _MoveToCoprocessor* intrinsics as MSBuiltins.\n\nThose builtins are now handled via ad-hoc code in clang with r240522 to\ndeal with reordering the arguments to fix PR22560.", "modified": "M | /llvm/trunk/include/llvm/IR/IntrinsicsARM.td\n"}, {"commit_id": "240617", "date": "2015-06-25T00:57:42.089881Z", "author": "samsonov", "msg": "[CMake] Fix PR23539: Don't reference C++ ABI symbols prior to Mac OS 10.9.\n\nSummary:\nThis patch implements step 1 from\nhttps://llvm.org/bugs/show_bug.cgi?id=23539#c10\n\nI'd appreciate if you could test it on Mac OS and verify that parts of UBSan\nruntime that reference C++ ABI symbols are properly excluded, and fix ASan/UBSan\nbuilds.\n\nTest Plan: regression test suite\n\nReviewers: thakis, hans\n\nSubscribers: llvm-commits, zaks.anna, kubabrecka\n\nDifferential Revision: http://reviews.llvm.org/D10621", "modified": "M | /compiler-rt/trunk/CMakeLists.txt\nM | /compiler-rt/trunk/lib/ubsan/CMakeLists.txt\nM | /compiler-rt/trunk/test/lit.common.cfg\nM | /compiler-rt/trunk/test/lit.common.configured.in\nM | /compiler-rt/trunk/test/ubsan/TestCases/TypeCheck/vptr-virtual-base.cpp\nM | /compiler-rt/trunk/test/ubsan/TestCases/TypeCheck/vptr.cpp\n"}, {"commit_id": "240735", "date": "2015-06-25T23:50:40.888446Z", "author": "majnemer", "msg": "[CodeGen] Restrict isTriviallyRecursive to predefined lib functions forwarding to lib functions\n\nisTriviallyRecursive is only supposed to guard functions part of the\nimplementation.\n\nThis fixes PR23953.", "modified": "M | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/test/CodeGen/pr9614.c\n"}, {"commit_id": "240933", "date": "2015-06-29T10:30:06.037369Z", "author": "labath", "msg": "fix lldb-server linking on RHEL 6 (bug #23774)\n\nPatch by: Eugene Zelenko", "modified": "M | /lldb/trunk/tools/lldb-server/CMakeLists.txt\n"}, {"commit_id": "240935", "date": "2015-06-29T11:03:21.551043Z", "author": "labath", "msg": "Add Support for LLVM_INSTALL_TOOLCHAIN_ONLY (bug #23784)\n\nSupport for LLVM_INSTALL_TOOLCHAIN_ONLY is modeled on same functionality\nfrom LLVM and Clang CMake files.\n\nPatch by: Eugene Zelenko", "modified": "M | /lldb/trunk/cmake/modules/AddLLDB.cmake\nM | /lldb/trunk/cmake/modules/LLDBConfig.cmake\nM | /lldb/trunk/cmake/modules/LLDBStandalone.cmake\n"}, {"commit_id": "241002", "date": "2015-06-29T21:35:51.843219Z", "author": "matze", "msg": "X86: Rework inline asm integer register specification.\n\nThis is a new version of http://reviews.llvm.org/D10260.\n\nIt turned out that when you specify an integer register in inline asm on\nx86 you get the register of the required type size back. That means that\nX86TargetLowering::getRegForInlineAsmConstraint() has to accept any of\nthe integer registers and adapt its size to the given target size which\nmay be any 8/16/32/64 bit sized type. Surprisingly that means given a\nconstraint of \"{ax}\" and a type of MVT::F32 we need to return X86::EAX.\n\nThis change makes this face explicit, the previous code seemed like\nworking by accident because there it never returned an error once a\nregister was found. On the other hand this rewrite allows to actually\nreturn errors for invalid situations like requesting an integer register\nfor an i128 type.\n\nRelated to rdar://21042280\n\nDifferential Revision: http://reviews.llvm.org/D10813", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86RegisterInfo.cpp\nM | /llvm/trunk/lib/Target/X86/X86RegisterInfo.h\nA | /llvm/trunk/test/CodeGen/X86/asm-mismatched-types.ll\nA | /llvm/trunk/test/CodeGen/X86/asm-reject-reg-type-mismatch.ll\n"}, {"commit_id": "241043", "date": "2015-06-30T04:41:18.831091Z", "author": "majnemer", "msg": "[CodeGen] Tweak isTriviallyRecursive further\n\nisTriviallyRecursive is a hack used to bridge a gap between the\nexpectations that source code assumes and the semantics that LLVM IR can\nprovide.  Specifically, asm labels on functions are treated as an\nexplicit name for a GlobalObject in Clang but treated like an\noutput-processing step in GCC.  Tweak this hack a little further to emit\ncalls to library functions instead of emitting an incorrect definition.\nThe definition in question would have available_externally linkage (this\nis OK) but result in a call to itself which will either result in an\ninfinite loop or stack overflow.\n\nThis fixes PR23964.", "modified": "M | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/test/CodeGen/pr9614.c\n"}, {"commit_id": "241082", "date": "2015-06-30T17:23:29.947476Z", "author": "dvyukov", "msg": "tsan: fix handling of condition variable destruction\n\nPOSIX states that \"It shall be safe to destroy an initialized condition\nvariable upon which no threads are currently blocked\", and later clarifies\n\"A condition variable can be destroyed immediately after all the threads\nthat are blocked on it are awakened) (in examples section). Tsan reported\nsuch destruction as a data race.\nFixes https://llvm.org/bugs/show_bug.cgi?id=23616\nReviewed in http://reviews.llvm.org/D10693\n\n", "modified": "M | /compiler-rt/trunk/lib/tsan/rtl/tsan_interceptors.cc\nA | /compiler-rt/trunk/test/tsan/cond_destruction.cc\n"}, {"commit_id": "241142", "date": "2015-07-01T05:37:57.942476Z", "author": "majnemer", "msg": "[SCCP] Turn loads of null into undef instead of zero initialized values\n\nSurprisingly, this is a correctness issue: the mmx type exists for\ncalling convention purposes, LLVM doesn't have a zero representation for\nthem.\n\nThis partially fixes PR23999.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SCCP.cpp\nM | /llvm/trunk/test/Transforms/SCCP/crash.ll\n"}, {"commit_id": "241143", "date": "2015-07-01T05:38:07.352252Z", "author": "majnemer", "msg": "[LoopUnroll] Use undef for phis with no value live\n\nWe would create a phi node with a zero initialized operand instead of\nundef in the case where no value was originally available.  This was\nproblematic for x86_mmx which has no null value.", "modified": "M | /llvm/trunk/lib/Transforms/Utils/LoopUnrollRuntime.cpp\nA | /llvm/trunk/test/Transforms/LoopUnroll/X86/mmx.ll\n"}, {"commit_id": "241339", "date": "2015-07-03T10:37:23.209332Z", "author": "djasper", "msg": "clang-format: [JS] Allow line breaks after TypeScript type colons.", "modified": "M | /cfe/trunk/lib/Format/TokenAnnotator.cpp\nM | /cfe/trunk/unittests/Format/FormatTestJS.cpp\n"}, {"commit_id": "241532", "date": "2015-07-07T00:27:16.512843Z", "author": "ericwf", "msg": "[libcxx] Add atomic_support.h header to src that handles needed atomic operations.\n\nSummary:\nIn some places in libc++ we need to use the `__atomic_*` builtins. This patch adds a header that provides access to those builtins in a uniform way from within the dylib source.\n\nIf the compiler building the dylib does not support these builtins then a warning is issued.\n\nOnly relaxed loads are needed within the headers. A singe function to do these relaxed loads has been added to `<memory>`.\n\nThis patch applies the new atomic builtins to `__shared_count` and `call_once`.\n\nReviewers: mclow.lists\n\nSubscribers: majnemer, jroelofs, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D10406", "modified": "M | /libcxx/trunk/include/memory\nM | /libcxx/trunk/include/mutex\nM | /libcxx/trunk/src/memory.cpp\nM | /libcxx/trunk/src/mutex.cpp\nA | /libcxx/trunk/src/support/atomic_support.h\nA | /libcxx/trunk/test/libcxx/utilities\nA | /libcxx/trunk/test/libcxx/utilities/memory\nA | /libcxx/trunk/test/libcxx/utilities/memory/util.smartptr\nA | /libcxx/trunk/test/libcxx/utilities/memory/util.smartptr/race_condition.pass.cpp\n"}, {"commit_id": "241575", "date": "2015-07-07T12:08:09.667808Z", "author": "labath", "msg": "LLDB standalone build: check if Clang was built independently from LLVM\n\nThis is fix for bug 23704: LLDB standalone build always include\nClangConfig.cmake even if Clang was built with LLVM (ClangConfig.cmake\ndoesn't exist).\n\nPatch by: Eugene Zelenko", "modified": "M | /lldb/trunk/cmake/modules/LLDBStandalone.cmake\n"}, {"commit_id": "241602", "date": "2015-07-07T16:42:50.770372Z", "author": "nico", "msg": "Revert r241570, it caused PR24053", "modified": "M | /llvm/trunk/lib/IR/BasicBlock.cpp\n"}, {"commit_id": "241826", "date": "2015-07-09T17:28:37.758400Z", "author": "spatel", "msg": "fix an invisible bug when combining repeated FP divisors\n\nThis patch fixes bugs that were exposed by the addition of fast-math-flags in the DAG:\nr237046 ( http://reviews.llvm.org/rL237046 ):\n\n1. When replacing a division node, it's not enough to RAUW.\n   We should call CombineTo() to delete dead nodes and combine again.\n2. Because we are changing the DAG, we can't return an empty SDValue\n   after the transform. As the code comments say:\n\n    Visitation implementation - Implement dag node combining for different node types.\n    The semantics are as follows: Return Value:\n      SDValue.getNode() == 0 - No change was made\n      SDValue.getNode() == N - N was replaced, is dead and has been handled.\n      otherwise - N should be replaced by the returned Operand.\n\nThe new test case shows no difference with or without this patch, but it will crash if\nwe re-apply r237046 or enable FMF via the current -enable-fmf-dag cl::opt.\n\nDifferential Revision: http://reviews.llvm.org/D9893\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nM | /llvm/trunk/test/CodeGen/X86/fdiv-combine.ll\n"}, {"commit_id": "242172", "date": "2015-07-14T17:50:27.938934Z", "author": "ericwf", "msg": "Fix PR24114 - std::atomic for non-Clang is not a literal type\n\nAdd _LIBCPP_CONSTEXPR to the implementation of __gcc_atomic_t.\n", "modified": "M | /libcxx/trunk/include/atomic\nA | /libcxx/trunk/test/std/atomics/atomics.types.operations/atomics.types.operations.req/ctor.pass.cpp\n"}, {"commit_id": "242363", "date": "2015-07-16T00:20:50.367725Z", "author": "samsonov", "msg": "[CMake] Revisit PR23539: allow to override SANITIZER_MIN_OSX_VERSION at configure time.\n\nSome users may need to configure Clang/compiler-rt with\n-DMACOSX_DEPLOYMENT_TARGET=10.6, as they expect Clang to produce working\n(non-sanitized) binaries on 10.6. In this case they would need to\nadditionally provide -DSANITIZER_MIN_OSX_VERSION=10.7 to mark\nthat sanitizer runtimes may only be used on 10.7+ (where they are\nsupported).", "modified": "M | /compiler-rt/trunk/CMakeLists.txt\n"}, {"commit_id": "242746", "date": "2015-07-21T00:39:53.355961Z", "author": "cbieneman", "msg": "[CMake] Fixing a problem with external projects that aren't getting enabled properly.\n\nThis should address PR 24194, and some builedbot failures.", "modified": "M | /llvm/trunk/cmake/modules/AddLLVM.cmake\n"}, {"commit_id": "242748", "date": "2015-07-21T00:44:47.623666Z", "author": "cbieneman", "msg": "[CMake] Fixing inconsistency caused by copy-pasta.\n\nThis will actually fix the PR 24194.", "modified": "M | /llvm/trunk/cmake/modules/AddLLVM.cmake\n"}, {"commit_id": "243057", "date": "2015-07-23T22:56:53.584098Z", "author": "spatel", "msg": "fix crash in machine trace metrics due to processing dbg_value instructions (PR24199)\n\nThe test in PR24199 ( https://llvm.org/bugs/show_bug.cgi?id=24199 ) crashes because machine\ntrace metrics was not ignoring dbg_value instructions when calculating data dependencies.\n\nThe machine-combiner pass asks machine trace metrics to calculate an instruction trace, \ndoes some reassociations, and calls MachineInstr::eraseFromParentAndMarkDBGValuesForRemoval()\nalong with MachineTraceMetrics::invalidate(). The dbg_value instructions have their operands\ninvalidated, but the instructions are not expected to be deleted.\n\nOn a subsequent loop iteration of the machine-combiner pass, machine trace metrics would be\ncalled again and die while accessing the invalid debug instructions.\n\nDifferential Revision: http://reviews.llvm.org/D11423\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/MachineTraceMetrics.cpp\nA | /llvm/trunk/test/CodeGen/X86/machine-trace-metrics-crash.ll\n"}, {"commit_id": "243293", "date": "2015-07-27T17:58:49.135810Z", "author": "spatel", "msg": "move combineRepeatedFPDivisors logic into a helper function; NFCI\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\n"}, {"commit_id": "243498", "date": "2015-07-28T23:05:48.175844Z", "author": "spatel", "msg": "fix TLI's combineRepeatedFPDivisors interface to return the minimum user threshold\n\nThis fix was suggested as part of D11345 and is part of fixing PR24141.\n\nWith this change, we can avoid walking the uses of a divisor node if the target\ndoesn't want the combineRepeatedFPDivisors transform in the first place.\n\nThere is no NFC-intended other than that.\n\nDifferential Revision: http://reviews.llvm.org/D11531\n\n", "modified": "M | /llvm/trunk/include/llvm/Target/TargetLowering.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nM | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.cpp\nM | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.h\nM | /llvm/trunk/lib/Target/PowerPC/PPCISelLowering.cpp\nM | /llvm/trunk/lib/Target/PowerPC/PPCISelLowering.h\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.h\n"}, {"commit_id": "243500", "date": "2015-07-28T23:28:22.837833Z", "author": "spatel", "msg": "ignore duplicate divisor uses when transforming into reciprocal multiplies (PR24141)\n\nPR24141: https://llvm.org/bugs/show_bug.cgi?id=24141\ncontains a test case where we have duplicate entries in a node's uses() list.\n\nAfter r241826, we use CombineTo() to delete dead nodes when combining the uses into\nreciprocal multiplies, but this fails if we encounter the just-deleted node again in\nthe list.\n\nThe solution in this patch is to not add duplicate entries to the list of users that\nwe will subsequently iterate over. For the test case, this avoids triggering the\ncombine divisors logic entirely because there really is only one user of the divisor.\n\nDifferential Revision: http://reviews.llvm.org/D11345\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nM | /llvm/trunk/test/CodeGen/X86/fdiv-combine.ll\n"}, {"commit_id": "243503", "date": "2015-07-29T00:03:51.803985Z", "author": "ericwf", "msg": "[libcxx] Cleanup CMake configuration and integrate with LLVM\n\nSummary:\nThis patch contains the following changes:\n\n1. Require that libc++ can find a LLVM source directory. This is done the same way as `libc++abi` currently does.\n2. Cleanup ugly configuration code in CMakeLists.txt by using `add_flags`, `add_flags_if`, and `add_flags_if_supported` macros.\n\nThe goals for this patch are:\n\n1. Help libc++ be more consistent with how LLVM handles CMake options (see PR23670 PR23671).\n2. Make it easier to use sanitizers using the `LLVM_USE_SANITIZER` option.\n3. Make libc++'s CMakeLists.txt file easier to understand and change.\n4. Move towards allowing libc++ to create Sphinx documentation (see http://efcs.ca/libcxx-docs). \n5. Move towards allowing  libc++ to use other LLVM utilities such as `not` and `FileCheck`.\n\n  \n\nReviewers: mclow.lists, jroelofs, danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11308", "modified": "M | /libcxx/trunk/CMakeLists.txt\nA | /libcxx/trunk/cmake/Modules/FindLLVM.cmake\nM | /libcxx/trunk/cmake/Modules/HandleLibCXXABI.cmake\nA | /libcxx/trunk/cmake/Modules/HandleLibcxxFlags.cmake\nM | /libcxx/trunk/cmake/config-ix.cmake\nM | /libcxx/trunk/lib/CMakeLists.txt\nM | /libcxx/trunk/test/CMakeLists.txt\nM | /libcxx/trunk/test/lit.site.cfg.in\nM | /libcxx/trunk/www/index.html\n"}, {"commit_id": "243550", "date": "2015-07-29T18:32:21.568449Z", "author": "hans", "msg": "Revert r243503 \"[libcxx] Cleanup CMake configuration and integrate with LLVM\"\n\nThis caused clang-format to stop linking on Mac; see PR24306.", "modified": "M | /libcxx/trunk/CMakeLists.txt\nD | /libcxx/trunk/cmake/Modules/FindLLVM.cmake\nM | /libcxx/trunk/cmake/Modules/HandleLibCXXABI.cmake\nD | /libcxx/trunk/cmake/Modules/HandleLibcxxFlags.cmake\nM | /libcxx/trunk/cmake/config-ix.cmake\nM | /libcxx/trunk/lib/CMakeLists.txt\nM | /libcxx/trunk/test/CMakeLists.txt\nM | /libcxx/trunk/test/lit.site.cfg.in\nM | /libcxx/trunk/www/index.html\n"}, {"commit_id": "243574", "date": "2015-07-29T21:07:28.994786Z", "author": "ericwf", "msg": "Recommit r243503 \"[libcxx] Cleanup CMake configuration and integrate with LLVM\"\n\nThis change was reverted in r243550 because it broke clang-format builds\n(see PR24306).\n\nThis patch recommits a fixed version of the original.\n", "modified": "M | /libcxx/trunk/CMakeLists.txt\nA | /libcxx/trunk/cmake/Modules/FindLLVM.cmake\nM | /libcxx/trunk/cmake/Modules/HandleLibCXXABI.cmake\nA | /libcxx/trunk/cmake/Modules/HandleLibcxxFlags.cmake\nM | /libcxx/trunk/cmake/config-ix.cmake\nM | /libcxx/trunk/lib/CMakeLists.txt\nM | /libcxx/trunk/test/CMakeLists.txt\nM | /libcxx/trunk/test/lit.site.cfg.in\nM | /libcxx/trunk/www/index.html\n"}, {"commit_id": "243604", "date": "2015-07-30T01:45:17.085696Z", "author": "hans", "msg": "[CMake] Pass -march=i686 when targeting i686 (PR24222)\n\nClang will not define __i686__, even when the target triple is i686,\nwithout -march=i686.\n\nWith this patch, the compiler-rt build will successfully detect that\nClang can target i686.\n\nThe open_memstream.cc test is a little funny. Before my patch, it\nwas invoked with \"-m32 -m64\". To make it work after my -march\nchange, I had to add '-march=x86-64'.\n\nDifferential Revision: http://reviews.llvm.org/D11618", "modified": "M | /compiler-rt/trunk/cmake/config-ix.cmake\nM | /compiler-rt/trunk/test/sanitizer_common/TestCases/Linux/open_memstream.cc\n"}, {"commit_id": "243615", "date": "2015-07-30T03:41:05.871689Z", "author": "nico", "msg": "Revert r243604, it (very likely) caused PR24312.", "modified": "M | /compiler-rt/trunk/cmake/config-ix.cmake\nM | /compiler-rt/trunk/test/sanitizer_common/TestCases/Linux/open_memstream.cc\n"}, {"commit_id": "243866", "date": "2015-08-03T03:45:32.165460Z", "author": "dexonsmith", "msg": "ValueMapper: Only check for cycles if operands change\n\nThis is a minor optimization to only check for unresolved operands\ninside `mapDistinctNode()` if the operands have actually changed.  This\nshouldn't really cause any change in behaviour.  I didn't actually see a\nslowdown in a profile, I was just poking around nearby and saw the\nopportunity.", "modified": "M | /llvm/trunk/lib/Transforms/Utils/ValueMapper.cpp\n"}, {"commit_id": "244221", "date": "2015-08-06T15:44:12.418671Z", "author": "dougk", "msg": "[SPARC] Don't compare arch name as a string, use the enum instead.\n\nFixes PR22695", "modified": "M | /llvm/trunk/lib/Target/Sparc/AsmParser/SparcAsmParser.cpp\nM | /llvm/trunk/test/MC/Sparc/sparc-directive-xword.s\n"}, {"commit_id": "245025", "date": "2015-08-14T04:17:23.661920Z", "author": "karthik", "msg": "Add support for cross block dse.\nThis patch enables dead stroe elimination across basicblocks.\n\nExample:\ndefine void @test_02(i32 %N) {\n  %1 = alloca i32\n  store i32 %N, i32* %1\n  store i32 10, i32* @x\n  %2 = load i32, i32* %1\n  %3 = icmp ne i32 %2, 0\n  br i1 %3, label %4, label %5\n\n; <label>:4\n  store i32 5, i32* @x\n  br label %7\n\n; <label>:5\n  %6 = load i32, i32* @x\n  store i32 %6, i32* @y\n  br label %7\n\n; <label>:7\n  store i32 15, i32* @x\n  ret void\n}\nIn the above example dead store \"store i32 5, i32* @x\" is now eliminated.\n\nDifferential Revision: http://reviews.llvm.org/D11143\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/DeadStoreElimination.cpp\nA | /llvm/trunk/test/Transforms/DeadStoreElimination/cross_block_dse.ll\nA | /llvm/trunk/test/Transforms/DeadStoreElimination/cross_block_dse_loop.ll\n"}, {"commit_id": "245118", "date": "2015-08-14T22:45:26.344971Z", "author": "broune", "msg": "[SCEV] Apply NSW and NUW flags via poison value analysis for sub, mul and shl\n\nSummary:\nhttp://reviews.llvm.org/D11212 made Scalar Evolution able to propagate NSW and NUW flags from instructions to SCEVs for add instructions. This patch expands that to sub, mul and shl instructions.\n\nThis change makes LSR able to generate pointer induction variables for loops like these, where the index is 32 bit and the pointer is 64 bit:\n\n  for (int i = 0; i < numIterations; ++i)\n    sum += ptr[i - offset];\n\n  for (int i = 0; i < numIterations; ++i)\n    sum += ptr[i * stride];\n\n  for (int i = 0; i < numIterations; ++i)\n    sum += ptr[3 * (i << 7)];\n\n\nReviewers: atrick, sanjoy\n\nSubscribers: sanjoy, majnemer, hfinkel, llvm-commits, meheff, jingyue, eliben\n\nDifferential Revision: http://reviews.llvm.org/D11860", "modified": "M | /llvm/trunk/include/llvm/Analysis/ScalarEvolution.h\nM | /llvm/trunk/lib/Analysis/ScalarEvolution.cpp\nM | /llvm/trunk/test/Analysis/Delinearization/a.ll\nM | /llvm/trunk/test/Analysis/ScalarEvolution/flags-from-poison.ll\nM | /llvm/trunk/test/Analysis/ScalarEvolution/min-max-exprs.ll\nM | /llvm/trunk/test/Transforms/LoopStrengthReduce/sext-ind-var.ll\n"}, {"commit_id": "245172", "date": "2015-08-16T07:11:59.832799Z", "author": "majnemer", "msg": "Revert \"Add support for cross block dse. This patch enables dead stroe elimination across basicblocks.\"\n\nThis reverts commit r245025, it caused PR24469.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/DeadStoreElimination.cpp\nD | /llvm/trunk/test/Transforms/DeadStoreElimination/cross_block_dse.ll\nD | /llvm/trunk/test/Transforms/DeadStoreElimination/cross_block_dse_loop.ll\n"}, {"commit_id": "245195", "date": "2015-08-17T05:51:39.885333Z", "author": "karthik", "msg": "Fix PR24469 resulting from r245025 and re-enable dead store elimination across basicblocks.\nPR24469 resulted because DeleteDeadInstruction in handleNonLocalStoreDeletion was\ndeleting the next basic block iterator. Fixed the same by resetting the basic block iterator\npost call to DeleteDeadInstruction.\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/DeadStoreElimination.cpp\nA | /llvm/trunk/test/Transforms/DeadStoreElimination/cross_block_dse.ll\nA | /llvm/trunk/test/Transforms/DeadStoreElimination/cross_block_dse_loop.ll\n"}, {"commit_id": "245402", "date": "2015-08-19T02:15:13.694769Z", "author": "echristo", "msg": "Revert \"Fix PR24469 resulting from r245025 and re-enable dead store elimination across basicblocks.\"\n\nThis is causing bootstrap problems, e.g.: http://bb.pgr.jp/builders/clang-3stage-i686-linux/builds/2960\n\nThis reverts r245195.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/DeadStoreElimination.cpp\nD | /llvm/trunk/test/Transforms/DeadStoreElimination/cross_block_dse.ll\nD | /llvm/trunk/test/Transforms/DeadStoreElimination/cross_block_dse_loop.ll\n"}, {"commit_id": "245544", "date": "2015-08-20T09:00:56.760088Z", "author": "majnemer", "msg": "[X86] Fix the (shl (and (setcc_c), c1), c2) -> (and setcc_c, (c1 << c2)) fold\n\nWe didn't check for the necessary preconditions before folding a\nmask/shift into a single mask.\n\nThis fixes PR24516.", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/setcc.ll\n"}, {"commit_id": "246188", "date": "2015-08-27T18:57:00.134826Z", "author": "xazax", "msg": "[Static Analyzer] BugReporter.cpp:2869: Assertion failed: !RemainingNodes.empty() && \"No error node found in the trimmed graph\"\n\nThe assertion is caused by reusing a \u9225\u6e07iller\u9225?ExplodedNode as an error node.\nThe \u9225\u6e07iller\u9225?nodes are only used for intermediate processing and are not\nessential for analyzer history, so they can be reclaimed when the\nExplodedGraph is trimmed by the \u9225\u6e03ollectNode\u9225?function. When a checker finds a\nbug, they generate a new transition in the ExplodedGraph. The analyzer will\ntry to reuse the existing predecessor node. If it cannot, it creates a new\nExplodedNode, which always has a tag to uniquely identify the creation site.\nThe assertion is caused when the analyzer reuses a \u9225\u6e07iller\u9225?node.\n\nIn the test case, some \u9225\u6e07iller\u9225?nodes were reused and then reclaimed later\nwhen the ExplodedGraph was trimmed. This caused an assertion because the node\nwas needed to generate the report. The \u9225\u6e07iller\u9225?nodes should not be reused as\nerror nodes. The patch adds a constraint to prevent this happening, which\nsolves the problem and makes the test cases pass.\n\nDifferential Revision: http://reviews.llvm.org/D11433\n\nPatch by Ying Yi!\n", "modified": "M | /cfe/trunk/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h\nA | /cfe/trunk/test/Analysis/PR24184.cpp\nM | /cfe/trunk/test/Analysis/malloc.c\n"}, {"commit_id": "246315", "date": "2015-08-28T19:09:31.743747Z", "author": "sanjoy", "msg": "[InstCombine] Fix PR24605.\n\nPR24605 is caused due to an incorrect insert point in instcombine's IR\nbuilder.  When simplifying\n\n  %t = add X Y\n  ...\n  %m = icmp ... %t\n\nthe replacement for %t should be placed before %t, not before %m, as\nthere could be a use of %t between %t and %m.", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCompares.cpp\nM | /llvm/trunk/lib/Transforms/InstCombine/InstCombineInternal.h\nA | /llvm/trunk/test/Transforms/InstCombine/pr24605.ll\n"}, {"commit_id": "246567", "date": "2015-09-01T18:17:41.983392Z", "author": "grosser", "msg": "ScopInfo: use project_out instead of remove_dims\n\nBy just removing dimensions (and the constraints they are involved in) we\nmay loose information about the dimensions we do not remove. By instead\nusing project_out, we are sure all constraints on the outer dimensions are\npreserved.\n\nNo test case, as this error condition is very unlikely to be triggered by\nisl's current code. We still 'fix' this, as isl gives little guarantees\nregarding the behavior of remove_divs.", "modified": "M | /polly/trunk/lib/Analysis/ScopInfo.cpp\n"}, {"commit_id": "246582", "date": "2015-09-01T20:35:42.321212Z", "author": "rsmith", "msg": "Re-commit r246497 (and dependent changes r246524 and r246521), reverted in\nr246546, with a workaround for an MSVC 2013 miscompile and an MSVC 2015\nrejects-valid.\n\nOriginal commit message:\n\n[modules] Rework serialized DeclContext lookup table management. Instead of\nwalking the loaded ModuleFiles looking for lookup tables for the context, store\nthem all in one place, and merge them together if we find we have too many\n(currently, more than 4). If we do merge, include the merged form in our\nserialized lookup table, so that downstream readers never need to look at our\nimports' tables.\n\nThis gives a huge performance improvement to builds with very large numbers of\nmodules (in some cases, more than a 2x speedup was observed).\n", "modified": "M | /cfe/trunk/include/clang/Serialization/ASTBitCodes.h\nM | /cfe/trunk/include/clang/Serialization/ASTReader.h\nM | /cfe/trunk/include/clang/Serialization/ASTWriter.h\nM | /cfe/trunk/include/clang/Serialization/Module.h\nM | /cfe/trunk/lib/Serialization/ASTReader.cpp\nM | /cfe/trunk/lib/Serialization/ASTReaderDecl.cpp\nM | /cfe/trunk/lib/Serialization/ASTReaderInternals.h\nM | /cfe/trunk/lib/Serialization/ASTWriter.cpp\nM | /cfe/trunk/lib/Serialization/ASTWriterDecl.cpp\nM | /cfe/trunk/lib/Serialization/Module.cpp\nA | /cfe/trunk/lib/Serialization/MultiOnDiskHashTable.h\nM | /cfe/trunk/test/Modules/cxx-templates.cpp\nM | /cfe/trunk/test/Modules/merge-using-decls.cpp\n"}, {"commit_id": "246846", "date": "2015-09-04T11:26:21.527783Z", "author": "abataev", "msg": "[OPENMP] Fix for http://llvm.org/PR24674: assertion failed and and abort trap\nFix processing of shared variables with reference types in OpenMP constructs. Previously, if the variable was not marked in one of the private clauses, the reference to this variable was emitted incorrectly and caused an assertion later.\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CGStmtOpenMP.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/test/OpenMP/critical_codegen.cpp\nM | /cfe/trunk/test/OpenMP/for_firstprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/for_lastprivate_codegen.cpp\nM | /cfe/trunk/test/OpenMP/for_linear_codegen.cpp\nM | /cfe/trunk/test/OpenMP/for_private_codegen.cpp\nM | /cfe/trunk/test/OpenMP/for_reduction_codegen.cpp\nM | /cfe/trunk/test/OpenMP/simd_codegen.cpp\nM | /cfe/trunk/test/OpenMP/single_codegen.cpp\n"}, {"commit_id": "246933", "date": "2015-09-05T20:44:56.840520Z", "author": "majnemer", "msg": "[InstCombine] Don't assume m_Mul gives back an Instruction\n\nThis fixes PR24713.", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCompares.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/icmp.ll\n"}, {"commit_id": "246939", "date": "2015-09-06T06:49:59.955313Z", "author": "majnemer", "msg": "[InstCombine] Don't divide by zero when evaluating a potential transform\n\nTrivial multiplication by zero may survive the worklist.  We tried to\nreassociate the multiplication with a division instruction, causing us\nto divide by zero; bail out instead.\n\nThis fixes PR24726.", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/div.ll\n"}, {"commit_id": "247050", "date": "2015-09-08T19:22:17.338048Z", "author": "dnovillo", "msg": "Fix PR 24723 - Handle 0-mass backedges in irreducible loops\n\nThis corner case happens when we have an irreducible SCC that is\ndeeply nested.  As we work down the tree, the backedge masses start\ngetting smaller and smaller until we reach one that is down to 0.\n\nSince we distribute the incoming mass using the backedge masses as\nweight, the distributor does not allow zero weights.  So, we simply\nignore them (which will just use the weights of the non-zero nodes).", "modified": "M | /llvm/trunk/lib/Analysis/BlockFrequencyInfoImpl.cpp\nA | /llvm/trunk/test/Analysis/BlockFrequencyInfo/irreducible_loop_crash.ll\n"}, {"commit_id": "247167", "date": "2015-09-09T17:55:00.186017Z", "author": "chandlerc", "msg": "[PM/AA] Rebuild LLVM's alias analysis infrastructure in a way compatible\nwith the new pass manager, and no longer relying on analysis groups.\n\nThis builds essentially a ground-up new AA infrastructure stack for\nLLVM. The core ideas are the same that are used throughout the new pass\nmanager: type erased polymorphism and direct composition. The design is\nas follows:\n\n- FunctionAAResults is a type-erasing alias analysis results aggregation\n  interface to walk a single query across a range of results from\n  different alias analyses. Currently this is function-specific as we\n  always assume that aliasing queries are *within* a function.\n\n- AAResultBase is a CRTP utility providing stub implementations of\n  various parts of the alias analysis result concept, notably in several\n  cases in terms of other more general parts of the interface. This can\n  be used to implement only a narrow part of the interface rather than\n  the entire interface. This isn't really ideal, this logic should be\n  hoisted into FunctionAAResults as currently it will cause\n  a significant amount of redundant work, but it faithfully models the\n  behavior of the prior infrastructure.\n\n- All the alias analysis passes are ported to be wrapper passes for the\n  legacy PM and new-style analysis passes for the new PM with a shared\n  result object. In some cases (most notably CFL), this is an extremely\n  naive approach that we should revisit when we can specialize for the\n  new pass manager.\n\n- BasicAA has been restructured to reflect that it is much more\n  fundamentally a function analysis because it uses dominator trees and\n  loop info that need to be constructed for each function.\n\nAll of the references to getting alias analysis results have been\nupdated to use the new aggregation interface. All the preservation and\nother pass management code has been updated accordingly.\n\nThe way the FunctionAAResultsWrapperPass works is to detect the\navailable alias analyses when run, and add them to the results object.\nThis means that we should be able to continue to respect when various\npasses are added to the pipeline, for example adding CFL or adding TBAA\npasses should just cause their results to be available and to get folded\ninto this. The exception to this rule is BasicAA which really needs to\nbe a function pass due to using dominator trees and loop info. As\na consequence, the FunctionAAResultsWrapperPass directly depends on\nBasicAA and always includes it in the aggregation.\n\nThis has significant implications for preserving analyses. Generally,\nmost passes shouldn't bother preserving FunctionAAResultsWrapperPass\nbecause rebuilding the results just updates the set of known AA passes.\nThe exception to this rule are LoopPass instances which need to preserve\nall the function analyses that the loop pass manager will end up\nneeding. This means preserving both BasicAAWrapperPass and the\naggregating FunctionAAResultsWrapperPass.\n\nNow, when preserving an alias analysis, you do so by directly preserving\nthat analysis. This is only necessary for non-immutable-pass-provided\nalias analyses though, and there are only three of interest: BasicAA,\nGlobalsAA (formerly GlobalsModRef), and SCEVAA. Usually BasicAA is\npreserved when needed because it (like DominatorTree and LoopInfo) is\nmarked as a CFG-only pass. I've expanded GlobalsAA into the preserved\nset everywhere we previously were preserving all of AliasAnalysis, and\nI've added SCEVAA in the intersection of that with where we preserve\nSCEV itself.\n\nOne significant challenge to all of this is that the CGSCC passes were\nactually using the alias analysis implementations by taking advantage of\na pretty amazing set of loop holes in the old pass manager's analysis\nmanagement code which allowed analysis groups to slide through in many\ncases. Moving away from analysis groups makes this problem much more\nobvious. To fix it, I've leveraged the flexibility the design of the new\nPM components provides to just directly construct the relevant alias\nanalyses for the relevant functions in the IPO passes that need them.\nThis is a bit hacky, but should go away with the new pass manager, and\nis already in many ways cleaner than the prior state.\n\nAnother significant challenge is that various facilities of the old\nalias analysis infrastructure just don't fit any more. The most\nsignificant of these is the alias analysis 'counter' pass. That pass\nrelied on the ability to snoop on AA queries at different points in the\nanalysis group chain. Instead, I'm planning to build printing\nfunctionality directly into the aggregation layer. I've not included\nthat in this patch merely to keep it smaller.\n\nNote that all of this needs a nearly complete rewrite of the AA\ndocumentation. I'm planning to do that, but I'd like to make sure the\nnew design settles, and to flesh out a bit more of what it looks like in\nthe new pass manager first.\n\nDifferential Revision: http://reviews.llvm.org/D12080", "modified": "M | /llvm/trunk/examples/Kaleidoscope/Chapter4/toy.cpp\nM | /llvm/trunk/examples/Kaleidoscope/Chapter5/toy.cpp\nM | /llvm/trunk/examples/Kaleidoscope/Chapter6/toy.cpp\nM | /llvm/trunk/examples/Kaleidoscope/Chapter7/toy.cpp\nM | /llvm/trunk/include/llvm/Analysis/AliasAnalysis.h\nD | /llvm/trunk/include/llvm/Analysis/AliasAnalysisCounter.h\nM | /llvm/trunk/include/llvm/Analysis/AliasSetTracker.h\nM | /llvm/trunk/include/llvm/Analysis/BasicAliasAnalysis.h\nM | /llvm/trunk/include/llvm/Analysis/CFLAliasAnalysis.h\nM | /llvm/trunk/include/llvm/Analysis/DependenceAnalysis.h\nM | /llvm/trunk/include/llvm/Analysis/GlobalsModRef.h\nM | /llvm/trunk/include/llvm/Analysis/Loads.h\nM | /llvm/trunk/include/llvm/Analysis/LoopAccessAnalysis.h\nM | /llvm/trunk/include/llvm/Analysis/MemoryDependenceAnalysis.h\nM | /llvm/trunk/include/llvm/Analysis/ObjCARCAliasAnalysis.h\nM | /llvm/trunk/include/llvm/Analysis/Passes.h\nM | /llvm/trunk/include/llvm/Analysis/ScalarEvolutionAliasAnalysis.h\nM | /llvm/trunk/include/llvm/Analysis/ScopedNoAliasAA.h\nM | /llvm/trunk/include/llvm/Analysis/TypeBasedAliasAnalysis.h\nM | /llvm/trunk/include/llvm/CodeGen/LiveIntervalAnalysis.h\nM | /llvm/trunk/include/llvm/CodeGen/LiveRangeEdit.h\nM | /llvm/trunk/include/llvm/CodeGen/MachineInstr.h\nM | /llvm/trunk/include/llvm/CodeGen/MachineScheduler.h\nM | /llvm/trunk/include/llvm/CodeGen/ScheduleDAG.h\nM | /llvm/trunk/include/llvm/CodeGen/SelectionDAG.h\nM | /llvm/trunk/include/llvm/InitializePasses.h\nM | /llvm/trunk/include/llvm/LinkAllPasses.h\nM | /llvm/trunk/include/llvm/Transforms/Utils/Cloning.h\nM | /llvm/trunk/include/llvm/Transforms/Utils/Local.h\nM | /llvm/trunk/include/llvm/Transforms/Utils/LoopUtils.h\nM | /llvm/trunk/lib/Analysis/AliasAnalysis.cpp\nD | /llvm/trunk/lib/Analysis/AliasAnalysisCounter.cpp\nM | /llvm/trunk/lib/Analysis/AliasAnalysisEvaluator.cpp\nM | /llvm/trunk/lib/Analysis/AliasSetTracker.cpp\nM | /llvm/trunk/lib/Analysis/Analysis.cpp\nM | /llvm/trunk/lib/Analysis/BasicAliasAnalysis.cpp\nM | /llvm/trunk/lib/Analysis/CFLAliasAnalysis.cpp\nM | /llvm/trunk/lib/Analysis/CMakeLists.txt\nM | /llvm/trunk/lib/Analysis/DependenceAnalysis.cpp\nM | /llvm/trunk/lib/Analysis/GlobalsModRef.cpp\nM | /llvm/trunk/lib/Analysis/Lint.cpp\nM | /llvm/trunk/lib/Analysis/LoopAccessAnalysis.cpp\nM | /llvm/trunk/lib/Analysis/MemDepPrinter.cpp\nM | /llvm/trunk/lib/Analysis/MemoryDependenceAnalysis.cpp\nD | /llvm/trunk/lib/Analysis/NoAliasAnalysis.cpp\nM | /llvm/trunk/lib/Analysis/ObjCARCAliasAnalysis.cpp\nM | /llvm/trunk/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp\nM | /llvm/trunk/lib/Analysis/ScopedNoAliasAA.cpp\nM | /llvm/trunk/lib/Analysis/TypeBasedAliasAnalysis.cpp\nM | /llvm/trunk/lib/CodeGen/InlineSpiller.cpp\nM | /llvm/trunk/lib/CodeGen/LiveIntervalAnalysis.cpp\nM | /llvm/trunk/lib/CodeGen/MachineCSE.cpp\nM | /llvm/trunk/lib/CodeGen/MachineFunctionPass.cpp\nM | /llvm/trunk/lib/CodeGen/MachineLICM.cpp\nM | /llvm/trunk/lib/CodeGen/MachineScheduler.cpp\nM | /llvm/trunk/lib/CodeGen/MachineSink.cpp\nM | /llvm/trunk/lib/CodeGen/Passes.cpp\nM | /llvm/trunk/lib/CodeGen/PostRASchedulerList.cpp\nM | /llvm/trunk/lib/CodeGen/ProcessImplicitDefs.cpp\nM | /llvm/trunk/lib/CodeGen/RegAllocBasic.cpp\nM | /llvm/trunk/lib/CodeGen/RegAllocGreedy.cpp\nM | /llvm/trunk/lib/CodeGen/RegAllocPBQP.cpp\nM | /llvm/trunk/lib/CodeGen/RegisterCoalescer.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp\nM | /llvm/trunk/lib/CodeGen/TwoAddressInstructionPass.cpp\nM | /llvm/trunk/lib/LTO/LTOCodeGenerator.cpp\nM | /llvm/trunk/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp\nM | /llvm/trunk/lib/Target/PowerPC/PPCLoopDataPrefetch.cpp\nM | /llvm/trunk/lib/Transforms/IPO/ArgumentPromotion.cpp\nM | /llvm/trunk/lib/Transforms/IPO/FunctionAttrs.cpp\nM | /llvm/trunk/lib/Transforms/IPO/InlineAlways.cpp\nM | /llvm/trunk/lib/Transforms/IPO/InlineSimple.cpp\nM | /llvm/trunk/lib/Transforms/IPO/Inliner.cpp\nM | /llvm/trunk/lib/Transforms/IPO/PassManagerBuilder.cpp\nM | /llvm/trunk/lib/Transforms/InstCombine/InstructionCombining.cpp\nM | /llvm/trunk/lib/Transforms/Instrumentation/SafeStack.cpp\nM | /llvm/trunk/lib/Transforms/ObjCARC/ObjCARC.cpp\nM | /llvm/trunk/lib/Transforms/ObjCARC/ObjCARCContract.cpp\nM | /llvm/trunk/lib/Transforms/ObjCARC/ObjCARCOpts.cpp\nM | /llvm/trunk/lib/Transforms/ObjCARC/ProvenanceAnalysis.h\nM | /llvm/trunk/lib/Transforms/ObjCARC/ProvenanceAnalysisEvaluator.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/DeadStoreElimination.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/FlattenCFGPass.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/Float2Int.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/GVN.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/IndVarSimplify.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/LICM.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/LoadCombine.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/LoopIdiomRecognize.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/LoopInterchange.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/LoopRerollPass.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/LoopRotation.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/MemCpyOptimizer.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/Scalar.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/Sink.cpp\nM | /llvm/trunk/lib/Transforms/Utils/InlineFunction.cpp\nM | /llvm/trunk/lib/Transforms/Utils/LCSSA.cpp\nM | /llvm/trunk/lib/Transforms/Utils/LoopSimplify.cpp\nM | /llvm/trunk/lib/Transforms/Vectorize/BBVectorize.cpp\nM | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nM | /llvm/trunk/lib/Transforms/Vectorize/SLPVectorizer.cpp\nM | /llvm/trunk/test/Analysis/BasicAA/full-store-partial-alias.ll\nM | /llvm/trunk/test/Analysis/CFLAliasAnalysis/arguments-globals.ll\nM | /llvm/trunk/test/Analysis/CFLAliasAnalysis/basic-interproc.ll\nM | /llvm/trunk/test/Analysis/CFLAliasAnalysis/branch-alias.ll\nM | /llvm/trunk/test/Analysis/CFLAliasAnalysis/const-expr-gep.ll\nM | /llvm/trunk/test/Analysis/CFLAliasAnalysis/full-store-partial-alias.ll\nM | /llvm/trunk/test/Analysis/CFLAliasAnalysis/gep-signed-arithmetic.ll\nM | /llvm/trunk/test/Analysis/CFLAliasAnalysis/multilevel-combine.ll\nM | /llvm/trunk/test/Analysis/CFLAliasAnalysis/must-and-partial.ll\nM | /llvm/trunk/test/Analysis/CFLAliasAnalysis/opaque-call-alias.ll\nM | /llvm/trunk/test/Analysis/CFLAliasAnalysis/va.ll\nM | /llvm/trunk/test/Analysis/DependenceAnalysis/PR21585.ll\nM | /llvm/trunk/test/Analysis/GlobalsModRef/2008-09-03-ReadGlobals.ll\nM | /llvm/trunk/test/Analysis/GlobalsModRef/aliastest.ll\nM | /llvm/trunk/test/Analysis/GlobalsModRef/atomic-instrs.ll\nM | /llvm/trunk/test/Analysis/GlobalsModRef/chaining-analysis.ll\nM | /llvm/trunk/test/Analysis/GlobalsModRef/indirect-global.ll\nM | /llvm/trunk/test/Analysis/GlobalsModRef/modreftest.ll\nM | /llvm/trunk/test/Analysis/GlobalsModRef/nonescaping-noalias.ll\nM | /llvm/trunk/test/Analysis/GlobalsModRef/pr12351.ll\nM | /llvm/trunk/test/Analysis/GlobalsModRef/purecse.ll\nM | /llvm/trunk/test/Analysis/ScalarEvolution/scev-aa.ll\nM | /llvm/trunk/test/Analysis/TypeBasedAliasAnalysis/precedence.ll\nM | /llvm/trunk/test/Transforms/BBVectorize/X86/wr-aliases.ll\nM | /llvm/trunk/test/Transforms/GVN/crash-no-aa.ll\nM | /llvm/trunk/test/Transforms/GVN/pr14166.ll\nM | /llvm/trunk/test/Transforms/LICM/2004-09-14-AliasAnalysisInvalidate.ll\nM | /llvm/trunk/test/Transforms/LICM/hoist-invariant-load.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/X86/reduction-crash.ll\nM | /llvm/trunk/test/Transforms/ObjCARC/provenance.ll\nM | /llvm/trunk/unittests/Analysis/AliasAnalysisTest.cpp\nM | /llvm/trunk/unittests/Analysis/MixedTBAATest.cpp\nM | /llvm/trunk/unittests/ExecutionEngine/MCJIT/MCJITTestAPICommon.h\n"}, {"commit_id": "247833", "date": "2015-09-16T18:29:52.417957Z", "author": "cbieneman", "msg": "[CMake] Make the sample program in darwin_test_archs have a symbol it needs to link.\n\nThis resolves an issue building compiler-rt using Xcode 7 that was reported on llvm-dev:\n\nhttp://lists.llvm.org/pipermail/llvm-dev/2015-September/090245.html", "modified": "M | /compiler-rt/trunk/cmake/Modules/CompilerRTDarwinUtils.cmake\n"}, {"commit_id": "248241", "date": "2015-09-22T03:44:41.937600Z", "author": "matze", "msg": "LiveIntervalAnalysis: Factor common code into splitSeparateComponents; NFC", "modified": "M | /llvm/trunk/include/llvm/CodeGen/LiveInterval.h\nM | /llvm/trunk/include/llvm/CodeGen/LiveIntervalAnalysis.h\nM | /llvm/trunk/lib/CodeGen/LiveInterval.cpp\nM | /llvm/trunk/lib/CodeGen/LiveIntervalAnalysis.cpp\nM | /llvm/trunk/lib/CodeGen/LiveRangeEdit.cpp\nM | /llvm/trunk/lib/CodeGen/RegisterCoalescer.cpp\nM | /llvm/trunk/lib/CodeGen/SplitKit.cpp\n"}, {"commit_id": "248286", "date": "2015-09-22T16:30:26.211281Z", "author": "brucem", "msg": "Remove IRToDWARF.h\n\nSummary:\nThe corresponding .cpp file was removed in September of 2011 in\nr139772.\n\nReviewers: spyffe, clayborg\n\nSubscribers: lldb-commits\n\nDifferential Revision: http://reviews.llvm.org/D13043", "modified": "D | /lldb/trunk/include/lldb/Expression/IRToDWARF.h\n"}, {"commit_id": "248355", "date": "2015-09-23T00:24:34.710156Z", "author": "nico", "msg": "Make ms-intrin.cpp test require the x86 target.", "modified": "M | /cfe/trunk/test/Headers/ms-intrin.cpp\n"}, {"commit_id": "248367", "date": "2015-09-23T08:30:47.399853Z", "author": "djasper", "msg": "clang-format: Add initial #include sorting capabilities.\n\nTo implement this nicely, add a function that merges two sets of\nreplacements that are meant to be done in sequence. This functionality\nwill also be useful for other applications, e.g. formatting the result\nof clang-tidy fixes.", "modified": "M | /cfe/trunk/include/clang/Format/Format.h\nM | /cfe/trunk/include/clang/Tooling/Core/Replacement.h\nM | /cfe/trunk/lib/Format/Format.cpp\nM | /cfe/trunk/lib/Format/FormatToken.cpp\nM | /cfe/trunk/lib/Tooling/Core/Replacement.cpp\nM | /cfe/trunk/tools/clang-format/CMakeLists.txt\nM | /cfe/trunk/tools/clang-format/ClangFormat.cpp\nM | /cfe/trunk/tools/clang-format/clang-format.py\nM | /cfe/trunk/unittests/Format/CMakeLists.txt\nA | /cfe/trunk/unittests/Format/SortIncludesTest.cpp\nM | /cfe/trunk/unittests/Tooling/RefactoringTest.cpp\n"}, {"commit_id": "248541", "date": "2015-09-24T21:29:54.826315Z", "author": "sivachandra", "msg": "[TestCppIncompleteTypes] Remove the dependence on std::string.\n\nReviewers: dblaikie, clayborg\n\nSubscribers: lldb-commits\n\nDifferential Revision: http://reviews.llvm.org/D13143", "modified": "M | /lldb/trunk/test/lang/cpp/incomplete-types/Makefile\nM | /lldb/trunk/test/lang/cpp/incomplete-types/TestCppIncompleteTypes.py\nA | /lldb/trunk/test/lang/cpp/incomplete-types/a.cpp\nA | /lldb/trunk/test/lang/cpp/incomplete-types/a.h\nM | /lldb/trunk/test/lang/cpp/incomplete-types/length.cpp\nM | /lldb/trunk/test/lang/cpp/incomplete-types/length.h\nM | /lldb/trunk/test/lang/cpp/incomplete-types/main.cpp\n"}, {"commit_id": "248545", "date": "2015-09-24T21:59:48.896292Z", "author": "tfiala", "msg": "Fix tests on cmake-based OS X after rL248338\n\nSee:\nhttps://llvm.org/bugs/show_bug.cgi?id=24926\n\nfor details.  On OS X, when LLDB.framework is\nnot part of the lldb.dylib path, the supporting\nexecutable path is resolved to be the bin directory\nsitting next to the lib directory with the dylib\nlives.  Not a perfect solution, but we also can't\nbase it on the executable path since both Python\nand the lldb driver can be the executable.\n", "modified": "M | /lldb/trunk/source/Host/macosx/HostInfoMacOSX.mm\n"}, {"commit_id": "248904", "date": "2015-09-30T13:59:29.241558Z", "author": "djasper", "msg": "clang-format: Use Rewriter again to write the output files.\n\nThis has two advantages:\n1. Atomic writes.\n2. Proper handling of line endings (hopefully solving llvm.org/PR24999", "modified": "M | /cfe/trunk/tools/clang-format/ClangFormat.cpp\n"}, {"commit_id": "248983", "date": "2015-10-01T03:51:44.915568Z", "author": "jingyue", "msg": "[NaryReassociate] SeenExprs records WeakVH\n\nSummary:\nThe instructions SeenExprs records may be deleted during rewriting.\nFindClosestMatchingDominator should ignore these deleted instructions.\n\nFixes PR24301.\n\nReviewers: grosser\n\nSubscribers: grosser, llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D13315", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NaryReassociate.cpp\nA | /llvm/trunk/test/Transforms/NaryReassociate/pr24301.ll\n"}, {"commit_id": "249090", "date": "2015-10-01T22:38:51.784146Z", "author": "rikka", "msg": "Don't try to get a CXXRecordDecl from a non-class TemplateSpecializationType.\n\nWith -fms-extensions it is possible to have a non-class record that is a\ntemplate specialization cause an assertion failure via the call to\nType::getAsCXXRecordDecl. Fixes PR 24246.", "modified": "M | /cfe/trunk/lib/Sema/SemaLookup.cpp\nM | /cfe/trunk/test/SemaCXX/MicrosoftExtensions.cpp\n"}, {"commit_id": "249202", "date": "2015-10-02T22:28:48.985421Z", "author": "cbieneman", "msg": "[CMake] We need to explicitly add llvm-config before clang so that LLVM_BUILD_EXTERNAL_COMPILER_RT can depend on llvm-config.\n\nThis patch is a required stepping stone to fix PR14109.", "modified": "M | /llvm/trunk/tools/CMakeLists.txt\n"}, {"commit_id": "249358", "date": "2015-10-05T22:24:12.895377Z", "author": "kfischer", "msg": "[compiler-rt] Properly detect lack of available system libraries for arch in clang_darwin.mk\n\nSummary: This is the Makefile analog of r247833, except that the test also had to be changed such that clang actually attempts to link the program as opposed to just building it. Because of that change, I also switched the order to checking for ld/clang architecture support, because now lack of ld support would make the clang check fail. This fixes PR24776.\n\nReviewers: beanz\n\nSubscribers: llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D13425", "modified": "M | /compiler-rt/trunk/make/platform/clang_darwin.mk\nM | /compiler-rt/trunk/make/platform/clang_darwin_test_input.c\n"}, {"commit_id": "249712", "date": "2015-10-08T18:28:36.933612Z", "author": "sanjoy", "msg": "[SCEV] Pick backedge values for phi nodes correctly\n\nSummary:\n`getConstantEvolutionLoopExitValue` and `ComputeExitCountExhaustively`\nassumed all phi nodes in the loop header have the same order of incoming\nvalues.  This is not correct, and this commit changes\n`getConstantEvolutionLoopExitValue` and `ComputeExitCountExhaustively`\nto lookup the backedge value of a phi node using the loop's latch block.\n\nUnfortunately, there is still some code duplication\n`getConstantEvolutionLoopExitValue` and `ComputeExitCountExhaustively`.\nAt some point in the future we should extract out a helper class /\nmethod that can evolve constant evolution phi nodes across iterations.\n\nFixes 25060.  Thanks to Mattias Eriksson for the spot-on analysis!\n\nDepends on D13457.\n\nReviewers: atrick, hfinkel\n\nSubscribers: materi, llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D13458", "modified": "M | /llvm/trunk/lib/Analysis/ScalarEvolution.cpp\nA | /llvm/trunk/test/Transforms/IndVarSimplify/pr25060.ll\n"}, {"commit_id": "250032", "date": "2015-10-12T12:34:45.125157Z", "author": "jamesm", "msg": "[LoopVectorize] Shrink integer operations into the smallest type possible\n\nC semantics force sub-int-sized values (e.g. i8, i16) to be promoted to int\ntype (e.g. i32) whenever arithmetic is performed on them.\n\nFor targets with native i8 or i16 operations, usually InstCombine can shrink\nthe arithmetic type down again. However InstCombine refuses to create illegal\ntypes, so for targets without i8 or i16 registers, the lengthening and\nshrinking remains.\n\nMost SIMD ISAs (e.g. NEON) however support vectors of i8 or i16 even when\ntheir scalar equivalents do not, so during vectorization it is important to\nremove these lengthens and truncates when deciding the profitability of\nvectorization.\n\nThe algorithm this uses starts at truncs and icmps, trawling their use-def\nchains until they terminate or instructions outside the loop are found (or\nunsafe instructions like inttoptr casts are found). If the use-def chains\nstarting from different root instructions (truncs/icmps) meet, they are\nunioned. The demanded bits of each node in the graph are ORed together to form\nan overall mask of the demanded bits in the entire graph. The minimum bitwidth\nthat graph can be truncated to is the bitwidth minus the number of leading\nzeroes in the overall mask.\n\nThe intention is that this algorithm should \"first do no harm\", so it will\nnever insert extra cast instructions. This is why the use-def graphs are\nunioned, so that subgraphs with different minimum bitwidths do not need casts\ninserted between them.\n\nThis algorithm works hard to reduce compile time impact. DemandedBits are only\nqueried if there are extends of illegal types and if a truncate to an illegal\ntype is seen. In the general case, this results in a simple linear scan of the\ninstructions in the loop.\n\nNo non-noise compile time impact was seen on a clang bootstrap build.", "modified": "M | /llvm/trunk/include/llvm/Analysis/VectorUtils.h\nM | /llvm/trunk/lib/Analysis/VectorUtils.cpp\nM | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nA | /llvm/trunk/test/Transforms/LoopVectorize/AArch64/loop-vectorization-factors.ll\n"}, {"commit_id": "250064", "date": "2015-10-12T16:34:23.836519Z", "author": "cbieneman", "msg": "[CMake] Bug 14109 - CMake build for compiler-rt should use just-built clang\n\nSummary:\nMany small improvements to LLVM_BUILD_EXTERNAL_COMPILER_RT.\n\n* Works correctly with Ninja by working around CMake Bug 14771 (https://cmake.org/Bug/view.php?id=14771)\n* Has install-compiler-rt target, and installs as part of the default install target\n* Sets the install paths properly so that it matches the non-standalone build\n* Only generate the test targets if(LLVM_INCLUDE_TESTS)\n\nReviewers: samsonov, Bigcheese\n\nDifferential Revision: http://reviews.llvm.org/D13399", "modified": "M | /cfe/trunk/runtime/CMakeLists.txt\n"}, {"commit_id": "250488", "date": "2015-10-16T01:49:01.650093Z", "author": "gbiv", "msg": "Make __builtin_object_size more conservative\n\nr246877 made __builtin_object_size substantially more aggressive with\nunknown bases if Type=1 or Type=3, which causes issues when we encounter\ncode like this:\n\nstruct Foo {\n  int a;\n  char str[1];\n};\n\nconst char str[] = \"Hello, World!\";\nstruct Foo *f = (struct Foo *)malloc(sizeof(*f) + strlen(str));\nstrcpy(&f->str, str);\n\n__builtin_object_size(&f->str, 1) would hand back 1, which is\ntechnically correct given the type of Foo, but the type of Foo lies to\nus about how many bytes are available in this case.\n\nThis patch adds support for this \"writing off the end\" idiom -- we now\nanswer conservatively when we're given the address of the very last\nmember in a struct.\n\nDifferential Revision: http://reviews.llvm.org/D12169\n", "modified": "M | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/test/CodeGen/object-size.c\nM | /cfe/trunk/test/CodeGen/object-size.cpp\n"}, {"commit_id": "250922", "date": "2015-10-21T18:22:24.635009Z", "author": "majnemer", "msg": "[SimplifyCFG] Don't use-after-free an SSA value\n\nSimplifyTerminatorOnSelect didn't consider the possibility that the\ncondition might be related to one of PHI nodes.\n\nThis fixes PR25267.", "modified": "M | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nA | /llvm/trunk/test/Transforms/SimplifyCFG/PR25267.ll\n"}, {"commit_id": "251050", "date": "2015-10-22T19:57:29.777618Z", "author": "sanjoy", "msg": "[SCEV] Teach SCEV some axioms about non-wrapping arithmetic\n\nSummary:\n - A s<  (A + C)<nsw> if C >  0\n - A s<= (A + C)<nsw> if C >= 0\n - (A + C)<nsw> s<  A if C <  0\n - (A + C)<nsw> s<= A if C <= 0\n\nRight now `C` needs to be a constant, but we can later generalize it to\nbe a non-constant if needed.\n\nReviewers: atrick, hfinkel, reames, nlewycky\n\nSubscribers: sanjoy, llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D13686", "modified": "M | /llvm/trunk/include/llvm/Analysis/ScalarEvolution.h\nM | /llvm/trunk/lib/Analysis/ScalarEvolution.cpp\nM | /llvm/trunk/test/Transforms/IndVarSimplify/eliminate-comparison.ll\n"}, {"commit_id": "251145", "date": "2015-10-23T20:30:02.503065Z", "author": "tnorthover", "msg": "GVN: don't try to replace instruction with itself.\n\nAfter some look-ahead PRE was added for GEPs, an instruction could end\nup in the table of candidates before it was actually inspected. When\nthis happened the pass might decide it was the best candidate to\nreplace itself. This didn't go well.\n\nShould fix PR25291", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/GVN.cpp\nM | /llvm/trunk/test/Transforms/GVN/pre-gep-load.ll\n"}, {"commit_id": "251770", "date": "2015-11-02T02:06:01.258766Z", "author": "sanjoy", "msg": "[SCEV] Fix PR25369\n\nHave `getConstantEvolutionLoopExitValue` work correctly with multiple\nentry loops.\n\nAs far as I can tell, `getConstantEvolutionLoopExitValue` never did the\nright thing for multiple entry loops; and before r249712 it would\nsilently return an incorrect answer.  r249712 changed SCEV to fail an\nassert on a multiple entry loop, and this change fixes the underlying\nissue.", "modified": "M | /llvm/trunk/lib/Analysis/ScalarEvolution.cpp\nA | /llvm/trunk/test/Analysis/ScalarEvolution/pr25369.ll\n"}, {"commit_id": "252231", "date": "2015-11-05T23:20:36.098066Z", "author": "rtrieu", "msg": "Revert r251050 to fix miscompile when running Clang -O1\n\nSee bug for details: https://llvm.org/bugs/show_bug.cgi?id=25421\nSome comparisons were incorrectly replaced with a constant value.\n", "modified": "M | /llvm/trunk/include/llvm/Analysis/ScalarEvolution.h\nM | /llvm/trunk/lib/Analysis/ScalarEvolution.cpp\nM | /llvm/trunk/test/Transforms/IndVarSimplify/eliminate-comparison.ll\n"}, {"commit_id": "252236", "date": "2015-11-05T23:45:38.594751Z", "author": "sanjoy", "msg": "Re-apply r251050 with a for PR25421\n\nThe bug: I missed adding break statements in the switch / case.\n\nOriginal commit message:\n\n[SCEV] Teach SCEV some axioms about non-wrapping arithmetic\n\nSummary:\n - A s<  (A + C)<nsw> if C >  0\n - A s<= (A + C)<nsw> if C >= 0\n - (A + C)<nsw> s<  A if C <  0\n - (A + C)<nsw> s<= A if C <= 0\n\nRight now `C` needs to be a constant, but we can later generalize it to\nbe a non-constant if needed.\n\nReviewers: atrick, hfinkel, reames, nlewycky\n\nSubscribers: sanjoy, llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D13686", "modified": "M | /llvm/trunk/include/llvm/Analysis/ScalarEvolution.h\nM | /llvm/trunk/lib/Analysis/ScalarEvolution.cpp\nM | /llvm/trunk/test/Transforms/IndVarSimplify/eliminate-comparison.ll\nA | /llvm/trunk/test/Transforms/IndVarSimplify/pr25421.ll\n"}, {"commit_id": "252525", "date": "2015-11-09T23:05:05.941923Z", "author": "cbieneman", "msg": "[CMake] [macho_embedded] Check to make sure the compiler supports the architectures before generating build targets\n\nIf we don't check the compiler's capabilities we end up generating build targets that the compiler might not be able to build.", "modified": "M | /compiler-rt/trunk/cmake/Modules/CompilerRTDarwinUtils.cmake\n"}, {"commit_id": "252690", "date": "2015-11-11T02:02:15.216530Z", "author": "rsmith", "msg": "Add support for GCC's '__auto_type' extension, per the GCC manual:\nhttps://gcc.gnu.org/onlinedocs/gcc/Typeof.html\n\nDifferences from the GCC extension:\n * __auto_type is also permitted in C++ (but only in places where\n   it could appear in C), allowing its use in headers that might\n   be shared across C and C++, or used from C++98\n * __auto_type can be combined with a declarator, as with C++ auto\n   (for instance, \"__auto_type *p\")\n * multiple variables can be declared in a single __auto_type\n   declaration, with the C++ semantics (the deduced type must be\n   the same in each case)\n\nThis patch also adds a missing restriction on applying typeof to\na bit-field, which GCC has historically rejected in C (due to\nlack of clarity as to whether the operand should be promoted).\nThe same restriction also applies to __auto_type in C (in both\nGCC and Clang).\n\nThis also fixes PR25449.\n\nPatch by Nicholas Allegra!\n", "modified": "M | /cfe/trunk/include/clang/AST/ASTContext.h\nM | /cfe/trunk/include/clang/AST/Type.h\nM | /cfe/trunk/include/clang/Basic/DiagnosticGroups.td\nM | /cfe/trunk/include/clang/Basic/DiagnosticParseKinds.td\nM | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/include/clang/Basic/Specifiers.h\nM | /cfe/trunk/include/clang/Basic/TokenKinds.def\nM | /cfe/trunk/include/clang/Sema/DeclSpec.h\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/AST/ASTImporter.cpp\nM | /cfe/trunk/lib/AST/ItaniumMangle.cpp\nM | /cfe/trunk/lib/AST/MicrosoftMangle.cpp\nM | /cfe/trunk/lib/AST/Type.cpp\nM | /cfe/trunk/lib/AST/TypePrinter.cpp\nM | /cfe/trunk/lib/Format/TokenAnnotator.cpp\nM | /cfe/trunk/lib/Parse/ParseDecl.cpp\nM | /cfe/trunk/lib/Parse/ParseObjc.cpp\nM | /cfe/trunk/lib/Parse/ParseTentative.cpp\nM | /cfe/trunk/lib/Sema/DeclSpec.cpp\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateDeduction.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateVariadic.cpp\nM | /cfe/trunk/lib/Sema/SemaType.cpp\nM | /cfe/trunk/lib/Sema/TreeTransform.h\nM | /cfe/trunk/lib/Serialization/ASTReader.cpp\nM | /cfe/trunk/lib/Serialization/ASTWriter.cpp\nM | /cfe/trunk/test/CXX/dcl.dcl/dcl.spec/dcl.type/dcl.spec.auto/p3-1y.cpp\nM | /cfe/trunk/test/CXX/dcl.dcl/dcl.spec/dcl.type/dcl.spec.auto/p7-1y.cpp\nM | /cfe/trunk/test/Sema/bitfield.c\nM | /cfe/trunk/test/Sema/exprs.c\nM | /cfe/trunk/test/SemaCXX/auto-cxx0x.cpp\nM | /cfe/trunk/test/SemaCXX/cxx98-compat.cpp\n"}, {"commit_id": "253013", "date": "2015-11-13T05:32:43.869613Z", "author": "majnemer", "msg": "[Sema] __is_constructible should return false for function types\n\nWhile functions types are complete, they cannot be constructed.\n\nThis fixes PR25513.", "modified": "M | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/test/SemaCXX/type-traits.cpp\n"}, {"commit_id": "253238", "date": "2015-11-16T17:37:58.241602Z", "author": "majnemer", "msg": "[LoopStrengthReduce] Don't increment iterator past the end of the BB\n\nWe tried to move the insertion point beyond instructions like landingpad\nand cleanuppad.\nHowever, we *also* tried to move past catchpad.  This is problematic\nbecause catchpad is also a terminator.\n\nThis fixes PR25541.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopStrengthReduce.cpp\nA | /llvm/trunk/test/Transforms/LoopStrengthReduce/pr25541.ll\n"}, {"commit_id": "253495", "date": "2015-11-18T19:49:19.105497Z", "author": "majnemer", "msg": "[Sema] Don't work around a malformed AST\n\nWe created a malformed TemplateSpecializationType: it was dependent but\nhad a RecordType as it's canonical type.  This would lead getAs to\ncrash.  r249090 worked around this but we should fix this for real by\nproviding a more appropriate template specialization type as the\ncanonical type.\n\nThis fixes PR24246.", "modified": "M | /cfe/trunk/lib/Sema/SemaLookup.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\n"}, {"commit_id": "253518", "date": "2015-11-18T22:49:49.960418Z", "author": "mehdi_amini", "msg": "Fix returned value for GVN: could return \"false\" even after modifying the IR\n\nThis bug would manifest in some very specific cases where all the following\nconditions are fullfilled:\n\n- GVN didn't remove block\n- The regular GVN iteration didn't change the IR\n- PRE is enabled\n- PRE will not split critical edge\n- The last instruction processed by PRE didn't change the IR\n\nBecause the CallGraph PassManager relies on this returned value to decide\nif it needs to recompute a node after the execution of Function passes,\nnot returning the right value can lead to unexpected results.\n\nFix for: https://llvm.org/bugs/show_bug.cgi?id=24715\n\nPatch by Wenxiang Qiu <vincentqiuuu@gmail.com>\n\nFrom: Mehdi Amini <mehdi.amini@apple.com>", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/GVN.cpp\n"}, {"commit_id": "254628", "date": "2015-12-03T18:52:54.883336Z", "author": "cbieneman", "msg": "[CMake] If you're not installing the libcxx library, exclude it from the \"all\" target so it doesn't get built when you run \"ninja install\"\n\nThis is just a build dependency optimization. Running check-libcxx will still build libcxx and function as expected, it just removes libcxx from the all build and install targets.", "modified": "M | /libcxx/trunk/lib/CMakeLists.txt\n"}, {"commit_id": "255660", "date": "2015-12-15T17:38:29.696774Z", "author": "spatel", "msg": "[SimplifyCFG] allow speculation of exactly one expensive instruction (PR24818)\n\nThis is the last general step to allow more IR-level speculation with a safety harness in place in CodeGenPrepare.\n\nThe intent is to restore the behavior enabled by:\nhttp://reviews.llvm.org/rL228826\n\nbut prevent bad performance such as:\nhttps://llvm.org/bugs/show_bug.cgi?id=24818\n\nEarlier patches in this sequence:\nD12882 (disable SimplifyCFG speculation for expensive instructions)\nD13297 (have CGP despeculate expensive ops)\nD14630 (have CGP despeculate special versions of cttz/ctlz)\n\nAs shown in the test cases, we only have two instructions currently affected: ctz for some x86 and fdiv generally. \nAllowing exactly one expensive instruction is a bit of a hack, but it lines up with what is currently implemented\nin CGP. If we make the despeculation more general in CGP, we can make the speculation here more liberal.\n\nA follow-up patch will adjust the cost for sqrt and possibly other typically expensive math intrinsics (currently\neverything is cheap by default). GPU targets would likely want to override those expensive default costs (just as\nthey probably should already override the cost of div/rem) because just about any math is cheaper than control-flow\non those targets.\n\nDifferential Revision: http://reviews.llvm.org/D15213\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nM | /llvm/trunk/test/Transforms/SimplifyCFG/X86/speculate-cttz-ctlz.ll\nM | /llvm/trunk/test/Transforms/SimplifyCFG/speculate-math.ll\n"}, {"commit_id": "255690", "date": "2015-12-15T22:42:28.146774Z", "author": "chapuni", "msg": "clang/test/CodeGen/ms_this.cpp: Fix for -Asserts.", "modified": "M | /cfe/trunk/test/CodeGen/ms_this.cpp\n"}, {"commit_id": "255691", "date": "2015-12-15T22:45:09.860800Z", "author": "conghou", "msg": "[LoopVectorizer] Refine loop vectorizer's register usage calculator by ignoring specific instructions.\n\n(This is the third attempt to check in this patch, and the first two are r255454\nand r255460. The once failed test file reg-usage.ll is now moved to\ntest/Transform/LoopVectorize/X86 directory with target datalayout and target\ntriple indicated.)\n\nLoopVectorizationCostModel::calculateRegisterUsage() is used to estimate the\nregister usage for specific VFs. However, it takes into account many\ninstructions that won't be vectorized, such as induction variables,\nGetElementPtr instruction, etc.. This makes the loop vectorizer too conservative\nwhen choosing VF. In this patch, the induction variables that won't be\nvectorized plus GetElementPtr instruction will be added to ValuesToIgnore set\nso that their register usage won't be considered any more.\n\n\nDifferential revision: http://reviews.llvm.org/D15177\n\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nA | /llvm/trunk/test/Transforms/LoopVectorize/X86/reg-usage.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/X86/vector_max_bandwidth.ll\n"}, {"commit_id": "256035", "date": "2015-12-18T21:36:30.305752Z", "author": "jingyue", "msg": "[NaryReassociate] allow candidate to have a different type\n\nSummary:\nIf Candiadte may have a different type from GEP, we should bitcast or\npointer cast it to GEP's type so that the later RAUW doesn't complain.\n\nAdded a test in nary-gep.ll\n\nReviewers: tra, meheff\n\nSubscribers: mcrosier, llvm-commits, jholewinski\n\nDifferential Revision: http://reviews.llvm.org/D15618", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NaryReassociate.cpp\nM | /llvm/trunk/test/Transforms/NaryReassociate/NVPTX/nary-gep.ll\n"}, {"commit_id": "256959", "date": "2016-01-06T19:09:26.790931Z", "author": "qcolombet", "msg": "[X86] Correctly model TLS calls w.r.t. frame requirements.\nTLS calls need the stack frame to be properly set up and this\nimplies that such calls need ADJUSTSTACK_xxx markers.\n\nFixes PR25820.\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/cxx_tlscc64.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-shrink-wrapping.ll\n"}, {"commit_id": "257000", "date": "2016-01-07T00:06:27.030982Z", "author": "tejohnson", "msg": "Always treat DISubprogram reached by DIImportedEntity as needed.\n\nIt is illegal to have a null entity in a DIImportedEntity, so\nwe must link in a DISubprogram metadata node referenced by one,\neven if the associated function is not linked in or inlined anywhere.\n\nFixes PR26037.", "modified": "M | /llvm/trunk/lib/Linker/IRMover.cpp\nA | /llvm/trunk/test/Linker/Inputs/pr26037.ll\nA | /llvm/trunk/test/Linker/pr26037.ll\n"}, {"commit_id": "257019", "date": "2016-01-07T03:14:59.361236Z", "author": "ab", "msg": "[Linker] Also treat a DIImportedEntity scope DISubprogram as needed.\n\nFollow-up to r257000: DIImportedEntity can reach a DISubprogram via\nits entity, but also via its scope. Handle the latter case as well.\n\nPR26037.", "modified": "M | /llvm/trunk/lib/Linker/IRMover.cpp\nM | /llvm/trunk/test/Linker/pr26037.ll\n"}, {"commit_id": "257087", "date": "2016-01-07T19:25:39.988131Z", "author": "majnemer", "msg": "[SCCP] Can't go from overdefined to constant\n\nThe fix for PR23999 made us mark loads of null as producing the constant\nundef which upsets the lattice.  Instead, keep the load as \"undefined\".\nThis fixes PR26044.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SCCP.cpp\nA | /llvm/trunk/test/Transforms/IPConstantProp/PR26044.ll\n"}, {"commit_id": "257279", "date": "2016-01-10T07:13:04.768784Z", "author": "majnemer", "msg": "[JumpThreading] Don't forget to report that the IR changed\n\nJumpThreading's runOnFunction is supposed to return true if it made any\nchanges.  JumpThreading has a call to removeUnreachableBlocks which may\nresult in changes to the IR but runOnFunction didn't appropriate account\nfor this possibility, leading to badness.\n\nWhile we are here, make sure to call LazyValueInfo::eraseBlock in\nremoveUnreachableBlocks;  JumpThreading preserves LVI.\n\nThis fixes PR26096.", "modified": "M | /llvm/trunk/include/llvm/Transforms/Utils/Local.h\nM | /llvm/trunk/lib/Transforms/Scalar/JumpThreading.cpp\nM | /llvm/trunk/lib/Transforms/Utils/Local.cpp\n"}, {"commit_id": "257280", "date": "2016-01-10T07:13:33.885685Z", "author": "majnemer", "msg": "Add test for r257279.", "modified": "A | /llvm/trunk/test/Transforms/JumpThreading/pr26096.ll\n"}, {"commit_id": "257534", "date": "2016-01-12T22:46:09.519622Z", "author": "kfischer", "msg": "[Utils] Insert DW_OP_bit_piece when only describing part of the variable\n\nSummary: The dbg.declare -> dbg.value conversion looks through any zext/sext\nto find a value to describe the variable (in the expectation that those\nzext/sext instruction will go away later). However, those values do not\ncover the entire variable and thus need a DW_OP_bit_piece.\n\nReviewers: aprantl\nSubscribers: llvm-commits\nDifferential Revision: http://reviews.llvm.org/D16061", "modified": "M | /llvm/trunk/lib/Transforms/Utils/Local.cpp\nA | /llvm/trunk/test/Transforms/Util/split-bit-piece.ll\n"}, {"commit_id": "257626", "date": "2016-01-13T17:23:52.719429Z", "author": "spatel", "msg": "fix typo\n", "modified": "M | /llvm/trunk/lib/Analysis/ScopedNoAliasAA.cpp\n"}, {"commit_id": "257979", "date": "2016-01-16T01:15:32.068788Z", "author": "kfischer", "msg": "[DwarfDebug] Don't merge DebugLocEntries if their pieces overlap\n\nSummary:\nLater in DWARF emission we check that DebugLocEntries have\nnon-overlapping pieces, so we should create any such entries\nby merging here.\n\nFixes PR26163.\n\nReviewers: aprantl\nDifferential Revision: http://reviews.llvm.org/D16249", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nA | /llvm/trunk/test/DebugInfo/ARM/PR26163.ll\n"}, {"commit_id": "258408", "date": "2016-01-21T17:17:20.479523Z", "author": "mssimpso", "msg": "Revert \"[SLP] Truncate expressions to minimum required bit width\"\n\nThis reverts commit r258404.", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/SLPVectorizer.cpp\nM | /llvm/trunk/test/Transforms/SLPVectorizer/AArch64/gather-reduce.ll\n"}, {"commit_id": "258524", "date": "2016-01-22T19:03:27.339287Z", "author": "yrnkrn", "msg": "Merge templated static member variables, fixes http://llvm.org/pr26179.\n\nPatch by Vassil Vassilev!\nReviewed by Richard Smith.\n\n", "modified": "M | /cfe/trunk/lib/Serialization/ASTReaderDecl.cpp\nA | /cfe/trunk/test/Modules/Inputs/PR26179\nA | /cfe/trunk/test/Modules/Inputs/PR26179/A.h\nA | /cfe/trunk/test/Modules/Inputs/PR26179/B.h\nA | /cfe/trunk/test/Modules/Inputs/PR26179/basic_string.h\nA | /cfe/trunk/test/Modules/Inputs/PR26179/module.modulemap\nA | /cfe/trunk/test/Modules/pr26179.cpp\n"}, {"commit_id": "258661", "date": "2016-01-24T16:46:53.481818Z", "author": "majnemer", "msg": "Fix build bot breakage", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SCCP.cpp\n"}, {"commit_id": "258705", "date": "2016-01-25T19:24:29.464520Z", "author": "mssimpso", "msg": "Reapply commit r25804 with fix\n\nWe were hitting an assertion because we were computing smaller type sizes for\ninstructions that cannot be demoted. The fix first determines the instructions\nthat will be demoted, and then applies the smaller type size to only those\ninstructions.\n\nThis should fix PR26239.", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/SLPVectorizer.cpp\nM | /llvm/trunk/test/Transforms/SLPVectorizer/AArch64/gather-reduce.ll\n"}, {"commit_id": "258722", "date": "2016-01-25T21:29:55.855861Z", "author": "tejohnson", "msg": "[ThinLTO] Handle DISubprogram reached indirectly from DIImportedEntity\n\nExtend fix for PR26037 to identify DISubprogram reached from a\nDIImportedEntity via a DILexicalBlock.", "modified": "M | /llvm/trunk/lib/Linker/IRMover.cpp\nM | /llvm/trunk/test/Linker/pr26037.ll\n"}, {"commit_id": "258921", "date": "2016-01-27T11:02:02.584617Z", "author": "labath", "msg": "Fix linking with LLVM_LINK_LLVM_DYLIB=ON\n\nLinking with LLVM shared libraries currently produces linker errors.  This works around the issue\n(pr24953) by disabling linking with llvm so for lldb libraries.\n\nPatch by Evangelos Foutras.\n\nReviewers: zturner\n\nSubscribers: lldb-commits\n\nDifferential Revision: http://reviews.llvm.org/D16293", "modified": "M | /lldb/trunk/cmake/modules/AddLLDB.cmake\n"}, {"commit_id": "258929", "date": "2016-01-27T13:43:27.455013Z", "author": "mssimpso", "msg": "Reapply commit r258404 with fix\n\nThis patch is the second attempt to reapply commit r258404. There was bug in\nthe initial patch and subsequent fix (mentioned below).\n\nThe initial patch caused an assertion because we were computing smaller type\nsizes for instructions that cannot be demoted. The fix first determines the\ninstructions that will be demoted, and then applies the smaller type size to\nonly those instructions.\n\nThis should fix PR26239 and PR26307.", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/SLPVectorizer.cpp\nM | /llvm/trunk/test/Transforms/SLPVectorizer/AArch64/gather-reduce.ll\n"}, {"commit_id": "258971", "date": "2016-01-27T19:22:45.169217Z", "author": "spatel", "msg": "[SimplifyCFG] limit recursion depth when speculating instructions (PR26308)\n\nThis is a fix for:\nhttps://llvm.org/bugs/show_bug.cgi?id=26308\n\nWith the switch to using the TTI cost model in:\nhttp://reviews.llvm.org/rL228826\n...it became possible to hit a zero-cost cycle of instructions (gep -> phi -> gep...), \nso we need a cap for the recursion in DominatesMergePoint().\n\nA recursion depth parameter was already added for a different reason in:\nhttp://reviews.llvm.org/rL255660\n...so we can just set a limit for it.\n\nI pulled \"10\" out of the air and made it an independent parameter that we can play with.\nIt might be higher than it needs to be given the currently low default value of \nPHINodeFoldingThreshold (2). That's the starting cost value that we enter the recursion\nwith, and most instructions have cost set to TCC_Basic (1), so I don't think we're going\nto speculate more than 2 instructions with the current parameters.\n\nAs noted in the review and the TODO comment, we can do better than just limiting recursion\ndepth.\n\nDifferential Revision: http://reviews.llvm.org/D16637\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nM | /llvm/trunk/test/Transforms/SimplifyCFG/X86/switch_to_lookup_table.ll\n"}, {"commit_id": "259046", "date": "2016-01-28T13:49:33.632313Z", "author": "dsanders", "msg": "[libcxx] Work around for clang calling GAS after having already failed.\n\nSummary:\nThis is a workaround to a clang bug which causes libcxx tests to fail in the 3.8\nrelease. The clang bug is currently being investigated. It seems that clang\ndoes not stop after frontend errors when using -verify and -fno-integrated-as\n(or when this is the default). This patch adds -fsyntax-only to prevent GAS\nfrom being called, fixing the libcxx failures.\n\nPR26277\n\nPatch by Eric Fiselier\n\nReviewers: mclow.lists, hans, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D16584", "modified": "M | /libcxx/trunk/test/libcxx/test/format.py\n"}, {"commit_id": "259388", "date": "2016-02-01T19:13:28.974868Z", "author": "rnk", "msg": "[ubsan] Stop thinking we can rely on C++ ABI knowledge on Windows\n\nWe already disabled various tests relying on C++ ABI knowledge, but we\nstill tried to build in this configuration on Windows which was a\nmistake.\n\nFixes PR26415.", "modified": "M | /compiler-rt/trunk/CMakeLists.txt\nM | /compiler-rt/trunk/test/ubsan/lit.common.cfg\n"}, {"commit_id": "260009", "date": "2016-02-06T21:23:39.785585Z", "author": "grosser", "msg": "IslNodeBuilder: Invariant load hoisting of elements with differing sizes\n\nAlways use access-instruction pointer type to load the invariant values.\nOtherwise mismatches between ScopArrayInfo element type and memory access\nelement type will result in invalid casts. These type mismatches are after\nr259784 a lot more common and also arise with types of different size, which\nhave not been handled before.\n\nInterestingly, this change actually simplifies the code, as we now have only\none code path that is always taken, rather then a standard code path for the\ncommon case and a \"fixup\" code path that replaces the standard code path in\ncase of mismatching types.", "modified": "M | /polly/trunk/lib/CodeGen/IslNodeBuilder.cpp\nA | /polly/trunk/test/Isl/CodeGen/invariant_load_different_sized_types.ll\nM | /polly/trunk/test/Isl/CodeGen/multiple-types-invariant-load.ll\nM | /polly/trunk/test/ScopInfo/invariant_load_access_classes_different_base_type.ll\nM | /polly/trunk/test/ScopInfo/invariant_load_access_classes_different_base_type_escaping.ll\nM | /polly/trunk/test/ScopInfo/invariant_load_access_classes_different_base_type_same_pointer.ll\nM | /polly/trunk/test/ScopInfo/invariant_load_access_classes_different_base_type_same_pointer_escaping.ll\n"}, {"commit_id": "260085", "date": "2016-02-08T10:45:50.683192Z", "author": "sbaranga", "msg": "[SCEV][LAA] Add no wrap SCEV predicates and use use them to improve strided pointer detection\n\nSummary:\nThis change adds no wrap SCEV predicates with:\n  - support for runtime checking\n  - support for expression rewriting:\n      (sext ({x,+,y}) -> {sext(x),+,sext(y)}\n      (zext ({x,+,y}) -> {zext(x),+,sext(y)}\n\nNote that we are sign extending the increment of the SCEV, even for\nthe zext case. This is needed to cover the fairly common case where y would\nbe a (small) negative integer. In order to do this, this change adds two new\nflags: nusw and nssw that are applicable to AddRecExprs and permit the\ntransformations above.\n\nWe also change isStridedPtr in LAA to be able to make use of\nthese predicates. With this feature we should now always be able to\nwork around overflow issues in the dependence analysis.\n\nReviewers: mzolotukhin, sanjoy, anemet\n\nSubscribers: mzolotukhin, sanjoy, llvm-commits, rengolin, jmolloy, hfinkel\n\nDifferential Revision: http://reviews.llvm.org/D15412", "modified": "M | /llvm/trunk/include/llvm/Analysis/LoopAccessAnalysis.h\nM | /llvm/trunk/include/llvm/Analysis/ScalarEvolution.h\nM | /llvm/trunk/include/llvm/Analysis/ScalarEvolutionExpander.h\nM | /llvm/trunk/lib/Analysis/LoopAccessAnalysis.cpp\nM | /llvm/trunk/lib/Analysis/ScalarEvolution.cpp\nM | /llvm/trunk/lib/Analysis/ScalarEvolutionExpander.cpp\nM | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nA | /llvm/trunk/test/Analysis/LoopAccessAnalysis/wrapping-pointer-versioning.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/same-base-access.ll\n"}, {"commit_id": "260086", "date": "2016-02-08T11:15:29.680385Z", "author": "sbaranga", "msg": "[LoopVersioning] Don't assert when there are no memchecks\n\nWe shouldn't assert when there are no memchecks, since we\ncan have SCEV checks. There is already an assert covering\nthe case where there are no SCEV checks or memchecks.\n\nThis also changes the LAA pointer wrapping versioning test\nto use the loop versioning pass (this was how I managed to\ntrigger the assert in the loop versioning pass).\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Utils/LoopVersioning.cpp\nM | /llvm/trunk/test/Analysis/LoopAccessAnalysis/wrapping-pointer-versioning.ll\n"}, {"commit_id": "260662", "date": "2016-02-12T07:48:37.761893Z", "author": "hahnfeld", "msg": "[CMake] Add option to switch default C++ stdlib\n\nWith this option one can optionally override the architecture dependent\ndefault library to use if no -stdlib= is provided on compiler invocation.\n\nDifferential Revision: http://reviews.llvm.org/D15920", "modified": "M | /cfe/trunk/CMakeLists.txt\nM | /cfe/trunk/include/clang/Config/config.h.cmake\nM | /cfe/trunk/include/clang/Config/config.h.in\nM | /cfe/trunk/include/clang/Driver/ToolChain.h\nM | /cfe/trunk/lib/Driver/ToolChain.cpp\nM | /cfe/trunk/lib/Driver/ToolChains.cpp\nM | /cfe/trunk/lib/Driver/ToolChains.h\n"}, {"commit_id": "260733", "date": "2016-02-12T21:10:16.895516Z", "author": "akaylor", "msg": "[WinEH] Prevent EH state numbering from skipping nested cleanup pads that never return\n\nDifferential Revision: http://reviews.llvm.org/D17208\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/WinEHPrepare.cpp\nA | /llvm/trunk/test/CodeGen/WinEH/wineh-noret-cleanup.ll\n"}, {"commit_id": "261023", "date": "2016-02-16T22:14:03.970871Z", "author": "ab", "msg": "[X86] Don't turn (c?-v:v) into (c?-v:0) by blindly using PSIGN.\n\nCurrently, we sometimes miscompile this vector pattern:\n    (c ? -v : v)\nWe lower it to (because \"c\" is <4 x i1>, lowered as a vector mask):\n    (~c & v) | (c & -v)\n\nWhen we have SSSE3, we incorrectly lower that to PSIGN, which does:\n    (c < 0 ? -v : c > 0 ? v : 0)\nin other words, when c is either all-ones or all-zero:\n    (c ? -v : 0)\nWhile this is an old bug, it rarely triggers because the PSIGN combine\nis too sensitive to operand order. This will be improved separately.\n\nNote that the PSIGN tests are also incorrect. Consider:\n    %b.lobit = ashr <4 x i32> %b, <i32 31, i32 31, i32 31, i32 31>\n    %sub = sub nsw <4 x i32> zeroinitializer, %a\n    %0 = xor <4 x i32> %b.lobit, <i32 -1, i32 -1, i32 -1, i32 -1>\n    %1 = and <4 x i32> %a, %0\n    %2 = and <4 x i32> %b.lobit, %sub\n    %cond = or <4 x i32> %1, %2\n    ret <4 x i32> %cond\nif %b is zero:\n    %b.lobit = <4 x i32> zeroinitializer\n    %sub = sub nsw <4 x i32> zeroinitializer, %a\n    %0 = <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>\n    %1 = <4 x i32> %a\n    %2 = <4 x i32> zeroinitializer\n    %cond = or <4 x i32> %a, zeroinitializer\n    ret <4 x i32> %a\nwhereas we currently generate:\n    psignd %xmm1, %xmm0\n    retq\nwhich returns 0, as %xmm1 is 0.\n\nInstead, use a pure logic sequence, as described in:\nhttps://graphics.stanford.edu/~seander/bithacks.html#ConditionalNegate\n\nFixes PR26110.\n\nDifferential Revision: http://reviews.llvm.org/D17181", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/vector-blend.ll\n"}, {"commit_id": "261024", "date": "2016-02-16T22:14:07.763469Z", "author": "ab", "msg": "[X86] Generalize logic blend of (x, -x) combine to match (-x, x).\n\nI suspect this is what let PR26110 lie dormant for so long.", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/vector-blend.ll\n"}, {"commit_id": "261325", "date": "2016-02-19T14:10:21.939585Z", "author": "uweigand", "msg": "[SystemZ] Fix ABI for i128 argument and return types\n\nAccording to the SystemZ ABI, 128-bit integer types should be\npassed and returned via implicit reference.  However, this is\nnot currently implemented at the LLVM IR level for the i128\ntype.  This does not matter when compiling C/C++ code, since\nclang will implement the implicit reference itself.\n\nHowever, it turns out that when calling libgcc helper routines\noperating on 128-bit integers, LLVM will use i128 argument and\nreturn value types; the resulting code is not compatible with\nthe ABI used in libgcc, leading to crashes (see PR26559).\n\nThis should be simple to fix, except that i128 currently is not\neven a legal type for the SystemZ back end.  Therefore, common\ncode will already split arguments and return values into multiple\nparts.  The bulk of this patch therefore consists of detecting\nsuch parts, and correctly handling passing via implicit reference\nof a value split into multiple parts.  If at some time in the\nfuture, i128 becomes a legal type, this code can be removed again.\n\nThis fixes PR26559.\n\n", "modified": "M | /llvm/trunk/lib/Target/SystemZ/SystemZCallingConv.cpp\nM | /llvm/trunk/lib/Target/SystemZ/SystemZCallingConv.h\nM | /llvm/trunk/lib/Target/SystemZ/SystemZCallingConv.td\nM | /llvm/trunk/lib/Target/SystemZ/SystemZISelLowering.cpp\nA | /llvm/trunk/test/CodeGen/SystemZ/args-09.ll\nA | /llvm/trunk/test/CodeGen/SystemZ/args-10.ll\n"}, {"commit_id": "261368", "date": "2016-02-19T21:40:12.217070Z", "author": "hans", "msg": "Revert r255691 \"[LoopVectorizer] Refine loop vectorizer's register usage calculator by ignoring specific instructions.\"\n\nIt caused PR26509.", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nD | /llvm/trunk/test/Transforms/LoopVectorize/X86/reg-usage.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/X86/vector_max_bandwidth.ll\n"}, {"commit_id": "261633", "date": "2016-02-23T13:36:51.310986Z", "author": "aaboud", "msg": "Supporting all entities declared in lexical scope in LLVM debug info.\n\nDifferential Revision: http://reviews.llvm.org/D15976", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.h\nM | /llvm/trunk/test/DebugInfo/Generic/2010-04-06-NestedFnDbgInfo.ll\nM | /llvm/trunk/test/DebugInfo/Generic/2010-06-29-InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/Generic/cross-cu-linkonce-distinct.ll\nM | /llvm/trunk/test/DebugInfo/Generic/namespace.ll\nM | /llvm/trunk/test/DebugInfo/Generic/nodebug.ll\nM | /llvm/trunk/test/DebugInfo/Mips/InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/X86/InlinedFnLocalVar.ll\nA | /llvm/trunk/test/DebugInfo/X86/PR24008.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg-file-name.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-dead-local-var.ll\nM | /llvm/trunk/test/DebugInfo/X86/gnu-public-names.ll\nA | /llvm/trunk/test/DebugInfo/X86/lexical-block-inline.ll\nA | /llvm/trunk/test/DebugInfo/X86/lexical-block.ll\nA | /llvm/trunk/test/DebugInfo/X86/subprogram-inline.ll\n"}, {"commit_id": "261634", "date": "2016-02-23T13:37:18.567301Z", "author": "aaboud", "msg": "Supporting all entities declared in lexical scope in LLVM debug info.\n\nDifferential Revision: http://reviews.llvm.org/D15977", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-anon-union-vars.cpp\nA | /cfe/trunk/test/CodeGenCXX/debug-info-lb.cpp\n"}, {"commit_id": "261665", "date": "2016-02-23T18:39:19.042486Z", "author": "weimingz", "msg": "Fix PR25339: ARM Constant Island\n\nSummary:\nCurrently, the ARM Constant Island may not converge (or not converge quickly).\nThis patch let it move to the closest water after the user if it doesn't converge after 15 iterations.\n\nThis address https://llvm.org/bugs/show_bug.cgi?id=25339\n\nReviewers: t.p.northover, srhines, kristof.beyls, aadg, rengolin\n\nSubscribers: weimingz, aemerson, rengolin, llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D16890", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMConstantIslandPass.cpp\n"}, {"commit_id": "261670", "date": "2016-02-23T19:10:16.718219Z", "author": "hans", "msg": "Revert r261634 \"Supporting all entities declared in lexical scope in LLVM debug info.\" and r261657\n\nr261634 and r261633 seems to have caused PR26715. r261657 depends on the former two.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-anon-union-vars.cpp\nD | /cfe/trunk/test/CodeGenCXX/debug-info-lb.cpp\n"}, {"commit_id": "261671", "date": "2016-02-23T19:17:03.044016Z", "author": "hans", "msg": "Revert r261633 \"Supporting all entities declared in lexical scope in LLVM debug info.\"\n\nThis and the corresponding Clang change caused PR26715.", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.h\nM | /llvm/trunk/test/DebugInfo/Generic/2010-04-06-NestedFnDbgInfo.ll\nM | /llvm/trunk/test/DebugInfo/Generic/2010-06-29-InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/Generic/cross-cu-linkonce-distinct.ll\nM | /llvm/trunk/test/DebugInfo/Generic/namespace.ll\nM | /llvm/trunk/test/DebugInfo/Generic/nodebug.ll\nM | /llvm/trunk/test/DebugInfo/Mips/InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/X86/InlinedFnLocalVar.ll\nD | /llvm/trunk/test/DebugInfo/X86/PR24008.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg-file-name.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-dead-local-var.ll\nM | /llvm/trunk/test/DebugInfo/X86/gnu-public-names.ll\nD | /llvm/trunk/test/DebugInfo/X86/lexical-block-inline.ll\nD | /llvm/trunk/test/DebugInfo/X86/lexical-block.ll\nD | /llvm/trunk/test/DebugInfo/X86/subprogram-inline.ll\n"}, {"commit_id": "262267", "date": "2016-02-29T22:53:59.268940Z", "author": "anemet", "msg": "[LLE] Fix SingleSource/Benchmarks/Polybench/stencils/jacobi-2d-imper with Polly\n\nWe can actually have dependences between accesses with different\nunderlying types.  Bail in this case.\n\nA test will follow shortly.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopLoadElimination.cpp\n"}, {"commit_id": "262829", "date": "2016-03-07T14:05:09.279289Z", "author": "chandlerc", "msg": "[DFSan] Remove an overly aggressive assert reported in PR26068.\n\nThis code has been successfully used to bootstrap libc++ in a no-asserts\nmode for a very long time, so the code that follows cannot be completely\nincorrect. I've added a test that shows the current behavior for this\nkind of code with DFSan. If it is desirable for DFSan to do something\nspecial when processing an invoke of a variadic function, it can be\nadded, but we shouldn't keep an assert that we've been ignoring due to\nrelease builds anyways.", "modified": "M | /llvm/trunk/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp\nM | /llvm/trunk/test/Instrumentation/DataFlowSanitizer/call.ll\n"}, {"commit_id": "263325", "date": "2016-03-12T02:25:27.728475Z", "author": "qcolombet", "msg": "[X86] Make sure we do not clobber RBX with cmpxchg when used as a base pointer.\n\ncmpxchg[8|16]b uses RBX as one of its argument.\nIn other words, using this instruction clobbers RBX as it is defined to hold one\nthe input. When the backend uses dynamically allocated stack, RBX is used as a\nreserved register for the base pointer. \n\nReserved registers have special semantic that only the target understands and\nenforces, because of that, the register allocator don\u9225\u6a9b use them, but also,\ndon\u9225\u6a9b try to make sure they are used properly (remember it does not know how\nthey are supposed to be used).\n\nTherefore, when RBX is used as a reserved register but defined by something that\nis not compatible with that use, the register allocator will not fix the\nsurrounding code to make sure it gets saved and restored properly around the\nbroken code. This is the responsibility of the target to do the right thing with\nits reserved register.\n\nTo fix that, when the base pointer needs to be preserved, we use a different\npseudo instruction for cmpxchg that save rbx.\nThat pseudo takes two more arguments than the regular instruction:\n- One is the value to be copied into RBX to set the proper value for the\n  comparison.\n- The other is the virtual register holding the save of the value of RBX as the\n  base pointer. This saving is done as part of isel (i.e., we emit a copy from\n  rbx).\n\ncmpxchg_save_rbx <regular cmpxchg args>, input_for_rbx_reg, save_of_rbx_as_bp\n\nThis gets expanded into:\nrbx = copy input_for_rbx_reg\ncmpxchg <regular cmpxchg args>\nrbx = save_of_rbx_as_bp\n\nNote: The actual modeling of the pseudo is a bit more complicated to make sure\nthe interferes that appears after the pseudo gets expanded are properly modeled\nbefore that expansion.\n\nThis fixes PR26883.\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86ExpandPseudo.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.h\nM | /llvm/trunk/lib/Target/X86/X86InstrCompiler.td\nM | /llvm/trunk/lib/Target/X86/X86InstrInfo.td\nM | /llvm/trunk/test/CodeGen/X86/atomic128.ll\nA | /llvm/trunk/test/CodeGen/X86/base-pointer-and-cmpxchg.ll\n"}, {"commit_id": "263379", "date": "2016-03-13T11:11:39.777545Z", "author": "aaboud", "msg": "Fixed DIBuilder to verify that same imported entity will not be added twice to the \"imports\" list of the DICompileUnit.\n\nDifferential Revision: http://reviews.llvm.org/D17884", "modified": "M | /llvm/trunk/lib/IR/DIBuilder.cpp\nM | /llvm/trunk/unittests/IR/IRBuilderTest.cpp\n"}, {"commit_id": "263424", "date": "2016-03-14T12:03:20.932594Z", "author": "aaboud", "msg": "Recommitted r261633 \"Supporting all entities declared in lexical scope in LLVM debug info.\"\nAfter fixing PR26715 at r263379.", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.h\nM | /llvm/trunk/test/DebugInfo/Generic/2010-04-06-NestedFnDbgInfo.ll\nM | /llvm/trunk/test/DebugInfo/Generic/2010-06-29-InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/Generic/cross-cu-linkonce-distinct.ll\nM | /llvm/trunk/test/DebugInfo/Generic/namespace.ll\nM | /llvm/trunk/test/DebugInfo/Generic/nodebug.ll\nM | /llvm/trunk/test/DebugInfo/Mips/InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/X86/InlinedFnLocalVar.ll\nA | /llvm/trunk/test/DebugInfo/X86/PR24008.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg-file-name.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-dead-local-var.ll\nM | /llvm/trunk/test/DebugInfo/X86/gnu-public-names.ll\nA | /llvm/trunk/test/DebugInfo/X86/lexical-block-inline.ll\nA | /llvm/trunk/test/DebugInfo/X86/lexical-block.ll\nA | /llvm/trunk/test/DebugInfo/X86/subprogram-inline.ll\n"}, {"commit_id": "263425", "date": "2016-03-14T12:03:55.587750Z", "author": "aaboud", "msg": "Recommitted r261634 \"Supporting all entities declared in lexical scope in LLVM debug info.\"\nAfter fixing PR26715 at r263379.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-anon-union-vars.cpp\nA | /cfe/trunk/test/CodeGenCXX/debug-info-lb.cpp\n"}, {"commit_id": "263436", "date": "2016-03-14T14:58:28.063454Z", "author": "d0k", "msg": "Revert \"Recommitted r261634 \"Supporting all entities declared in lexical scope in LLVM debug info.\" After fixing PR26715 at r263379.\"\n\nThis reverts commit r263425. Breaks self-host.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-anon-union-vars.cpp\nD | /cfe/trunk/test/CodeGenCXX/debug-info-lb.cpp\n"}, {"commit_id": "263437", "date": "2016-03-14T14:58:36.047578Z", "author": "d0k", "msg": "Revert \"Recommitted r261633 \"Supporting all entities declared in lexical scope in LLVM debug info.\" After fixing PR26715 at r263379.\"\n\nThis reverts commit r263424. Breaks self-host.", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.h\nM | /llvm/trunk/test/DebugInfo/Generic/2010-04-06-NestedFnDbgInfo.ll\nM | /llvm/trunk/test/DebugInfo/Generic/2010-06-29-InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/Generic/cross-cu-linkonce-distinct.ll\nM | /llvm/trunk/test/DebugInfo/Generic/namespace.ll\nM | /llvm/trunk/test/DebugInfo/Generic/nodebug.ll\nM | /llvm/trunk/test/DebugInfo/Mips/InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/X86/InlinedFnLocalVar.ll\nD | /llvm/trunk/test/DebugInfo/X86/PR24008.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg-file-name.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-dead-local-var.ll\nM | /llvm/trunk/test/DebugInfo/X86/gnu-public-names.ll\nD | /llvm/trunk/test/DebugInfo/X86/lexical-block-inline.ll\nD | /llvm/trunk/test/DebugInfo/X86/lexical-block.ll\nD | /llvm/trunk/test/DebugInfo/X86/subprogram-inline.ll\n"}, {"commit_id": "264313", "date": "2016-03-24T17:59:26.343767Z", "author": "anemet", "msg": "[LLE] Check for mismatching types between the store and the load earlier\n\nisDependenceDistanceOfOne asserts that the store and the load access\nthrough the same type.  This function is also used by\nremoveDependencesFromMultipleStores so we need to make sure we filter\nout mismatching types before reaching this point.\n\nNow we do this when the initial candidates are gathered.\n\nThis is a refinement of the fix made in r262267.\n\nFixes PR27048.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopLoadElimination.cpp\nM | /llvm/trunk/test/Transforms/LoopLoadElim/type-mismatch.ll\n"}, {"commit_id": "264344", "date": "2016-03-24T21:40:22.004943Z", "author": "majnemer", "msg": "[LoopStrengthReduce] Don't hoist into a catchswitch\n\nWe try to hoist the insertion point as high as possible to encourage\nsharing.  However, we must be careful not to hoist into a catchswitch as\nit is both an EHPad and a terminator.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopStrengthReduce.cpp\nA | /llvm/trunk/test/Transforms/LoopStrengthReduce/pr27056.ll\n"}, {"commit_id": "264750", "date": "2016-03-29T17:24:23.775399Z", "author": "cbieneman", "msg": "[Darwin] [Builtins] Remove multi3 from the exclude list.\n\nThis addresses PR27077. For some historical reason Darwin wasn't shipping multi3 in the compiler builtin library or in the OS builtin library. This caused building ffmpeg to fail because Polly was generating calls to multi3. It is easy enough to just add the builtin.", "modified": "M | /compiler-rt/trunk/lib/builtins/Darwin-excludes/osx-i386.txt\n"}, {"commit_id": "264926", "date": "2016-03-30T21:12:06.535338Z", "author": "majnemer", "msg": "[IndVarSimplify] Don't insert after a catchswitch\n\nWidening a PHI requires us to insert a trunc.\nThe logical place for this trunc is in the same BB as the PHI.\nThis is not possible if the BB is terminated by a catchswitch.\n\nThis fixes PR27133.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/IndVarSimplify.cpp\nA | /llvm/trunk/test/Transforms/IndVarSimplify/pr27133.ll\n"}, {"commit_id": "265157", "date": "2016-04-01T17:28:15.245580Z", "author": "majnemer", "msg": "[SLPVectorizer] Don't insert an extractelement before a catchswitch\n\nA catchswitch cannot be preceded by another instruction in the same\nbasic block (other than a PHI node).\n\nInstead, insert the extract element right after the materialization of\nthe vectorized value.  This isn't optimal but is a reasonable compromise\ngiven the constraints of WinEH.\n\nThis fixes PR27163.", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/SLPVectorizer.cpp\nA | /llvm/trunk/test/Transforms/SLPVectorizer/X86/pr27163.ll\n"}, {"commit_id": "265315", "date": "2016-04-04T17:15:57.875286Z", "author": "tfiala", "msg": "Xcode: modify lldb-python-test-suite target to build inferiors with $(LLDB_PYTHON_TESTSUITE_CC)\n\n$(LLDB_PYTHON_TESTSUITE_CC) defaults to the just-built clang.  Together\nwith changes to the zorg repo, this enables the Green Dragon LLDB OS X\nXcode-based builder to run the new TSAN LLDB tests.", "modified": "M | /lldb/trunk/lldb.xcodeproj/project.pbxproj\n"}, {"commit_id": "265848", "date": "2016-04-08T20:53:26.970128Z", "author": "rsmith", "msg": "PR25501: Delay loading visible updates for a declaration until after we've\nprocessed update records. If an update record adds a definition, we need to\nmerge that with any pre-existing definition to determine which the canonical\ndefinition is before we apply the visible update, otherwise we wouldn't know\nwhere to apply it.\n\nThanks to Vassil Vassilev for help reducing this and tracking down the problem.\n", "modified": "M | /cfe/trunk/lib/Serialization/ASTReaderDecl.cpp\nA | /cfe/trunk/test/Modules/Inputs/PR25501\nA | /cfe/trunk/test/Modules/Inputs/PR25501/Vector.h\nA | /cfe/trunk/test/Modules/Inputs/PR25501/a0.h\nA | /cfe/trunk/test/Modules/Inputs/PR25501/a1.h\nA | /cfe/trunk/test/Modules/Inputs/PR25501/a2.h\nA | /cfe/trunk/test/Modules/Inputs/PR25501/b.h\nA | /cfe/trunk/test/Modules/Inputs/PR25501/module.modulemap\nA | /cfe/trunk/test/Modules/pr25501.cpp\n"}, {"commit_id": "265872", "date": "2016-04-09T14:09:08.666814Z", "author": "meinersbur", "msg": "Fix: Always honor LLVM_LIBDIR_SUFFIX.\n\nStatic libraries where installed into \"lib${LLVM_LIBDIR_SUFFIX}\" while\nshared ones into \"lib\". I found no justification for this behaviour.\nThis patch changes both types of libraries to be install into\n\"lib${LLVM_LIBDIR_SUFFIX}\". LLVM and clang use the same behaviour.\n\nThis fixes llvm.org/PR27305.", "modified": "M | /polly/trunk/cmake/polly_macros.cmake\n"}, {"commit_id": "265984", "date": "2016-04-11T19:50:46.885012Z", "author": "tnorthover", "msg": "MCParser: diagnose missing directional labels more clearly.\n\nBefore, ELF at least managed a diagnostic but it was a completely untraceable\n\"undefined symbol\" error. MachO had a variety of even worse behaviours: crash,\nemit corrupt file, or an equally bad message.", "modified": "M | /llvm/trunk/lib/MC/MCParser/AsmParser.cpp\nM | /llvm/trunk/test/MC/AArch64/error-location.s\nM | /llvm/trunk/test/MC/ARM/error-location.s\nA | /llvm/trunk/test/MC/ELF/undefined-directional.s\nA | /llvm/trunk/test/MC/MachO/undefined-directional.s\n"}, {"commit_id": "266407", "date": "2016-04-15T01:42:30.197872Z", "author": "jingham", "msg": "Add the PDBParser.{cpp,h} files to the Xcode project.\n", "modified": "M | /lldb/trunk/lldb.xcodeproj/project.pbxproj\n"}, {"commit_id": "266438", "date": "2016-04-15T15:01:38.736894Z", "author": "niravd", "msg": "Fix typing on generated LXV2DX/STXV2DX instructions\n\n[PPC] Previously when casting generic loads to LXV2DX/ST instructions we\nwould leave the original load return type in place allowing for an\nassertion failure when we merge two equivalent LXV2DX nodes with\ndifferent types.\n\nThis fixes PR27350.\n\nReviewers: nemanjai\n\nSubscribers: llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D19133", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCISelLowering.cpp\nA | /llvm/trunk/test/CodeGen/PowerPC/pr27350.ll\n"}, {"commit_id": "267210", "date": "2016-04-22T20:33:48.781843Z", "author": "reames", "msg": "[unordered] Extend load/store type canonicalization to handle unordered operations\n\nExtend the type canonicalization logic to work for unordered atomic loads and stores.  Note that while this change itself is fairly simple and low risk, there's a reasonable chance this will expose problems in the backends by suddenly generating IR they wouldn't have seen before.  Anything of this nature will be an existing bug in the backend (you could write an atomic float load), but this will definitely change the frequency with which such cases are encountered.  If you see problems, feel free to revert this change, but please make sure you collect a test case.  \n\n", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/atomic.ll\n"}, {"commit_id": "267215", "date": "2016-04-22T20:53:32.717522Z", "author": "reames", "msg": "[unordered] sink unordered stores at end of blocks\n\nThe existing code turned out to be completely correct when auditted.  Thus, only minor code changes and adding a couple of tests.\n\n", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/atomic.ll\n"}, {"commit_id": "267232", "date": "2016-04-22T22:08:42.102242Z", "author": "nico", "msg": "Revert r267210, it makes clang assert (PR27490).", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/atomic.ll\n"}, {"commit_id": "267340", "date": "2016-04-24T13:57:49.406435Z", "author": "koriakin", "msg": "[SystemZ] [SSP] Add support for LOAD_STACK_GUARD.\n\nThis fixes PR22248 on s390x.  The previous attempt at this was D19101,\nwhich was before LOAD_STACK_GUARD existed.  Compared to the previous\nversion, this always emits a rather ugly block of 4 instructions, involving\na thread pointer load that can't be shared with other potential users.\nHowever, this is necessary for SSP - spilling the guard value (or thread\npointer used to load it) is counter to the goal, since it could be\noverwritten along with the frame it protects.\n\nDifferential Revision: http://reviews.llvm.org/D19363", "modified": "M | /llvm/trunk/lib/Target/SystemZ/SystemZISelLowering.h\nM | /llvm/trunk/lib/Target/SystemZ/SystemZInstrInfo.cpp\nM | /llvm/trunk/lib/Target/SystemZ/SystemZInstrInfo.h\nM | /llvm/trunk/lib/Target/SystemZ/SystemZRegisterInfo.h\nA | /llvm/trunk/test/CodeGen/SystemZ/stack-guard.ll\n"}, {"commit_id": "267389", "date": "2016-04-25T09:27:16.832008Z", "author": "sbaranga", "msg": "[SCEV] Improve the run-time checking of the NoWrap predicate\n\nSummary:\nThis implements a new method of run-time checking the NoWrap\nSCEV predicates, which should be easier to optimize and nicer\nfor targets that don't correctly handle multiplication/addition\nof large integer types (like i128).\n\nIf the AddRec is {a,+,b} and the backedge taken count is c,\nthe idea is to check that |b| * c doesn't have unsigned overflow,\nand depending on the sign of b, that:\n\n   a + |b| * c >= a (b >= 0) or\n   a - |b| * c <= a (b <= 0)\n\nwhere the comparisons above are signed or unsigned, depending on\nthe flag that we're checking.\n\nThe advantage of doing this is that we avoid extending to a larger\ntype and we avoid the multiplication of large types (multiplying\ni128 can be expensive).\n\nReviewers: sanjoy\n\nSubscribers: llvm-commits, mzolotukhin\n\nDifferential Revision: http://reviews.llvm.org/D19266", "modified": "M | /llvm/trunk/lib/Analysis/ScalarEvolutionExpander.cpp\nM | /llvm/trunk/test/Analysis/LoopAccessAnalysis/wrapping-pointer-versioning.ll\n"}, {"commit_id": "267411", "date": "2016-04-25T14:29:18.910445Z", "author": "sbaranga", "msg": "[ARM] Add support for the X asm constraint\n\nSummary:\nThis patch adds support for the X asm constraint.\n\nTo do this, we lower the constraint to either a \"w\" or \"r\" constraint\ndepending on the operand type (both constraints are supported on ARM).\n\nFixes PR26493\n\nReviewers: t.p.northover, echristo, rengolin\n\nSubscribers: joker.eph, jgreenhalgh, aemerson, rengolin, llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D19061", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.h\nA | /llvm/trunk/test/CodeGen/ARM/inlineasm-X-allocation.ll\nA | /llvm/trunk/test/CodeGen/ARM/inlineasm-X-constraint.ll\n"}, {"commit_id": "267545", "date": "2016-04-26T10:37:14.927637Z", "author": "koriakin", "msg": "[SPARC] [SSP] Add support for LOAD_STACK_GUARD.\n\nThis fixes PR22248 on sparc.\n\nDifferential Revision: http://reviews.llvm.org/D19386", "modified": "M | /llvm/trunk/lib/Target/Sparc/SparcISelLowering.cpp\nM | /llvm/trunk/lib/Target/Sparc/SparcISelLowering.h\nM | /llvm/trunk/lib/Target/Sparc/SparcInstrInfo.cpp\nM | /llvm/trunk/lib/Target/Sparc/SparcInstrInfo.h\nM | /llvm/trunk/lib/Target/Sparc/SparcSubtarget.cpp\nM | /llvm/trunk/lib/Target/Sparc/SparcSubtarget.h\nA | /llvm/trunk/test/CodeGen/SPARC/stack-protector.ll\n"}, {"commit_id": "267575", "date": "2016-04-26T17:53:25.011934Z", "author": "cbieneman", "msg": "[CMake] [PR27403] Fix COMPILER_RT_ENABLE_IOS when using Xcode from the App Store.\n\nThis change modifies find_darwin_sdk_dir to set a variable if a Darwin \"Internal\" SDK is present which allows CMake to disable components that require internal-only APIs.\n\nThis mechanism is then used to disable TSan when an internal SDK is not present.", "modified": "M | /compiler-rt/trunk/cmake/Modules/CompilerRTDarwinUtils.cmake\nM | /compiler-rt/trunk/cmake/config-ix.cmake\n"}, {"commit_id": "268054", "date": "2016-04-29T16:07:55.413784Z", "author": "aaboud", "msg": "Recommitted r264280 \"Supporting all entities declared in lexical scope in LLVM debug info.\"\nAfter fixing PR26942 in r267004.\n", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.h\nM | /llvm/trunk/test/DebugInfo/Generic/2010-04-06-NestedFnDbgInfo.ll\nM | /llvm/trunk/test/DebugInfo/Generic/2010-06-29-InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/Generic/namespace.ll\nM | /llvm/trunk/test/DebugInfo/Mips/InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/X86/InlinedFnLocalVar.ll\nA | /llvm/trunk/test/DebugInfo/X86/PR24008.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg-file-name.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-dead-local-var.ll\nM | /llvm/trunk/test/DebugInfo/X86/gnu-public-names.ll\nA | /llvm/trunk/test/DebugInfo/X86/lexical-block-file.ll\nA | /llvm/trunk/test/DebugInfo/X86/lexical-block-inline.ll\nA | /llvm/trunk/test/DebugInfo/X86/lexical-block.ll\nA | /llvm/trunk/test/DebugInfo/X86/subprogram-inline.ll\n"}, {"commit_id": "268055", "date": "2016-04-29T16:08:08.068863Z", "author": "aaboud", "msg": "Recommitted r264281 \"Supporting all entities declared in lexical scope in LLVM debug info.\"\nAfter fixing PR26942 in r267004.\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-anon-union-vars.cpp\nA | /cfe/trunk/test/CodeGenCXX/debug-info-lb.cpp\n"}, {"commit_id": "268063", "date": "2016-04-29T16:54:18.753939Z", "author": "aaboud", "msg": "Fixed LIT tests that was broken after change in r268054.", "modified": "M | /llvm/trunk/test/DebugInfo/X86/lexical-block-file-inline.ll\n"}, {"commit_id": "268150", "date": "2016-04-30T01:44:07.951632Z", "author": "aaboud", "msg": "Reverting 268054 & 268063 as they caused PR27579.\n", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.h\nM | /llvm/trunk/test/DebugInfo/Generic/2010-04-06-NestedFnDbgInfo.ll\nM | /llvm/trunk/test/DebugInfo/Generic/2010-06-29-InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/Generic/namespace.ll\nM | /llvm/trunk/test/DebugInfo/Mips/InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/X86/InlinedFnLocalVar.ll\nD | /llvm/trunk/test/DebugInfo/X86/PR24008.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg-file-name.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-dead-local-var.ll\nM | /llvm/trunk/test/DebugInfo/X86/gnu-public-names.ll\nM | /llvm/trunk/test/DebugInfo/X86/lexical-block-file-inline.ll\nD | /llvm/trunk/test/DebugInfo/X86/lexical-block-file.ll\nD | /llvm/trunk/test/DebugInfo/X86/lexical-block-inline.ll\nD | /llvm/trunk/test/DebugInfo/X86/lexical-block.ll\nD | /llvm/trunk/test/DebugInfo/X86/subprogram-inline.ll\n"}, {"commit_id": "268151", "date": "2016-04-30T01:44:38.117594Z", "author": "aaboud", "msg": "Reverting 268055 as it caused PR27579.\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/test/CodeGenCXX/debug-info-anon-union-vars.cpp\nD | /cfe/trunk/test/CodeGenCXX/debug-info-lb.cpp\n"}, {"commit_id": "268261", "date": "2016-05-02T17:41:07.782393Z", "author": "rnk", "msg": "Expand aggregate arguments more often on 32-bit Windows\n\nBefore this change, we would pass all non-HFA record arguments on\nWindows with byval. Byval often blocks optimizations and results in bad\ncode generation. Windows now uses the existing workaround that other\nx86_32 platforms use.\n\nI also expanded the workaround to handle C++ records with constructors\non Windows. On non-Windows platforms, we have to keep generating the\nsame LLVM IR prototypes if we want our bitcode to be ABI compatible.\nOtherwise we will encounter mismatch issues like PR21573.\n\nEssentially fixes PR27522 in Clang instead of LLVM.\n\nReviewers: hans\n\nDifferential Revision: http://reviews.llvm.org/D19756", "modified": "M | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nM | /cfe/trunk/test/CodeGen/vectorcall.c\nM | /cfe/trunk/test/CodeGen/windows-struct-abi.c\nM | /cfe/trunk/test/CodeGen/x86_32-arguments-win32.c\nM | /cfe/trunk/test/CodeGenCXX/microsoft-abi-cdecl-method-sret.cpp\nM | /cfe/trunk/test/CodeGenCXX/microsoft-abi-sret-and-byval.cpp\n"}, {"commit_id": "268299", "date": "2016-05-02T20:30:03.128953Z", "author": "tra", "msg": "[CUDA] Make sure device-side __global__ functions are always visible.\n\n__global__ functions are a special case in CUDA.\n\nEven when the symbol would normally not be externally\nvisible according to C++ rules, they still must be visible\nin CUDA GPU object so host-side stub can launch them.\n\nDifferential Revision: http://reviews.llvm.org/D19748", "modified": "M | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/test/CodeGenCUDA/ptx-kernels.cu\n"}, {"commit_id": "268468", "date": "2016-05-04T00:20:48.786704Z", "author": "majnemer", "msg": "[GlobalDCE, Misc] Don't remove functions referenced by ifuncs\n\nWe forgot to consider the target of ifuncs when considering if a\nfunction was alive or dead.\n\nN.B. Also update a few auxiliary tools like bugpoint and\nverify-uselistorder.\n\nThis fixes PR27593.", "modified": "M | /llvm/trunk/include/llvm/IR/GlobalAlias.h\nM | /llvm/trunk/include/llvm/IR/GlobalIndirectSymbol.h\nM | /llvm/trunk/lib/Transforms/IPO/GlobalDCE.cpp\nM | /llvm/trunk/lib/Transforms/Utils/SplitModule.cpp\nA | /llvm/trunk/test/Transforms/GlobalDCE/global-ifunc.ll\nM | /llvm/trunk/tools/bugpoint/CrashDebugger.cpp\nM | /llvm/trunk/tools/verify-uselistorder/verify-uselistorder.cpp\n"}, {"commit_id": "268470", "date": "2016-05-04T00:22:23.898968Z", "author": "majnemer", "msg": "[X86] Lower zext i1 arguments\n\ni1 is now a legal type for X86 with AVX512.\nThere were some paths in X86FastISel which were not quite ready to see\nan i1 value: they were not quite sure how to deal with sign/zero extends\nfor call arguments.\nDTRT by extending to i8 for zeroext and bailing out of FastISel for\nsignext.\n\nThis fixes PR27591.", "modified": "M | /llvm/trunk/lib/Target/X86/X86FastISel.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr27591.ll\n"}, {"commit_id": "268479", "date": "2016-05-04T06:13:33.757764Z", "author": "majnemer", "msg": "[ConstantFolding, ValueTracking] Fold constants involving bitcasts of ConstantVector\n\nWe assumed that ConstantVectors would be rather uninteresting from the\nperspective of analysis.  However, this is not the case due to a quirk\nof how LLVM handles vectors of i1.  Vectors of i1 are not\nConstantDataVectors like vectors of i8, i16, i32 or i64 because i1's\nSizeInBits differs from it's StoreSizeInBytes.  This leads to it being\ncategorized as a ConstantVector instead of a ConstantDataVector.\n\nInstead, treat ConstantVector more uniformly.\n\nThis fixes PR27591.", "modified": "M | /llvm/trunk/lib/Analysis/ConstantFolding.cpp\nM | /llvm/trunk/lib/Analysis/ValueTracking.cpp\nA | /llvm/trunk/test/Transforms/InstCombine/pr20678.ll\n"}, {"commit_id": "268624", "date": "2016-05-05T11:35:51.943071Z", "author": "koriakin", "msg": "[X86] Extend some Linux special cases to cover kFreeBSD.\n\nBoth Linux and kFreeBSD use glibc, so follow similiar code paths.\nAdd isTargetGlibc to check for this, and use it instead of isTargetLinux\nin a few places.\n\nFixes PR22248 for kFreeBSD.\n\nDifferential Revision: http://reviews.llvm.org/D19104", "modified": "M | /llvm/trunk/include/llvm/ADT/Triple.h\nM | /llvm/trunk/lib/Target/X86/X86ISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86Subtarget.cpp\nM | /llvm/trunk/lib/Target/X86/X86Subtarget.h\nM | /llvm/trunk/test/CodeGen/X86/stack-align2.ll\nM | /llvm/trunk/test/CodeGen/X86/stack-protector-target.ll\n"}, {"commit_id": "268809", "date": "2016-05-06T22:17:01.235957Z", "author": "reames", "msg": "Reapply 267210 with fix for PR27490\n\nOriginal Commit Message\nExtend load/store type canonicalization to handle unordered operations\n\nExtend the type canonicalization logic to work for unordered atomic loads and stores.  Note that while this change itself is fairly simple and low risk, there's a reasonable chance this will expose problems in the backends by suddenly generating IR they wouldn't have seen before.  Anything of this nature will be an existing bug in the backend (you could write an atomic float load), but this will definitely change the frequency with which such cases are encountered.  If you see problems, feel free to revert this change, but please make sure you collect a test case. \n\nNote that the concern about lowering is now much less likely.  PR27490 proved that we already *were* mucking with the types of ordered atomics and volatiles.  As a result, this change doesn't introduce as much new behavior as originally thought.\n\n\n", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/atomic.ll\n"}, {"commit_id": "268907", "date": "2016-05-09T11:10:44.467875Z", "author": "sbaranga", "msg": "[AArch64] Implement lowering of the X constraint on AArch64\n\nSummary:\nThis implements the lowering of the X constraint on\nAArch64.\n\nThe default behaviour of the X constraint lowering is to\nrestrict it to \"f\". This is a problem because the \"f\"\nconstraint is not implemented on AArch64 and would be too\nrestrictive anyway. Therefore, the AArch64 hook will\nlower this to \"w\" (if the operand is a floating point or\nvector) or \"r\" otherwise.\n\nThe implementation is similar with the one added for\nARM (r267411).\n\nThis is the AArch64 side of the fix for http://llvm.org/PR26493\n\nReviewers: rengolin\n\nSubscribers: aemerson, rengolin, llvm-commits, t.p.northover\n\nDifferential Revision: http://reviews.llvm.org/D19967", "modified": "M | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.cpp\nM | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.h\nA | /llvm/trunk/test/CodeGen/AArch64/inlineasm-X-allocation.ll\nA | /llvm/trunk/test/CodeGen/AArch64/inlineasm-X-constraint.ll\n"}, {"commit_id": "269212", "date": "2016-05-11T17:41:34.050840Z", "author": "sanjoy", "msg": "[SCEVExpander] Don't break SSA in replaceCongruentIVs\n\n`SCEVExpander::replaceCongruentIVs` bypasses `hoistIVInc` if both the\noriginal and the isomorphic increments are PHI nodes.  Doing this can\nbreak SSA if the isomorphic increment is not dominated by the original\nincrement.  Get rid of the bypass, and let `hoistIVInc` do the right\nthing.\n\nFixes PR27232 (compile time crash/hang).", "modified": "M | /llvm/trunk/lib/Analysis/ScalarEvolutionExpander.cpp\nA | /llvm/trunk/test/Analysis/ScalarEvolution/expander-replace-congruent-ivs.ll\n"}, {"commit_id": "269554", "date": "2016-05-14T06:24:14.842272Z", "author": "spyffe", "msg": "Update identifiers as needed when loading macros from serialized ASTs.\n\nThis is essential for iterating across macros properly, which LLDB does when\nloading macros from modules.  A naiver version of this patch (without the\nconditional) caused assertion failures in the testsuite, but this version should\nbe safe.\n\nThanks to Ben Langmuir for the refinement that made this work.\n", "modified": "M | /cfe/trunk/lib/Serialization/ASTReader.cpp\n"}, {"commit_id": "269675", "date": "2016-05-16T18:14:07.700568Z", "author": "nico", "msg": "[ms] Reintroduce feature guards in intrinsic headers in Microsoft mode\n\nVisual Studio's C++ standard library headers include intrin.h, so the intrinsic\nheaders get included a lot more often in Microsoft mode than elsewhere. The\nAVX512 intrinsics are a lot of code (0.7 MB, causing 30% compile time overhead\nfor small programs including e.g. <string> and 6% compile time overhead for\nlarger projects like e.g. v8). Since multiversioning can't be relied on in\nMicrosoft mode (cl.exe doesn't support it), having faster compiles seems like\nthe much better tradeoff until we have a better intrinsic story going forward\n(which we'll need for e.g. PR19898).\n\nActually using intrinsics on Windows already requires the right /arch:\nsettings, so this patch should have no big behavior change.\n\nSee also thread \"The intrinsics headers (especially avx512) are too big. What\nto do about it?\" on cfe-dev.\n\nhttp://reviews.llvm.org/D20291\n", "modified": "M | /cfe/trunk/lib/Headers/immintrin.h\nM | /cfe/trunk/lib/Headers/x86intrin.h\nM | /cfe/trunk/test/CodeGen/ms-mm-align.c\n"}, {"commit_id": "269908", "date": "2016-05-18T11:57:58.062068Z", "author": "jamesm", "msg": "[VectorUtils] Fix nasty use-after-free\n\nIn truncateToMinimalBitwidths() we were RAUW'ing an instruction then erasing it. However, that intruction could be cached in the map we're iterating over. The first check is \"I->use_empty()\" which in most cases would return true, as the (deleted) object was RAUW'd first so would have zero use count. However in some cases the object could have been polluted or written over and this wouldn't be the case. Also it makes valgrind, asan and traditionalists who don't like their compiler to crash sad.\n\nNo testcase as there are no externally visible symptoms apart from a crash if the stars align.\n\nFixes PR26509.", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\n"}, {"commit_id": "270113", "date": "2016-05-19T20:38:03.049679Z", "author": "wmi", "msg": "Recommit r255691 since PR26509 has been fixed.\n", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nA | /llvm/trunk/test/Transforms/LoopVectorize/X86/reg-usage.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/X86/vector_max_bandwidth.ll\n"}, {"commit_id": "270888", "date": "2016-05-26T18:43:57.114194Z", "author": "mkuper", "msg": "[BBVectorize] Don't vectorize selects with a scalar condition and vector operands.\n\nThis fixes PR27879.\n\nDifferential Revision: http://reviews.llvm.org/D20659\n", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/BBVectorize.cpp\nA | /llvm/trunk/test/Transforms/BBVectorize/vector-sel.ll\n"}, {"commit_id": "271550", "date": "2016-06-02T17:40:51.486846Z", "author": "rnk", "msg": "[codeview] Fix crash when handling qualified void types\n\nThe DIType* for void is the null pointer. A null DIType can never be a\nqualified type, so we can just exit the loop at this point and go to\ngetTypeIndex(BaseTy).\n\nFixes PR27984", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp\nM | /llvm/trunk/test/DebugInfo/COFF/types-basic.ll\n"}, {"commit_id": "271688", "date": "2016-06-03T16:59:13.727698Z", "author": "hans", "msg": "Obj-C: Fix assert-on-invalid (PR27822)\n\nClang would assert when isObjCInstancetype() was called on a\ntok::annot_cxxscope token.", "modified": "M | /cfe/trunk/include/clang/Parse/Parser.h\nM | /cfe/trunk/test/SemaObjCXX/instancetype.mm\n"}, {"commit_id": "271891", "date": "2016-06-06T12:24:52.536971Z", "author": "ibreger", "msg": "[KNL] Fix UMULO lowering.\n\nDifferential Revision: http://reviews.llvm.org/D21013", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/xaluo.ll\n"}, {"commit_id": "272079", "date": "2016-06-08T00:34:15.505345Z", "author": "majnemer", "msg": "[ItaniumMangle] Mangle dependent __underlying_type correctly\n\nWe attempted to use the UnaryTransformType's UnderlyingType instead of\nit's BaseType.  This is not correct for dependent UnaryTransformType\nbecause the have no underlying type.\n\nThis fixes PR28045.", "modified": "M | /cfe/trunk/lib/AST/ItaniumMangle.cpp\nM | /cfe/trunk/test/CodeGenCXX/mangle.cpp\n"}, {"commit_id": "272674", "date": "2016-06-14T15:09:30.767087Z", "author": "niravd", "msg": "Fix BSS global handling in AsmPrinter\n\nChange EmitGlobalVariable to check final assembler section is in BSS\nbefore using .lcomm/.comm directive. This prevents globals from being\nput into .bss erroneously when -data-sections is used.\n\nThis fixes PR26570.\n\nReviewers: echristo, rafael\n\nSubscribers: llvm-commits, mehdi_amini\n\nDifferential Revision: http://reviews.llvm.org/D21146", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/AsmPrinter.cpp\nM | /llvm/trunk/test/CodeGen/X86/global-sections.ll\n"}, {"commit_id": "272738", "date": "2016-06-15T00:19:52.611571Z", "author": "majnemer", "msg": "[CodeView] Don't emit debuginfo for imported symbols\n\nEmitting symbol information requires us to have a definition for the\nsymbol.  A symbol reference is insufficient.\n\nThis fixes PR28123.", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp\nA | /llvm/trunk/test/DebugInfo/COFF/global-dllimport.ll\n"}, {"commit_id": "272739", "date": "2016-06-15T00:19:56.016371Z", "author": "majnemer", "msg": "[LoopUnroll] Don't crash trying to unroll loop with EH pad exit\n\nWe do not support splitting cleanuppad or catchswitches.  This is\nproblematic for passes which assume that a loop is in loop simplify\nform (the loop would have a dedicated exit block instead of sharing it).\n\nWhile it isn't great that we don't support this for cleanups, we still\ncannot make loop-simplify form an assertable precondition because\nindirectbr will also disable these sorts of CFG cleanups.\n\nThis fixes PR28132.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopUnrollPass.cpp\nA | /llvm/trunk/test/Transforms/LoopUnroll/pr28132.ll\n"}, {"commit_id": "273521", "date": "2016-06-23T00:14:29.849175Z", "author": "majnemer", "msg": "[SCCP] Don't assume all Constants are ConstantInt\n\nThis fixes PR28269.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SCCP.cpp\nM | /llvm/trunk/test/Transforms/SCCP/undef-resolve.ll\n"}, {"commit_id": "274148", "date": "2016-06-29T18:31:48.838339Z", "author": "rafael", "msg": "Don't verify inputs to the Linker if ODR merging.\n\nThis fixes pr28072.\n\nThe point, as Duncan pointed out, is that the file is already\npartially linked by just reading it.\n\nLong term I think the solution is to make metadata owned by the module\nand then the linker will lazily read it and be in charge of all the\nlinking. Running a verifier in each input will defeat the lazy\nloading, but will be legal.\n\nRight now we are at the unfortunate position that to support odr\nmerging we cannot verify the inputs, which mildly annoying (see test\nupdate).", "modified": "A | /llvm/trunk/test/Linker/Inputs/odr.ll\nM | /llvm/trunk/test/Linker/broken.ll\nA | /llvm/trunk/test/Linker/odr.ll\nM | /llvm/trunk/tools/llvm-link/llvm-link.cpp\n"}, {"commit_id": "274612", "date": "2016-07-06T08:35:17.960614Z", "author": "nha", "msg": "AMDGPU: Fix return of non-void-returning shaders\n\nSummary:\nSince \"AMDGPU: Fix verifier errors in SILowerControlFlow\", the logic that\nensures that a non-void-returning shader falls off the end of the last\nbasic block was effectively disabled, since SI_RETURN is now used.\n\nBugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=96731\n\nReviewers: arsenm, tstellarAMD\n\nSubscribers: arsenm, kzhuravl, llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D21975", "modified": "M | /llvm/trunk/lib/Target/AMDGPU/SILowerControlFlow.cpp\nM | /llvm/trunk/test/CodeGen/AMDGPU/ret_jump.ll\n"}, {"commit_id": "274623", "date": "2016-07-06T12:52:20.289823Z", "author": "skolton", "msg": "[AMDGPU] Assembler: regression tests for bug 28413. NFC", "modified": "A | /llvm/trunk/test/MC/AMDGPU/regression\nA | /llvm/trunk/test/MC/AMDGPU/regression/bug28413.s\nA | /llvm/trunk/test/MC/AMDGPU/regression/lit.local.cfg\nM | /llvm/trunk/test/MC/AMDGPU/vop1.s\n"}, {"commit_id": "274809", "date": "2016-07-07T23:57:39.190891Z", "author": "gclayton", "msg": "Fix it so that we only grab the typedef from the module DWARF file if the type that is typedef'ed is a declaration. This fixes the following bugs:\n\n<rdar://problem/26870890> [PR28156] TestWithModuleDebugging.py: failing on macOS\nhttps://llvm.org/bugs/show_bug.cgi?id=27412\nhttps://llvm.org/bugs/show_bug.cgi?id=28156\n\n", "modified": "M | /lldb/trunk/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp\n"}, {"commit_id": "276510", "date": "2016-07-23T02:56:49.319622Z", "author": "majnemer", "msg": "[LoopUnrollAnalyzer] Handle out of bounds accesses in visitLoad\n\nWhile we handed loads past the end of an array, we didn't handle loads\n_before_ the array.\n\nThis fixes PR28062.\n\nN.B. While the bug in the code is obvious, I am struggling to craft a\ntest case which is reasonable in size.", "modified": "M | /llvm/trunk/lib/Analysis/LoopUnrollAnalyzer.cpp\n"}, {"commit_id": "276701", "date": "2016-07-25T22:25:25.043639Z", "author": "rengolin", "msg": "[ARM] Saturation instructions are DSP-only\n\nThe saturation instructions appeared in v6T2, with DSP extensions, but they\nwere being accepted / generated on any, with the new introduction of the\nsaturation detection in the back-end. This commit restricts the usage to\nDSP-enable only cores.\n\nFixes PR28607.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMInstrInfo.td\nM | /llvm/trunk/lib/Target/ARM/ARMInstrThumb2.td\nA | /llvm/trunk/test/CodeGen/ARM/ssat-v4t.ll\nM | /llvm/trunk/test/CodeGen/ARM/ssat.ll\nA | /llvm/trunk/test/CodeGen/ARM/usat-v4t.ll\nM | /llvm/trunk/test/MC/Disassembler/ARM/unpredictable-SSAT-arm.txt\n"}, {"commit_id": "276979", "date": "2016-07-28T14:29:18.971166Z", "author": "sfantao", "msg": "[OpenMP][CUDA] Do not forward OpenMP flags for CUDA device actions.\n\nSummary:\nThis patch prevents OpenMP flags from being forwarded to CUDA device commands. That was causing the CUDA frontend to attempt to emit OpenMP code which is not supported.\n\nThis fixes the bug reported in https://llvm.org/bugs/show_bug.cgi?id=28723.\n\nReviewers: hfinkel, carlo.bertolli, arpith-jacob, kkwli0, tra, ABataev\n\nSubscribers: caomhin, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D22895", "modified": "M | /cfe/trunk/lib/Driver/Tools.cpp\nA | /cfe/trunk/test/Driver/offloading-interoperability.c\n"}, {"commit_id": "277439", "date": "2016-08-02T10:04:03.547102Z", "author": "bogden", "msg": "[ARM] Some saturation instructions not DSP-only\n\nSummary:\nCommit 276701 requires that targets have the DSP extensions to use\ncertain saturating instructions. This requires some corrections.\n\nFor ARM ISA the instructions in question are available in all v6*\narchitectures.\n\nFor Thumb2, the instructions in question are available from v6T2.\nSSAT and USAT are part of the base architecture while SSAT16 and\nUSAT16 require the DSP extensions.\n\nReviewers: rengolin\n\nSubscribers: aemerson, rengolin, samparker, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D23010", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMInstrInfo.td\nM | /llvm/trunk/lib/Target/ARM/ARMInstrThumb2.td\n"}, {"commit_id": "277905", "date": "2016-08-06T01:52:37.680950Z", "author": "iteratee", "msg": "CodeGen: If Convert blocks that would form a diamond when tail-merged.\n\nThe following function currently relies on tail-merging for if\nconversion to succeed. The common tail of cond_true and cond_false is\nextracted, and this then forms a diamond pattern that can be\nsuccessfully if converted.\n\nIf this block does not get extracted, either because tail-merging is\ndisabled or the threshold is higher, we should still recognize this\npattern and if-convert it.\ndefine i32 @t2(i32 %a, i32 %b) nounwind {\nentry:\n\t%tmp1434 = icmp eq i32 %a, %b\t\t; <i1> [#uses=1]\n\tbr i1 %tmp1434, label %bb17, label %bb.outer\n\nbb.outer:\t\t; preds = %cond_false, %entry\n\t%b_addr.021.0.ph = phi i32 [ %b, %entry ], [ %tmp10, %cond_false ]\n\t%a_addr.026.0.ph = phi i32 [ %a, %entry ], [ %a_addr.026.0, %cond_false ]\n\tbr label %bb\n\nbb:\t\t; preds = %cond_true, %bb.outer\n\t%indvar = phi i32 [ 0, %bb.outer ], [ %indvar.next, %cond_true ]\n\t%tmp. = sub i32 0, %b_addr.021.0.ph\n\t%tmp.40 = mul i32 %indvar, %tmp.\n\t%a_addr.026.0 = add i32 %tmp.40, %a_addr.026.0.ph\n\t%tmp3 = icmp sgt i32 %a_addr.026.0, %b_addr.021.0.ph\n\tbr i1 %tmp3, label %cond_true, label %cond_false\n\ncond_true:\t\t; preds = %bb\n\t%tmp7 = sub i32 %a_addr.026.0, %b_addr.021.0.ph\n\t%tmp1437 = icmp eq i32 %tmp7, %b_addr.021.0.ph\n\t%indvar.next = add i32 %indvar, 1\n\tbr i1 %tmp1437, label %bb17, label %bb\n\ncond_false:\t\t; preds = %bb\n\t%tmp10 = sub i32 %b_addr.021.0.ph, %a_addr.026.0\n\t%tmp14 = icmp eq i32 %a_addr.026.0, %tmp10\n\tbr i1 %tmp14, label %bb17, label %bb.outer\n\nbb17:\t\t; preds = %cond_false, %cond_true, %entry\n\t%a_addr.026.1 = phi i32 [ %a, %entry ], [ %tmp7, %cond_true ], [ %a_addr.026.0, %cond_false ]\n\tret i32 %a_addr.026.1\n}\n\nWithout tail-merging or diamond-tail if conversion:\nLBB1_1:                                 @ %bb\n                                        @ =>This Inner Loop Header: Depth=1\n        cmp     r0, r1\n        ble     LBB1_3\n@ BB#2:                                 @ %cond_true\n                                        @   in Loop: Header=BB1_1 Depth=1\n        subs    r0, r0, r1\n        cmp     r1, r0\n        it      ne\n        cmpne   r0, r1\n        bgt     LBB1_4\nLBB1_3:                                 @ %cond_false\n                                        @   in Loop: Header=BB1_1 Depth=1\n        subs    r1, r1, r0\n        cmp     r1, r0\n        bne     LBB1_1\nLBB1_4:                                 @ %bb17\n        bx      lr\n\nWith diamond-tail if conversion, but without tail-merging:\n@ BB#0:                                 @ %entry\n        cmp     r0, r1\n        it      eq\n        bxeq    lr\nLBB1_1:                                 @ %bb\n                                        @ =>This Inner Loop Header: Depth=1\n        cmp     r0, r1\n        ite     le\n        suble   r1, r1, r0\n        subgt   r0, r0, r1\n        cmp     r1, r0\n        bne     LBB1_1\n@ BB#2:                                 @ %bb17\n        bx      lr", "modified": "M | /llvm/trunk/lib/CodeGen/IfConversion.cpp\nM | /llvm/trunk/test/CodeGen/Thumb2/thumb2-ifcvt1.ll\n"}, {"commit_id": "277962", "date": "2016-08-07T20:18:04.057794Z", "author": "nico", "msg": "Revert r277905, it caused PR28894", "modified": "M | /llvm/trunk/lib/CodeGen/IfConversion.cpp\nM | /llvm/trunk/test/CodeGen/Thumb2/thumb2-ifcvt1.ll\n"}, {"commit_id": "278527", "date": "2016-08-12T17:01:19.794322Z", "author": "tfiala", "msg": "Link LLDB only against libclang and libLLVM .a files to fix macOS build\n\nThe Xcode macOS build of LLDB is currently broken after\nhttps://reviews.llvm.org/D23232 landed, see\nhttp://lab.llvm.org:8080/green/job/lldb_build_test/20014/console,\nbecause we\u9225\u6a99e trying to link against all .a files found in the\nllvm-build/lib directory. Let\u9225\u6a9a be more specific in what we link\nagainst. This patch applies a regexp to only use \u9225\u6e13ibclang.*\u9225?\n\u9225\u6e13ibLLVM.*\u9225?and not \u9225\u6e13ibclang_rt.*\u9225?static archives.\n\nChange by Kuba Mracek (formerly Kuba Brecka)\n\nSee review here:\nhttps://reviews.llvm.org/D23444\n\nReviewers: tfiala, compnerd", "modified": "M | /lldb/trunk/scripts/Xcode/build-llvm.py\n"}, {"commit_id": "278789", "date": "2016-08-16T10:41:56.512497Z", "author": "prakhar", "msg": "Correct the upper bound for a CBZ/CBNZ branch target.\n\nSummary:\nFix for the upper bound check that was causing a build failure.\n\nReviewers: olista01, rengolin, t.p.northover\n\nSubscribers: llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D23501", "modified": "M | /llvm/trunk/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp\nM | /llvm/trunk/test/MC/ARM/thumb-cb-negative-offsets.s\n"}, {"commit_id": "278988", "date": "2016-08-17T21:54:30.520757Z", "author": "cbieneman", "msg": "[Darwin] Stop linking libclang_rt.eprintf.a\n\nSummary:\nThe eprintf library was added before the general OS X builtins library existed as a place to store one builtin function. Since we have for several years had an actual mandated builtin library for OS X > 10.5, we should just merge eprintf into the main library.\n\nThis change will resolve PR28855.\n\nAs a follow up I'll also patch compiler-rt to not generate the eprintf library anymore.\n\nReviewers: ddunbar, bob.wilson\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D23531", "modified": "M | /cfe/trunk/lib/Driver/ToolChains.cpp\n"}, {"commit_id": "279141", "date": "2016-08-18T20:43:50.799924Z", "author": "deadalnix", "msg": "Make cltz and cttz zero undef when the operand cannot be zero in InstCombine\n\nSummary: Also add popcount(n) == bitsize(n)  -> n == -1 transformation.\n\nReviewers: majnemer, spatel\n\nSubscribers: llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D23134", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstCombineCalls.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/intrinsics.ll\n"}, {"commit_id": "279765", "date": "2016-08-25T18:24:35.276882Z", "author": "amccarth", "msg": "Omit column info for CodeView by default\n\nClang tracks only start columns, not start-end ranges. CodeView allows for that, but the VS debugger doesn't handle anything less than a complete range well--it either highlights the wrong part of a statement or truncates source lines in the assembly view. It's better to have no column information at all.\n\nSo by default, we'll omit the column information for CodeView targeting Windows.\n\nSince the column info is still useful for sanitizers, I've promoted -gcolumn-info (and -gno-column-info) to a CoreOption and added a couple tests to make sure that works for clang-cl.\n\nDifferential Revision: https://reviews.llvm.org/D23720", "modified": "M | /cfe/trunk/include/clang/Driver/Options.td\nM | /cfe/trunk/lib/Driver/Tools.cpp\nM | /cfe/trunk/test/Driver/cl-options.c\n"}, {"commit_id": "279833", "date": "2016-08-26T16:34:27.064316Z", "author": "inglorion", "msg": "limit the number of instructions per block examined by dead store elimination\n\nSummary: Dead store elimination gets very expensive when large numbers of instructions need to be analyzed. This patch limits the number of instructions analyzed per store to the value of the memdep-block-scan-limit parameter (which defaults to 100). This resulted in no observed difference in performance of the generated code, and no change in the statistics for the dead store elimination pass, but improved compilation time on some files by more than an order of magnitude.\n\nReviewers: dexonsmith, bruno, george.burgess.iv, dberlin, reames, davidxl\n\nSubscribers: davide, chandlerc, dberlin, davidxl, eraman, tejohnson, mbodart, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D15537", "modified": "M | /llvm/trunk/include/llvm/Analysis/MemoryDependenceAnalysis.h\nM | /llvm/trunk/lib/Analysis/MemoryDependenceAnalysis.cpp\nM | /llvm/trunk/lib/Transforms/Scalar/DeadStoreElimination.cpp\n"}, {"commit_id": "279961", "date": "2016-08-29T09:12:31.972642Z", "author": "ibreger", "msg": "Fixed a bug in type legalizer for masked gather.\nThe problem occurs when the Node doesn't updated in place , UpdateNodeOperation() return the node that already exist.\nIn this case assert fail in PromoteIntegerOperand() , N have 2 results ( val + chain).\n\nDifferential Revision: http://reviews.llvm.org/D23756", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp\nM | /llvm/trunk/test/CodeGen/X86/masked_gather_scatter.ll\n"}, {"commit_id": "280040", "date": "2016-08-30T00:59:23.484388Z", "author": "hfinkel", "msg": "[PowerPC] Add support for -mlongcall\n\nThe \"long call\" option forces the use of the indirect calling sequence for all\ncalls (even those that don't really need it). GCC provides this option; This is\nhelpful, under certain circumstances, for building very-large binaries, and\nsome other specialized use cases.\n\nFixes PR19098.", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPC.td\nM | /llvm/trunk/lib/Target/PowerPC/PPCISelLowering.cpp\nM | /llvm/trunk/lib/Target/PowerPC/PPCSubtarget.cpp\nM | /llvm/trunk/lib/Target/PowerPC/PPCSubtarget.h\nA | /llvm/trunk/test/CodeGen/PowerPC/longcall.ll\n"}, {"commit_id": "280041", "date": "2016-08-30T01:07:03.140036Z", "author": "hfinkel", "msg": "[PowerPC] Add support for -mlongcall\n\nAdd support for GCC's PowerPC -mlongcall option; the backend supports the\ncorresponding target feature as of r280040.\n\nFixes PR19098.", "modified": "M | /cfe/trunk/include/clang/Driver/Options.td\nM | /cfe/trunk/test/Driver/ppc-features.cpp\n"}, {"commit_id": "280190", "date": "2016-08-31T02:15:21.217773Z", "author": "rsmith", "msg": "PR12298 et al: don't recursively instantiate a template specialization from\nwithin the instantiation of that same specialization. This could previously\nhappen for eagerly-instantiated function templates, variable templates,\nexception specifications, default arguments, and a handful of other cases.\n\nWe still have an issue here for default template arguments that recursively\nmake use of themselves and likewise for substitution into the type of a\nnon-type template parameter, but in those cases we're producing a different\nentity each time, so they should instead be caught by the instantiation depth\nlimit. However, currently we will typically run out of stack before we reach\nit. :(\n", "modified": "M | /cfe/trunk/include/clang/AST/DeclTemplate.h\nM | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiate.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/test/SemaTemplate/instantiate-self.cpp\nM | /cfe/trunk/test/SemaTemplate/instantiation-depth-exception-spec.cpp\nM | /cfe/trunk/test/SemaTemplate/instantiation-depth.cpp\n"}, {"commit_id": "280350", "date": "2016-09-01T10:28:47.278989Z", "author": "hfinkel", "msg": "Add ISD::EH_DWARF_CFA, simplify @llvm.eh.dwarf.cfa on Mips, fix on PowerPC\n\nLLVM has an @llvm.eh.dwarf.cfa intrinsic, used to lower the GCC-compatible\n__builtin_dwarf_cfa() builtin. As pointed out in PR26761, this is currently\nbroken on PowerPC (and likely on ARM as well). Currently, @llvm.eh.dwarf.cfa is\nlowered using:\n\n  ADD(FRAMEADDR, FRAME_TO_ARGS_OFFSET)\n\nwhere FRAME_TO_ARGS_OFFSET defaults to the constant zero. On x86,\nFRAME_TO_ARGS_OFFSET is lowered to 2*SlotSize. This setup, however, does not\nwork for PowerPC. Because of the way that the stack layout works, the canonical\nframe address is not exactly (FRAMEADDR + FRAME_TO_ARGS_OFFSET) on PowerPC\n(there is a lower save-area offset as well), so it is not just a matter of\nimplementing FRAME_TO_ARGS_OFFSET for PowerPC (unless we redefine its\nsemantics -- We can do that, since it is currently used only for\n@llvm.eh.dwarf.cfa lowering, but the better to directly lower the CFA construct\nitself (since it can be easily represented as a fixed-offset FrameIndex)). Mips\ncurrently does this, but by using a custom lowering for ADD that specifically\nrecognizes the (FRAMEADDR, FRAME_TO_ARGS_OFFSET) pattern.\n\nThis change introduces a ISD::EH_DWARF_CFA node, which by default expands using\nthe existing logic, but can be directly lowered by the target. Mips is updated\nto use this method (which simplifies its implementation, and I suspect makes it\nmore robust), and updates PowerPC to do the same.\n\nFixes PR26761.\n\nDifferential Revision: https://reviews.llvm.org/D24038", "modified": "M | /llvm/trunk/include/llvm/CodeGen/ISDOpcodes.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp\nM | /llvm/trunk/lib/Target/Mips/MipsISelLowering.cpp\nM | /llvm/trunk/lib/Target/Mips/MipsISelLowering.h\nM | /llvm/trunk/lib/Target/PowerPC/PPCISelLowering.cpp\nM | /llvm/trunk/lib/Target/PowerPC/PPCISelLowering.h\nA | /llvm/trunk/test/CodeGen/PowerPC/eh-dwarf-cfa.ll\n"}, {"commit_id": "280705", "date": "2016-09-06T12:30:00.850825Z", "author": "kparzysz", "msg": "[PPC] Claim stack frame before storing into it, if no red zone is present\n\nUnlike PPC64, PPC32/SVRV4 does not have red zone. In the absence of it \nthere is no guarantee that this part of the stack will not be modified \nby any interrupt. To avoid this, make sure to claim the stack frame first\nbefore storing into it.\n\nThis fixes https://llvm.org/bugs/show_bug.cgi?id=26519.\n\nDifferential Revision: https://reviews.llvm.org/D24093\n", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCFrameLowering.cpp\nM | /llvm/trunk/test/CodeGen/PowerPC/crsave.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/empty-functions.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/ppc32-pic-large.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/ppc32-pic.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/stack-realign.ll\n"}, {"commit_id": "280944", "date": "2016-09-08T14:31:44.959769Z", "author": "hiraditya", "msg": "Added 'inline' attribute to basic_string's destructor\n\nAuthor: laxmansole\n\nReviewers: howard.hinnant\n           mclow.lists\nSubscribers: EricWF, flyingforyou, evandro\n\nDifferential Revision: https://reviews.llvm.org/D22834\n\nCurrently basic_string's destructor is not getting inlined. So adding 'inline' attribute to ~basic_string().\nWorked in collaboration with Aditya Kumar.", "modified": "M | /libcxx/trunk/include/string\n"}, {"commit_id": "280957", "date": "2016-09-08T16:15:21.241272Z", "author": "rksimon", "msg": "[InstCombine][X86] Regenerate insertps combine tests", "modified": "M | /llvm/trunk/test/Transforms/InstCombine/x86-insertps.ll\n"}, {"commit_id": "280974", "date": "2016-09-08T17:44:36.424832Z", "author": "arsenm", "msg": "AMDGPU: Sign extend constants when splitting them\n\nThis will confuse later passes which try to look at the\nimmediate value and don't truncate first.", "modified": "M | /llvm/trunk/lib/Target/AMDGPU/SIInstrInfo.cpp\n"}, {"commit_id": "281162", "date": "2016-09-11T09:00:03.399708Z", "author": "jamesm", "msg": "[SimplifyCFG] Be even more conservative in SinkThenElseCodeToEnd\n\nThis should *actually* fix PR30244. This cranks up the workaround for PR30188 so that we never sink loads or stores of allocas.\n\nThe idea is that these should be removed by SROA/Mem2Reg, and any movement of them may well confuse SROA or just cause unwanted code churn. It's not ideal that the midend should be crippled like this, but that unwanted churn can really cause significant regressions in important workloads (tsan).", "modified": "M | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nM | /llvm/trunk/test/Transforms/SimplifyCFG/inline-asm-sink.ll\nM | /llvm/trunk/test/Transforms/SimplifyCFG/sink-common-code.ll\n"}, {"commit_id": "281215", "date": "2016-09-12T14:30:48.444787Z", "author": "jamesm", "msg": "[Thumb] Teach ISel how to lower compares of AND bitmasks efficiently\n\nFor the common pattern (CMPZ (AND x, #bitmask), #0), we can do some more efficient instruction selection if the bitmask is one consecutive sequence of set bits (32 - clz(bm) - ctz(bm) == popcount(bm)).\n\n1) If the bitmask touches the LSB, then we can remove all the upper bits and set the flags by doing one LSLS.\n2) If the bitmask touches the MSB, then we can remove all the lower bits and set the flags with one LSRS.\n3) If the bitmask has popcount == 1 (only one set bit), we can shift that bit into the sign bit with one LSLS and change the condition query from NE/EQ to MI/PL (we could also implement this by shifting into the carry bit and branching on BCC/BCS).\n4) Otherwise, we can emit a sequence of LSLS+LSRS to remove the upper and lower zero bits of the mask.\n\n1-3 require only one 16-bit instruction and can elide the CMP. 4 requires two 16-bit instructions but can elide the CMP and doesn't require materializing a complex immediate, so is also a win.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMBaseInstrInfo.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelDAGToDAG.cpp\nA | /llvm/trunk/test/CodeGen/ARM/and-cmpz.ll\nM | /llvm/trunk/test/CodeGen/ARM/arm-and-tst-peephole.ll\nM | /llvm/trunk/test/CodeGen/ARM/arm-shrink-wrapping.ll\nM | /llvm/trunk/test/CodeGen/ARM/call-tc.ll\nM | /llvm/trunk/test/CodeGen/ARM/debug-info-branch-folding.ll\nM | /llvm/trunk/test/CodeGen/Thumb/thumb-shrink-wrapping.ll\nM | /llvm/trunk/test/CodeGen/Thumb2/float-ops.ll\n"}, {"commit_id": "281263", "date": "2016-09-12T21:40:50.545737Z", "author": "nico", "msg": "Revert r281215, it caused PR30358.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMBaseInstrInfo.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelDAGToDAG.cpp\nD | /llvm/trunk/test/CodeGen/ARM/and-cmpz.ll\nM | /llvm/trunk/test/CodeGen/ARM/arm-and-tst-peephole.ll\nM | /llvm/trunk/test/CodeGen/ARM/arm-shrink-wrapping.ll\nM | /llvm/trunk/test/CodeGen/ARM/call-tc.ll\nM | /llvm/trunk/test/CodeGen/ARM/debug-info-branch-folding.ll\nM | /llvm/trunk/test/CodeGen/Thumb/thumb-shrink-wrapping.ll\nM | /llvm/trunk/test/CodeGen/Thumb2/float-ops.ll\n"}, {"commit_id": "281284", "date": "2016-09-13T01:12:59.753483Z", "author": "pcc", "msg": "DebugInfo: New metadata representation for global variables.\n\nThis patch reverses the edge from DIGlobalVariable to GlobalVariable.\nThis will allow us to more easily preserve debug info metadata when\nmanipulating global variables.\n\nFixes PR30362. A program for upgrading test cases is attached to that\nbug.\n\nDifferential Revision: http://reviews.llvm.org/D20147", "modified": "M | /llvm/trunk/include/llvm/IR/DIBuilder.h\nM | /llvm/trunk/include/llvm/IR/DebugInfoMetadata.h\nM | /llvm/trunk/include/llvm/IR/GlobalVariable.h\nM | /llvm/trunk/lib/AsmParser/LLParser.cpp\nM | /llvm/trunk/lib/Bitcode/Reader/BitcodeReader.cpp\nM | /llvm/trunk/lib/Bitcode/Writer/BitcodeWriter.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/CodeViewDebug.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfExpression.cpp\nM | /llvm/trunk/lib/CodeGen/GlobalMerge.cpp\nM | /llvm/trunk/lib/IR/AsmWriter.cpp\nM | /llvm/trunk/lib/IR/DIBuilder.cpp\nM | /llvm/trunk/lib/IR/DebugInfoMetadata.cpp\nM | /llvm/trunk/lib/IR/LLVMContextImpl.h\nM | /llvm/trunk/lib/IR/Metadata.cpp\nM | /llvm/trunk/lib/IR/Verifier.cpp\nM | /llvm/trunk/lib/Linker/IRMover.cpp\nM | /llvm/trunk/lib/Transforms/IPO/StripSymbols.cpp\nM | /llvm/trunk/test/Assembler/diglobalvariable.ll\nA | /llvm/trunk/test/Bitcode/diglobalvariable-3.8.ll\nA | /llvm/trunk/test/Bitcode/diglobalvariable-3.8.ll.bc\nM | /llvm/trunk/test/Bitcode/dityperefs-3.8.ll\nM | /llvm/trunk/test/CodeGen/ARM/2010-06-25-Thumb2ITInvalidIterator.ll\nM | /llvm/trunk/test/CodeGen/ARM/2011-01-19-MergedGlobalDbg.ll\nM | /llvm/trunk/test/CodeGen/ARM/2011-08-02-MergedGlobalDbg.ll\nM | /llvm/trunk/test/CodeGen/ARM/coalesce-dbgvalue.ll\nM | /llvm/trunk/test/CodeGen/NVPTX/generic-to-nvvm-ir.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/pr17168.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/pr24546.ll\nM | /llvm/trunk/test/CodeGen/X86/fpstack-debuginstr-kill.ll\nM | /llvm/trunk/test/CodeGen/X86/misched-code-difference-with-debug.ll\nM | /llvm/trunk/test/DebugInfo/AArch64/big-endian.ll\nM | /llvm/trunk/test/DebugInfo/AArch64/bitfields.ll\nM | /llvm/trunk/test/DebugInfo/AArch64/frameindices.ll\nM | /llvm/trunk/test/DebugInfo/ARM/big-endian-bitfield.ll\nM | /llvm/trunk/test/DebugInfo/ARM/bitfield.ll\nM | /llvm/trunk/test/DebugInfo/ARM/multiple-constant-uses-drops-dbgloc.ll\nM | /llvm/trunk/test/DebugInfo/ARM/tls.ll\nM | /llvm/trunk/test/DebugInfo/COFF/anonymous-struct.ll\nM | /llvm/trunk/test/DebugInfo/COFF/big-type.ll\nM | /llvm/trunk/test/DebugInfo/COFF/bitfields.ll\nM | /llvm/trunk/test/DebugInfo/COFF/enum.ll\nM | /llvm/trunk/test/DebugInfo/COFF/global-dllimport.ll\nM | /llvm/trunk/test/DebugInfo/COFF/globals-discarded.ll\nM | /llvm/trunk/test/DebugInfo/COFF/globals.ll\nM | /llvm/trunk/test/DebugInfo/COFF/inheritance.ll\nM | /llvm/trunk/test/DebugInfo/COFF/inlining-files.ll\nM | /llvm/trunk/test/DebugInfo/COFF/inlining-header.ll\nM | /llvm/trunk/test/DebugInfo/COFF/inlining-levels.ll\nM | /llvm/trunk/test/DebugInfo/COFF/register-variables.ll\nM | /llvm/trunk/test/DebugInfo/COFF/scopes.ll\nM | /llvm/trunk/test/DebugInfo/COFF/types-array-advanced.ll\nM | /llvm/trunk/test/DebugInfo/COFF/types-nested-class.ll\nM | /llvm/trunk/test/DebugInfo/COFF/types-ptr-to-member.ll\nM | /llvm/trunk/test/DebugInfo/COFF/udts.ll\nM | /llvm/trunk/test/DebugInfo/COFF/virtual-method-kinds.ll\nM | /llvm/trunk/test/DebugInfo/COFF/vtable-optzn-array.ll\nM | /llvm/trunk/test/DebugInfo/Generic/2009-11-06-NamelessGlobalVariable.ll\nM | /llvm/trunk/test/DebugInfo/Generic/2010-06-29-InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/Generic/accel-table-hash-collisions.ll\nM | /llvm/trunk/test/DebugInfo/Generic/cross-cu-linkonce-distinct.ll\nM | /llvm/trunk/test/DebugInfo/Generic/cross-cu-linkonce.ll\nM | /llvm/trunk/test/DebugInfo/Generic/dbg-at-specficiation.ll\nM | /llvm/trunk/test/DebugInfo/Generic/debuginfofinder-forward-declaration.ll\nM | /llvm/trunk/test/DebugInfo/Generic/dwarf-public-names.ll\nM | /llvm/trunk/test/DebugInfo/Generic/enum.ll\nM | /llvm/trunk/test/DebugInfo/Generic/gvn.ll\nM | /llvm/trunk/test/DebugInfo/Generic/member-pointers.ll\nM | /llvm/trunk/test/DebugInfo/Generic/namespace.ll\nM | /llvm/trunk/test/DebugInfo/Generic/recursive_inlining.ll\nM | /llvm/trunk/test/DebugInfo/Generic/template-recursive-void.ll\nM | /llvm/trunk/test/DebugInfo/Generic/tu-member-pointer.ll\nM | /llvm/trunk/test/DebugInfo/Generic/typedef.ll\nM | /llvm/trunk/test/DebugInfo/MIR/X86/live-debug-values.mir\nM | /llvm/trunk/test/DebugInfo/Mips/InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/PowerPC/tls-fission.ll\nM | /llvm/trunk/test/DebugInfo/PowerPC/tls.ll\nM | /llvm/trunk/test/DebugInfo/X86/2011-09-26-GlobalVarContext.ll\nM | /llvm/trunk/test/DebugInfo/X86/DIModuleContext.ll\nM | /llvm/trunk/test/DebugInfo/X86/DW_AT_calling-convention.ll\nM | /llvm/trunk/test/DebugInfo/X86/DW_AT_specification.ll\nM | /llvm/trunk/test/DebugInfo/X86/DW_TAG_friend.ll\nM | /llvm/trunk/test/DebugInfo/X86/InlinedFnLocalVar.ll\nM | /llvm/trunk/test/DebugInfo/X86/PR26148.ll\nM | /llvm/trunk/test/DebugInfo/X86/arange-and-stub.ll\nM | /llvm/trunk/test/DebugInfo/X86/arange.ll\nM | /llvm/trunk/test/DebugInfo/X86/bitfields-dwarf4.ll\nM | /llvm/trunk/test/DebugInfo/X86/bitfields.ll\nM | /llvm/trunk/test/DebugInfo/X86/c-type-units.ll\nM | /llvm/trunk/test/DebugInfo/X86/concrete_out_of_line.ll\nM | /llvm/trunk/test/DebugInfo/X86/cu-ranges-odr.ll\nM | /llvm/trunk/test/DebugInfo/X86/data_member_location.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg-subrange.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg-value-inlined-parameter.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg-value-regmask-clobber.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-info-access.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-info-packed-struct.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-info-static-member.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-loc-frame.ll\nM | /llvm/trunk/test/DebugInfo/X86/debugger-tune.ll\nM | /llvm/trunk/test/DebugInfo/X86/decl-derived-member.ll\nM | /llvm/trunk/test/DebugInfo/X86/dllimport.ll\nM | /llvm/trunk/test/DebugInfo/X86/dwarf-aranges-no-dwarf-labels.ll\nM | /llvm/trunk/test/DebugInfo/X86/dwarf-aranges.ll\nM | /llvm/trunk/test/DebugInfo/X86/dwarf-linkage-names.ll\nM | /llvm/trunk/test/DebugInfo/X86/dwarf-public-names.ll\nM | /llvm/trunk/test/DebugInfo/X86/empty-array.ll\nM | /llvm/trunk/test/DebugInfo/X86/enum-class.ll\nM | /llvm/trunk/test/DebugInfo/X86/enum-fwd-decl.ll\nM | /llvm/trunk/test/DebugInfo/X86/externaltyperef.ll\nM | /llvm/trunk/test/DebugInfo/X86/fission-cu.ll\nM | /llvm/trunk/test/DebugInfo/X86/generate-odr-hash.ll\nM | /llvm/trunk/test/DebugInfo/X86/gnu-public-names.ll\nM | /llvm/trunk/test/DebugInfo/X86/inline-member-function.ll\nM | /llvm/trunk/test/DebugInfo/X86/inlined-indirect-value.ll\nM | /llvm/trunk/test/DebugInfo/X86/isel-cse-line.ll\nM | /llvm/trunk/test/DebugInfo/X86/linkage-name.ll\nM | /llvm/trunk/test/DebugInfo/X86/live-debug-values.ll\nM | /llvm/trunk/test/DebugInfo/X86/memberfnptr.ll\nM | /llvm/trunk/test/DebugInfo/X86/misched-dbg-value.ll\nM | /llvm/trunk/test/DebugInfo/X86/multiple-aranges.ll\nM | /llvm/trunk/test/DebugInfo/X86/multiple-at-const-val.ll\nM | /llvm/trunk/test/DebugInfo/X86/nondefault-subrange-array.ll\nM | /llvm/trunk/test/DebugInfo/X86/objc-fwd-decl.ll\nM | /llvm/trunk/test/DebugInfo/X86/pointer-type-size.ll\nM | /llvm/trunk/test/DebugInfo/X86/pr12831.ll\nM | /llvm/trunk/test/DebugInfo/X86/ref_addr_relocation.ll\nA | /llvm/trunk/test/DebugInfo/X86/stack-value-dwarf4.ll\nM | /llvm/trunk/test/DebugInfo/X86/stringpool.ll\nM | /llvm/trunk/test/DebugInfo/X86/struct-loc.ll\nM | /llvm/trunk/test/DebugInfo/X86/template.ll\nM | /llvm/trunk/test/DebugInfo/X86/tls.ll\nM | /llvm/trunk/test/DebugInfo/X86/type_units_with_addresses.ll\nA | /llvm/trunk/test/DebugInfo/X86/unattached-global.ll\nM | /llvm/trunk/test/DebugInfo/X86/union-template.ll\nM | /llvm/trunk/test/DebugInfo/X86/vector.ll\nM | /llvm/trunk/test/Linker/2011-08-04-Metadata.ll\nM | /llvm/trunk/test/Linker/2011-08-04-Metadata2.ll\nM | /llvm/trunk/test/Linker/odr.ll\nM | /llvm/trunk/test/Linker/only-needed-debug-metadata.ll\nM | /llvm/trunk/test/ThinLTO/X86/Inputs/crash_debuginfo.ll\nM | /llvm/trunk/test/ThinLTO/X86/Inputs/drop-debug-info.ll\nM | /llvm/trunk/test/ThinLTO/X86/crash_debuginfo.ll\nM | /llvm/trunk/test/Transforms/GCOVProfiling/return-block.ll\nA | /llvm/trunk/test/Transforms/GlobalMerge/debug-info.ll\nM | /llvm/trunk/test/Transforms/GlobalOpt/2009-03-05-dbg.ll\nM | /llvm/trunk/test/Transforms/Inline/alloca-dbgdeclare.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/dbg.value.ll\nM | /llvm/trunk/test/Transforms/SampleProfile/cov-zero-samples.ll\nM | /llvm/trunk/test/Transforms/SimplifyCFG/PR27615-simplify-cond-br.ll\nM | /llvm/trunk/test/Transforms/StripSymbols/2010-06-30-StripDebug.ll\nM | /llvm/trunk/test/Transforms/StripSymbols/strip-dead-debug-info.ll\nM | /llvm/trunk/test/tools/llvm-objdump/Hexagon/source-interleave-hexagon.ll\nM | /llvm/trunk/test/tools/llvm-objdump/X86/source-interleave-x86_64.ll\nM | /llvm/trunk/unittests/IR/MetadataTest.cpp\nM | /llvm/trunk/unittests/IR/VerifierTest.cpp\n"}, {"commit_id": "281317", "date": "2016-09-13T10:39:12.199631Z", "author": "labath", "msg": "Remove MIUtilParse (no longer used)\n\nSummary: follow-up to https://reviews.llvm.org/D23882\n\nReviewers: dawn, krytarowski, labath, ki.stfu\n\nSubscribers: beanz, mgorny, labath, ki.stfu, lldb-commits\n\nDifferential Revision: https://reviews.llvm.org/D23883\nAuthor: Micha\u8242 G\u8d38rny <mgorny@gentoo.org>", "modified": "M | /lldb/trunk/tools/lldb-mi/CMakeLists.txt\nD | /lldb/trunk/tools/lldb-mi/MIUtilParse.cpp\nD | /lldb/trunk/tools/lldb-mi/MIUtilParse.h\n"}, {"commit_id": "281451", "date": "2016-09-14T09:45:28.183255Z", "author": "jamesm", "msg": "Revert \"[Thumb] Teach ISel how to lower compares of AND bitmasks efficiently\"\n\nThis reverts commit r281323. It caused chromium test failures and a selfhost failure.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMBaseInstrInfo.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelDAGToDAG.cpp\nD | /llvm/trunk/test/CodeGen/ARM/and-cmpz.ll\nM | /llvm/trunk/test/CodeGen/ARM/arm-and-tst-peephole.ll\nM | /llvm/trunk/test/CodeGen/ARM/arm-shrink-wrapping.ll\nM | /llvm/trunk/test/CodeGen/ARM/call-tc.ll\nM | /llvm/trunk/test/CodeGen/ARM/debug-info-branch-folding.ll\nM | /llvm/trunk/test/CodeGen/Thumb/thumb-shrink-wrapping.ll\nM | /llvm/trunk/test/CodeGen/Thumb2/float-ops.ll\n"}, {"commit_id": "281562", "date": "2016-09-14T23:52:01.189608Z", "author": "ericwf", "msg": "Revert r280944 - Added 'inline' attribute to basic_string's destructor\n\nThis patch causes a couple of issues:\n\n1) It triggers http://llvm.org/PR30341. Although the bug is not truly a libc++\nbug it breaks the LLVM build using libc++. Reverting this patch is only\na temporary workaround until Clang is fixed.\n\n2) It adds yet another ABI incompatibility when libc++.so is compiled with GCC.\nSpecifically GCC doesn't ignore the _LIBCPP_INLINE_VISIBILITY on the out-of-line\ndefinition when compiling the dylib. This causes the externally instantiated\n~basic_string symbol to have hidden visibility.\n\nThis patch should be recommitted after addressing (1) and (2). (2) can be fixed\nby adding _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY which is defined as\n__attribute__((visibility(\"default\"), always_inline)) as opposed to\n_LIBCPP_INLINE_VISIBILITY which makes the symbol hidden.\n\n\n", "modified": "M | /libcxx/trunk/include/string\n"}, {"commit_id": "281841", "date": "2016-09-17T21:31:34.203858Z", "author": "rksimon", "msg": "[X86][SSE] Added vector fcopysign combine tests\n\nAlso demonstrating the poor lowering of fcopysign...\n", "modified": "A | /llvm/trunk/test/CodeGen/X86/combine-fcopysign.ll\n"}, {"commit_id": "281889", "date": "2016-09-19T08:23:08.440007Z", "author": "jamesm", "msg": "[SimplifyCFG] Update (AND) IR flags when CSE'ing instructions\n\nWe were updating metadata but not IR flags. Because we pick an arbitrary instruction to be the CSE candidate, it comes down to luck (50% or less chance) if this results in broken codegen or not, which is why PR30373 which is actually not the fault of the commit it was bisected down to.\n\nFixes PR30373.", "modified": "M | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nM | /llvm/trunk/test/Transforms/SimplifyCFG/sink-common-code.ll\n"}, {"commit_id": "281905", "date": "2016-09-19T15:22:04.893533Z", "author": "nico", "msg": "Revert r281841, it does not work on Windows (PR30443).", "modified": "D | /llvm/trunk/test/CodeGen/X86/combine-fcopysign.ll\n"}, {"commit_id": "281959", "date": "2016-09-20T06:49:17.848983Z", "author": "ctopper", "msg": "[AVX-512] Teach X86InstrInfo::copyPhysReg to use a 512-bit move if XMM16-XMM31 or YMM16-YMM31 are the source or dest of the copy and VLX is not supported.\n\nThis can happen with SUBREG_TO_REG of ZMM16-ZMM31. Fixes PR30430.", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrInfo.cpp\nM | /llvm/trunk/lib/Target/X86/X86RegisterInfo.cpp\nM | /llvm/trunk/lib/Target/X86/X86RegisterInfo.h\n"}, {"commit_id": "282059", "date": "2016-09-21T08:27:03.753669Z", "author": "dpolukhin", "msg": "PR30401: Fix substitutions for functions with abi_tag", "modified": "M | /cfe/trunk/lib/AST/ItaniumMangle.cpp\nM | /cfe/trunk/test/CodeGenCXX/mangle-abi-tag.cpp\n"}, {"commit_id": "282087", "date": "2016-09-21T16:50:24.392357Z", "author": "mssimpso", "msg": "[LV] Don't emit unused scalars for uniform instructions\n\nIf we identify an instruction as uniform after vectorization, we know that we\nshould only use the value corresponding to the first vector lane of each unroll\niteration. However, when scalarizing such instructions, we still produce values\nfor the other vector lanes. This patch prevents us from generating the unused\nscalars.\n\nDifferential Revision: https://reviews.llvm.org/D24275", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nM | /llvm/trunk/test/Transforms/LoopVectorize/induction.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/reverse_induction.ll\n"}, {"commit_id": "282174", "date": "2016-09-22T17:22:43.480289Z", "author": "kparzysz", "msg": "[PPC] Set SP after loading data from stack frame, if no red zone is present\n\nFollow-up to r280705: Make sure that the SP is only restored after all data\nis loaded from the stack frame, if there is no red zone.\n\nThis completes the fix for https://llvm.org/bugs/show_bug.cgi?id=26519.\n\nDifferential Revision: https://reviews.llvm.org/D24466\n", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCFrameLowering.cpp\nM | /llvm/trunk/test/CodeGen/PowerPC/ppc32-pic-large.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/ppc32-pic.ll\nA | /llvm/trunk/test/CodeGen/PowerPC/stack-no-redzone.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/stack-realign.ll\n"}, {"commit_id": "282580", "date": "2016-09-28T11:22:17.813119Z", "author": "guyblank", "msg": "[X86][FastISel] Use a COPY from K register to a GPR instead of a K operation\n\nThe KORTEST was introduced due to a bug where a TEST instruction used a K register.\nbut, turns out that the opposite case of KORTEST using a GPR is now happening\n\nThe change removes the KORTEST flow and adds a COPY instruction from the K reg to a GPR.\n\nDifferential Revision: https://reviews.llvm.org/D24953\n\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86FastISel.cpp\nM | /llvm/trunk/test/CodeGen/X86/avx512-fsel.ll\nA | /llvm/trunk/test/CodeGen/X86/fast-isel-load-i1.ll\nM | /llvm/trunk/test/CodeGen/X86/fast-isel-select-cmov.ll\n"}, {"commit_id": "282679", "date": "2016-09-29T03:32:04.445115Z", "author": "hiraditya", "msg": "[PR30341] Alias must point to a definition\n\nInlining the destructor caused the compiler to generate bad IR which failed the Verifier in the backend.\nhttps://llvm.org/bugs/show_bug.cgi?id=30341\n\nThis patch disables alias to available_externally definitions.\n\nReviewers: eugenis, rsmith\n\nDifferential Revision: https://reviews.llvm.org/D24682", "modified": "M | /cfe/trunk/lib/CodeGen/CGCXX.cpp\nA | /cfe/trunk/test/CodeGenCXX/alias-available-externally.cpp\n"}, {"commit_id": "282710", "date": "2016-09-29T11:37:23.531095Z", "author": "hiraditya", "msg": "Revert \"[PR30341] Alias must point to a definition\"\n\nThis reverts commit r282679.\n\nNinja check fails, reverting to debug the issue.", "modified": "M | /cfe/trunk/lib/CodeGen/CGCXX.cpp\nD | /cfe/trunk/test/CodeGenCXX/alias-available-externally.cpp\n"}, {"commit_id": "282863", "date": "2016-09-30T15:13:52.200917Z", "author": "mssimpso", "msg": "[LV] Build all scalar steps for non-uniform induction variables\n\nWhen building the steps for scalar induction variables, we previously attempted\nto determine if all the scalar users of the induction variable were uniform. If\nthey were, we would only emit the step corresponding to vector lane zero. This\noptimization was too aggressive. We generally don't know the entire set of\ninduction variable users that will be scalar. We have\nisScalarAfterVectorization, but this is only a conservative estimate of the\ninstructions that will be scalarized. Thus, an induction variable may have\nscalar users that aren't already known to be scalar. To avoid emitting unused\nsteps, we can only check that the induction variable is uniform. This should\nfix PR30542.\n\nReference: https://llvm.org/bugs/show_bug.cgi?id=30542", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nM | /llvm/trunk/test/Transforms/LoopVectorize/induction.ll\n"}, {"commit_id": "283063", "date": "2016-10-02T03:06:36.051651Z", "author": "hiraditya", "msg": "Alias must point to a definition\n\nReapplying the patch after modifying the test case.\n\nInlining the destructor caused the compiler to generate bad IR which failed the Verifier in the backend.\nhttps://llvm.org/bugs/show_bug.cgi?id=30341\n\nThis patch disables alias to available_externally definitions.\n\nReviewers: eugenis, rsmith\n\nDifferential Revision: https://reviews.llvm.org/D24682", "modified": "M | /cfe/trunk/lib/CodeGen/CGCXX.cpp\nA | /cfe/trunk/test/CodeGenCXX/alias-available-externally.cpp\n"}, {"commit_id": "283072", "date": "2016-10-02T17:07:24.392827Z", "author": "spatel", "msg": "[x86] remove 'nan' strings from copysign assertions; NFC\n\nPreemptively scrubbing these to avoid a bot fail as in PR30443:\nhttps://llvm.org/bugs/show_bug.cgi?id=30443\n\nI'm nearly done with a patch to fix these cases, so not trying very\nhard to do better for the temporary win. \n\nI plan to use better checks than what the script produces for the vectorized cases.\n", "modified": "M | /llvm/trunk/test/CodeGen/X86/vec-copysign.ll\n"}, {"commit_id": "283569", "date": "2016-10-07T16:00:59.189945Z", "author": "rksimon", "msg": "[X86][SSE] Reapplied: Add vector fcopysign combine tests\n\nNow with better lowering and fix for PR30443", "modified": "A | /llvm/trunk/test/CodeGen/X86/combine-fcopysign.ll\n"}, {"commit_id": "283669", "date": "2016-10-08T18:50:00.196105Z", "author": "ctopper", "msg": "[AVX-512] Add test case for PR30430 that I should have added in r281959.", "modified": "A | /llvm/trunk/test/CodeGen/X86/pr30430.ll\n"}, {"commit_id": "284136", "date": "2016-10-13T17:33:22.289161Z", "author": "rnk", "msg": "Truncate long names in type records\n\nIn the MS ABI, the frontend is supposed to MD5 such pathologically long\nnames. LLVM should still defend itself from long names, though.\n\nFixes part of PR29098.", "modified": "M | /llvm/trunk/include/llvm/DebugInfo/CodeView/TypeRecordBuilder.h\nM | /llvm/trunk/lib/DebugInfo/CodeView/TypeRecordBuilder.cpp\nM | /llvm/trunk/lib/DebugInfo/CodeView/TypeTableBuilder.cpp\nA | /llvm/trunk/test/DebugInfo/COFF/long-type-name.ll\n"}, {"commit_id": "284797", "date": "2016-10-21T01:41:56.684096Z", "author": "bruno", "msg": "[Modules] Add 'no_undeclared_includes' module map attribute\n\nThe 'no_undeclared_includes' attribute should be used in a module to\ntell that only non-modular headers and headers from used modules are\naccepted.\n\nThe main motivation behind this is to prevent dep cycles between system\nlibraries (such as darwin) and libc++.\n\nPatch by Richard Smith!", "modified": "M | /cfe/trunk/docs/Modules.rst\nM | /cfe/trunk/include/clang/Basic/Module.h\nM | /cfe/trunk/include/clang/Lex/HeaderSearch.h\nM | /cfe/trunk/include/clang/Lex/ModuleMap.h\nM | /cfe/trunk/lib/Basic/Module.cpp\nM | /cfe/trunk/lib/Lex/HeaderSearch.cpp\nM | /cfe/trunk/lib/Lex/ModuleMap.cpp\nM | /cfe/trunk/test/Modules/Inputs/System/usr/include/stdbool.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/include\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/include/c++\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/include/c++/math.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/include/c++/module.modulemap\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/include/c++/stdlib.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/include/math.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/include/module.modulemap\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/include/stdlib.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/c++\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/c++/v1\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/c++/v1/__config\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/c++/v1/math.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/c++/v1/module.modulemap\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/c++/v1/stddef.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/c++/v1/stdio.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/c++/v1/stdlib.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/math.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/module.modulemap\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/stddef.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/stdint.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/stdio.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/stdlib.h\nA | /cfe/trunk/test/Modules/Inputs/libc-libcxx/sysroot/usr/include/util.h\nA | /cfe/trunk/test/Modules/libc-libcxx.cpp\n"}, {"commit_id": "284801", "date": "2016-10-21T03:14:27.688791Z", "author": "bruno", "msg": "[ModuleMap] Add more module entries to cover some non modular headers\n\nThese modules are necessary on Darwin to allow modules with\n'no_undeclared_includes' (introduced in clang r284797) to work properly\nwhile using libc++ headers.\n\nPatch extracted from a suggested module.modulemap from Richard Smith!", "modified": "M | /libcxx/trunk/include/module.modulemap\n"}, {"commit_id": "284908", "date": "2016-10-22T02:41:39.523359Z", "author": "ghoflehner", "msg": "[BasicAA] Fix -  missed alias in GEP expressions\n\nIn BasicAA GEP operand values get adjusted (\"wrap-around\") based on the\npointersize. Otherwise, in non-64b modes, AA could report false negatives.\nHowever, a wrap-around is valid only for a fully evaluated expression.\nIt had been introduced to fix an alias problem in\nhttp://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20160118/326163.html.\nThis commit restricts the wrap-around to constant gep operands only where the\nvalue is known at compile-time.\n\n", "modified": "M | /llvm/trunk/lib/Analysis/BasicAliasAnalysis.cpp\nA | /llvm/trunk/test/Analysis/BasicAA/gep-and-alias.ll\n"}, {"commit_id": "286501", "date": "2016-11-10T20:44:05.295783Z", "author": "rnk", "msg": "[asan/win] Move breakpoint from Abort to internal__exit\n\nNow that we use TerminateProcess, the debugger doesn't stop on program\nexit. Add this breakpoint so that the debugger stops after asan reports\nan error and is prepared to exit the program.", "modified": "M | /compiler-rt/trunk/lib/sanitizer_common/sanitizer_win.cc\n"}, {"commit_id": "286670", "date": "2016-11-11T23:17:49.601378Z", "author": "eugenis", "msg": "Tread TSan LLVM flags to driver: unit tests.\n\nSummary: Unit tests for the new clang flags.\n\nReviewers: eugenis, dvyukov\n\nSubscribers: kubabrecka, llvm-commits\n\nPatch by Alex Shlyapnikov.\n\nDifferential Revision: https://reviews.llvm.org/D26462", "modified": "M | /compiler-rt/trunk/test/tsan/atomic_free.cc\nM | /compiler-rt/trunk/test/tsan/global_race.cc\nM | /compiler-rt/trunk/test/tsan/simple_stack.c\n"}, {"commit_id": "286748", "date": "2016-11-13T06:09:16.107453Z", "author": "faisalv", "msg": "Fix PR28366: Handle variables from enclosing local scopes more gracefully during constant expression evaluation.\n\nOnly look for a variable's value in the constant expression evaluation activation frame, if the variable was indeed declared in that frame, otherwise it might be a constant expression and be usable within a nested local scope or emit an error.\n\n\nvoid f(char c) { \n  struct X {\n    static constexpr char f() { \n      return c; // error gracefully here as opposed to crashing.\n    }\n  };\n  int I = X::f();\n}\n\n", "modified": "M | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/test/SemaCXX/constant-expression-cxx11.cpp\nM | /cfe/trunk/test/SemaCXX/cxx1z-constexpr-lambdas.cpp\n"}, {"commit_id": "287359", "date": "2016-11-18T18:21:06.464253Z", "author": "compnerd", "msg": "builtins: repair the builtins build with clang 3.8\n\nWhen the C unwinding personality was corrected to match the ARM EHABI\nspecification, the unwind header in clang was updated with necessary\ndeclarations.  However, when building with an older compiler, we would not have\nthe necessary declarations.  This would result in a build failure.  Provide a\nsupplementary header to ensure that the necessary declarations are present for\nthe build of the C unwinding personality.\n\nNote that this is NOT an ABI break.  It merely is a compile time failure due to\nthe constants not being present.  The constants here are reproduced\nequivalently.  This header should permit building with clang[<3.9] as well as\ngcc.\n\nAddresses PR31035!", "modified": "M | /compiler-rt/trunk/lib/builtins/gcc_personality_v0.c\nA | /compiler-rt/trunk/lib/builtins/unwind-ehabi-helpers.h\n"}, {"commit_id": "289228", "date": "2016-12-09T17:32:52.193760Z", "author": "nico", "msg": "Don't assert when redefining a built-in macro in a PCH, PR29119\n\nPCH files store the macro history for a given macro, and the whole history list\nfor one identifier is given to the Preprocessor at once via\nPreprocessor::setLoadedMacroDirective(). This contained an assert that no macro\nhistory exists yet for that identifier. That's usually true, but it's not true\nfor builtin macros, which are created in Preprocessor() before flags and pchs\nare processed. Luckily, ASTWriter stops writing macro history lists at builtins\n(see shouldIgnoreMacro() in ASTWriter.cpp), so the head of the history list was\nmissing for builtin macros. So make the assert weaker, and splice the history\nlist to the existing single define for builtins.\n\nhttps://reviews.llvm.org/D27545\n", "modified": "M | /cfe/trunk/include/clang/Lex/Preprocessor.h\nM | /cfe/trunk/lib/Lex/PPMacroExpansion.cpp\nM | /cfe/trunk/lib/Serialization/ASTReader.cpp\nA | /cfe/trunk/test/PCH/builtin-macro.c\n"}, {"commit_id": "289252", "date": "2016-12-09T19:01:11.521504Z", "author": "yaxunl", "msg": "Add support for non-zero null pointer for C and OpenCL\n\nIn amdgcn target, null pointers in global, constant, and generic address space take value 0 but null pointers in private and local address space take value -1. Currently LLVM assumes all null pointers take value 0, which results in incorrectly translated IR. To workaround this issue, instead of emit null pointers in local and private address space, a null pointer in generic address space is emitted and casted to local and private address space.\n\nTentative definition of global variables with non-zero initializer will have weak linkage instead of common linkage since common linkage requires zero initializer and does not have explicit section to hold the non-zero value.\n\nVirtual member functions getNullPointer and performAddrSpaceCast are added to TargetCodeGenInfo which by default returns ConstantPointerNull and emitting addrspacecast instruction. A virtual member function getNullPointerValue is added to TargetInfo which by default returns 0. Each target can override these virtual functions to get target specific null pointer and the null pointer value for specific address space, and perform specific translations for addrspacecast.\n\nWrapper functions getNullPointer is added to CodegenModule and getTargetNullPointerValue is added to ASTContext to facilitate getting the target specific null pointers and their values.\n\nThis change has no effect on other targets except amdgcn target. Other targets can provide support of non-zero null pointer in a similar way.\n\nThis change only provides support for non-zero null pointer for C and OpenCL. Supporting for other languages will be added later incrementally.\n\nDifferential Revision: https://reviews.llvm.org/D26196\n", "modified": "M | /cfe/trunk/include/clang/AST/APValue.h\nM | /cfe/trunk/include/clang/AST/ASTContext.h\nM | /cfe/trunk/include/clang/Basic/TargetInfo.h\nM | /cfe/trunk/lib/AST/APValue.cpp\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/Basic/Targets.cpp\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprAgg.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprConstant.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.h\nM | /cfe/trunk/lib/CodeGen/CodeGenTypes.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenTypes.h\nM | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nM | /cfe/trunk/lib/CodeGen/TargetInfo.h\nA | /cfe/trunk/test/CodeGenOpenCL/amdgpu-nullptr.cl\n"}, {"commit_id": "289285", "date": "2016-12-09T22:45:21.112784Z", "author": "rksimon", "msg": "Fix unused variable warnings. NFCI.", "modified": "M | /cfe/trunk/lib/CodeGen/CGExprConstant.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenTypes.cpp\n"}, {"commit_id": "289708", "date": "2016-12-14T21:22:48.864003Z", "author": "ericwf", "msg": "Recommit r286884: P0503R0, adopted in Issaquah, rewords some requirements on nullptr_t and istream_iterator.\n\nNo code changes were needed, but I updated a few tests.\nAlso resolved P0509 and P0521, which required no changes to the library or tests.\n\nThis patch was reverted due to llvm.org/PR31016. There is a bug in Clang 3.7\nwhich causes default.pass.cpp to fails. That test is now marked as XFAIL for that\nclang version.\n\nThis patch was originally authored by Marshall Clow.", "modified": "M | /libcxx/trunk/test/std/iterators/stream.iterators/istream.iterator/istream.iterator.cons/copy.pass.cpp\nM | /libcxx/trunk/test/std/iterators/stream.iterators/istream.iterator/istream.iterator.cons/default.pass.cpp\nM | /libcxx/trunk/test/std/iterators/stream.iterators/istream.iterator/types.pass.cpp\nM | /libcxx/trunk/www/cxx1z_status.html\n"}, {"commit_id": "289713", "date": "2016-12-14T21:38:18.797441Z", "author": "nico", "msg": "Revert 289252 (and follow-up 289285), it caused PR31374", "modified": "M | /cfe/trunk/include/clang/AST/APValue.h\nM | /cfe/trunk/include/clang/AST/ASTContext.h\nM | /cfe/trunk/include/clang/Basic/TargetInfo.h\nM | /cfe/trunk/lib/AST/APValue.cpp\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/Basic/Targets.cpp\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprAgg.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprConstant.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.h\nM | /cfe/trunk/lib/CodeGen/CodeGenTypes.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenTypes.h\nM | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nM | /cfe/trunk/lib/CodeGen/TargetInfo.h\nD | /cfe/trunk/test/CodeGenOpenCL/amdgpu-nullptr.cl\n"}, {"commit_id": "289787", "date": "2016-12-15T08:09:08.430324Z", "author": "yaxunl", "msg": "Re-commit r289252 and r289285, and fix PR31374", "modified": "M | /cfe/trunk/include/clang/AST/APValue.h\nM | /cfe/trunk/include/clang/AST/ASTContext.h\nM | /cfe/trunk/include/clang/Basic/TargetInfo.h\nM | /cfe/trunk/lib/AST/APValue.cpp\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/Basic/Targets.cpp\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprAgg.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprConstant.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.h\nM | /cfe/trunk/lib/CodeGen/CodeGenTypes.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenTypes.h\nM | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nM | /cfe/trunk/lib/CodeGen/TargetInfo.h\nA | /cfe/trunk/test/CodeGenOpenCL/amdgpu-nullptr.cl\n"}, {"commit_id": "290075", "date": "2016-12-19T02:55:53.487336Z", "author": "yaxunl", "msg": "Add a lit test for PR31374\n\nDifferential Revision: https://reviews.llvm.org/D27909\n", "modified": "A | /cfe/trunk/test/CodeGenObjC/nullptr-assert.m\n"}, {"commit_id": "290146", "date": "2016-12-19T23:59:34.311725Z", "author": "rsmith", "msg": "Fix completely bogus types for some builtins:\n\n * In C++, never create a FunctionNoProtoType for a builtin (fixes C++1z\n   crasher from r289754).\n\n * Fix type of __sync_synchronize to be a no-parameter function rather than a\n   varargs function. This matches GCC.\n\n * Fix type of vfprintf to match its actual type. We gave it a wrong type due\n   to PR4290 (apparently autoconf generates invalid code and expects compilers\n   to choke it down or it miscompiles the program; the relevant error in clang\n   was downgraded to a warning in r122744 to fix other occurrences of this\n   autoconf brokenness, so we don't need this workaround any more).\n\n * Turn off vararg argument checking for __noop, since it's not *really* a\n   varargs function. Alternatively we could add custom type checking for it\n   and synthesize parameter types matching the actual arguments in each call,\n   but that seemed like overkill.\n", "modified": "M | /cfe/trunk/include/clang/Basic/Builtins.def\nM | /cfe/trunk/lib/AST/ASTContext.cpp\nM | /cfe/trunk/lib/Sema/SemaChecking.cpp\nM | /cfe/trunk/lib/Sema/SemaExceptionSpec.cpp\nM | /cfe/trunk/test/Sema/vfprintf-invalid-redecl.c\nM | /cfe/trunk/test/Sema/vfprintf-valid-redecl.c\nM | /cfe/trunk/test/SemaCXX/builtins.cpp\n"}, {"commit_id": "290276", "date": "2016-12-21T21:42:57.617433Z", "author": "rsmith", "msg": "Perform type-checking for a converted constant expression in a template\nargument even if the expression is value-dependent (we need to suppress the\nfinal portion of the narrowing check, but the rest of the checking can still be\ndone eagerly).\n\nThis affects template template argument validity and partial ordering under\np0522r0.\n", "modified": "M | /cfe/trunk/include/clang/Sema/Overload.h\nM | /cfe/trunk/lib/Sema/SemaInit.cpp\nM | /cfe/trunk/lib/Sema/SemaOverload.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/test/SemaTemplate/temp_arg_nontype_cxx1z.cpp\n"}, {"commit_id": "290721", "date": "2016-12-29T20:03:55.118200Z", "author": "ericwf", "msg": "Fix PR31489 - std::function self-swap segfaults", "modified": "M | /libcxx/trunk/include/__functional_03\nM | /libcxx/trunk/include/functional\nM | /libcxx/trunk/test/std/utilities/function.objects/func.wrap/func.wrap.func/func.wrap.func.con/copy_assign.pass.cpp\nM | /libcxx/trunk/test/std/utilities/function.objects/func.wrap/func.wrap.func/func.wrap.func.mod/swap.pass.cpp\n"}, {"commit_id": "290795", "date": "2016-12-31T23:36:47.735766Z", "author": "kli", "msg": "Fix typo in test case.  NFC\n", "modified": "M | /cfe/trunk/test/OpenMP/teams_distribute_parallel_for_simd_collapse_messages.cpp\n"}, {"commit_id": "291045", "date": "2017-01-05T01:08:22.203643Z", "author": "rnk", "msg": "[MS] Instantiate default args during instantiation of exported default ctors\n\nSummary:\nReplace some old code that probably pre-dated the change to delay\nemission of dllexported code until after the closing brace of the\noutermost record type. Only uninstantiated default argument expressions\nneed to be handled now. It is enough to instantiate default argument\nexpressions when instantiating dllexported default ctors. This also\nfixes some double-diagnostic issues in this area.\n\nFixes PR31500\n\nReviewers: rsmith\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28274", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/test/CodeGenCXX/dllexport.cpp\nM | /cfe/trunk/test/SemaCXX/default-arg-closures.cpp\nM | /cfe/trunk/test/SemaCXX/dllexport.cpp\n"}, {"commit_id": "291497", "date": "2017-01-09T23:07:12.924951Z", "author": "bogner", "msg": "Adorn __call_once_proxy with `inline` and `_LIBCPP_INLINE_VISIBILITY`\n\nAs per discussion with mclow and EricWF on irc, this is small and\nsimple enough to deserve being inlined.", "modified": "M | /libcxx/trunk/include/mutex\n"}, {"commit_id": "291660", "date": "2017-01-11T09:11:48.234120Z", "author": "eladcohen", "msg": "[X86] Fix PR30926 - Add patterns for (v)cvtsi2s{s,d} and (v)cvtsd2s{s,d}\n\nThe code emiited by Clang's intrinsics for (v)cvtsi2ss, (v)cvtsi2sd,\n(v)cvtsd2ss and (v)cvtss2sd is lowered to a code sequence that includes\nredundant (v)movss/(v)movsd instructions. This patch adds patterns for\noptimizing these sequences.\n\nDifferential revision: https://reviews.llvm.org/D28455\n\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrAVX512.td\nM | /llvm/trunk/lib/Target/X86/X86InstrSSE.td\nM | /llvm/trunk/test/CodeGen/X86/avx-cvt.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-cvt.ll\nM | /llvm/trunk/test/CodeGen/X86/sse2-intrinsics-fast-isel.ll\nM | /llvm/trunk/test/CodeGen/X86/vec_int_to_fp.ll\n"}, {"commit_id": "291753", "date": "2017-01-12T09:16:26.393992Z", "author": "vvassilev", "msg": "PR31469: Don't add friend template class decls to redecl chain in dependent contexts.\n    \nFixes a crash in modules where the template class decl becomes the most recent\ndecl in the redeclaration chain and forcing the template instantiator try to\ninstantiate the friend declaration, rather than the template definition.\n    \nIn practice, A::list<int> produces a TemplateSpecializationType\nA::__1::list<int, allocator<type-parameter-0-0> >' failing to replace to\nsubsitute the default argument to allocator<int>.\n    \nKudos Richard Smith (D28399).\n", "modified": "M | /cfe/trunk/include/clang/AST/DeclTemplate.h\nM | /cfe/trunk/lib/AST/ASTImporter.cpp\nM | /cfe/trunk/lib/AST/DeclTemplate.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/test/Misc/ast-dump-decl.cpp\nA | /cfe/trunk/test/Modules/Inputs/PR31469\nA | /cfe/trunk/test/Modules/Inputs/PR31469/empty.h\nA | /cfe/trunk/test/Modules/Inputs/PR31469/module.modulemap\nA | /cfe/trunk/test/Modules/Inputs/PR31469/textual.h\nA | /cfe/trunk/test/Modules/Inputs/PR31469/textual_file_shadow.h\nA | /cfe/trunk/test/Modules/pr31469.cpp\n"}, {"commit_id": "292373", "date": "2017-01-18T15:02:54.093666Z", "author": "mcrosier", "msg": "[Assembler] Fix crash when assembling .quad for AArch32.\n\nA 64-bit relocation does not exist in 32-bit ARMELF. Report an error\ninstead of crashing.\n\nPR23870\nPatch by Sanne Wouda (sanwou01).\nDifferential Revision: https://reviews.llvm.org/D28851", "modified": "M | /llvm/trunk/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp\nA | /llvm/trunk/test/MC/ARM/quad-relocation.s\n"}, {"commit_id": "292949", "date": "2017-01-24T16:57:55.093147Z", "author": "rnk", "msg": "[CodeView] Fix off-by-one error in def range gap emission\n\nAlso fixes a much worse bug where we emitted the wrong gap size for the\ndef range uncovered by the test for this issue.\n\nFixes PR31726.", "modified": "M | /llvm/trunk/lib/MC/MCCodeView.cpp\nM | /llvm/trunk/test/MC/COFF/cv-def-range-gap.s\n"}, {"commit_id": "293036", "date": "2017-01-25T08:53:31.205260Z", "author": "apilipenko", "msg": "[DAGCombiner] Match load by bytes idiom and fold it into a single load. Attempt #2.\n\nThe previous patch (https://reviews.llvm.org/rL289538) got reverted because of a bug. Chandler also requested some changes to the algorithm.\nhttp://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20161212/413479.html\n\nThis is an updated patch. The key difference is that collectBitProviders (renamed to calculateByteProvider) now collects the origin of one byte, not the whole value. It simplifies the implementation and allows to stop the traversal earlier if we know that the result won't be used.\n\nFrom the original commit:\n\nMatch a pattern where a wide type scalar value is loaded by several narrow loads and combined by shifts and ors. Fold it into a single load or a load and a bswap if the targets supports it.\n\nAssuming little endian target:\n  i8 *a = ...\n  i32 val = a[0] | (a[1] << 8) | (a[2] << 16) | (a[3] << 24)\n=>\n  i32 val = *((i32)a)\n\n  i8 *a = ...\n  i32 val = (a[0] << 24) | (a[1] << 16) | (a[2] << 8) | a[3]\n=>\n  i32 val = BSWAP(*((i32)a))\n\nThis optimization was discussed on llvm-dev some time ago in \"Load combine pass\" thread. We came to the conclusion that we want to do this transformation late in the pipeline because in presence of atomic loads load widening is irreversible transformation and it might hinder other optimizations.\n\nEventually we'd like to support folding patterns like this where the offset has a variable and a constant part:\n  i32 val = a[i] | (a[i + 1] << 8) | (a[i + 2] << 16) | (a[i + 3] << 24)\n\nMatching the pattern above is easier at SelectionDAG level since address reassociation has already happened and the fact that the loads are adjacent is clear. Understanding that these loads are adjacent at IR level would have involved looking through geps/zexts/adds while looking at the addresses.\n\nThe general scheme is to match OR expressions by recursively calculating the origin of individual bytes which constitute the resulting OR value. If all the OR bytes come from memory verify that they are adjacent and match with little or big endian encoding of a wider value. If so and the load of the wider type (and bswap if needed) is allowed by the target generate a load and a bswap if needed.\n\nReviewed By: RKSimon, filcab, chandlerc \n\nDifferential Revision: https://reviews.llvm.org/D27861\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nA | /llvm/trunk/test/CodeGen/AArch64/load-combine-big-endian.ll\nA | /llvm/trunk/test/CodeGen/AArch64/load-combine.ll\nA | /llvm/trunk/test/CodeGen/ARM/load-combine-big-endian.ll\nA | /llvm/trunk/test/CodeGen/ARM/load-combine.ll\nA | /llvm/trunk/test/CodeGen/X86/load-combine.ll\n"}, {"commit_id": "293333", "date": "2017-01-27T21:28:37.806282Z", "author": "rsmith", "msg": "PR31783: Don't request the alignment of an invalid declaration.\n\nFixes an assertion failure on PS4 targets.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/test/SemaCXX/auto-cxx0x.cpp\n"}, {"commit_id": "293417", "date": "2017-01-29T04:55:57.009741Z", "author": "jhibbits", "msg": "Add some Book-E instructions to the asm parser and printer.\n\nSummary:\nAdds the following instructions:\n* mfpmr\n* mtpmr\n* icblc\n* icblq\n* icbtls\n\nFix the scheduling for mtspr on e5500, which uses CFX0, instead of\nSFX0/SFX1 as on e500mc.\n\nAddresses PR 31538.\n\nDifferential Revision: https://reviews.llvm.org/D29002", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCInstrInfo.td\nM | /llvm/trunk/lib/Target/PowerPC/PPCSchedule.td\nM | /llvm/trunk/lib/Target/PowerPC/PPCScheduleE500mc.td\nM | /llvm/trunk/lib/Target/PowerPC/PPCScheduleE5500.td\nM | /llvm/trunk/test/MC/Disassembler/PowerPC/ppc64-encoding-bookIII.txt\nM | /llvm/trunk/test/MC/PowerPC/ppc64-encoding-bookIII.s\n"}, {"commit_id": "293581", "date": "2017-01-31T01:26:09.269993Z", "author": "bogner", "msg": "Revert \"Adorn __call_once_proxy with `inline` and `_LIBCPP_INLINE_VISIBILITY`\"\n\nWhile this change didn't really hurt, it does lead to spurious\nwarnings about not being able to override weak symbols if you end up\nlinking objects built with this change to ones built without it.\nFurthermore, since __call_once_proxy is called indirectly anyway it\ndoesn't actually inline ever.\n\nLonger term, it would probably make sense to give this symbol internal\nvisibility instead.\n\nThis reverts r291497", "modified": "M | /libcxx/trunk/include/mutex\n"}, {"commit_id": "294136", "date": "2017-02-05T20:11:03.156969Z", "author": "vedantk", "msg": "[llvm-cov] Demangle symbols in function summaries (fixes PR31394)", "modified": "M | /llvm/trunk/test/tools/llvm-cov/demangle.test\nM | /llvm/trunk/tools/llvm-cov/CodeCoverage.cpp\nM | /llvm/trunk/tools/llvm-cov/CoverageReport.cpp\nM | /llvm/trunk/tools/llvm-cov/CoverageReport.h\n"}, {"commit_id": "294137", "date": "2017-02-05T20:11:08.155201Z", "author": "vedantk", "msg": "[llvm-cov] Don't show function summaries when filtering by filename (fixes PR31395)", "modified": "M | /llvm/trunk/docs/CommandGuide/llvm-cov.rst\nM | /llvm/trunk/test/tools/llvm-cov/demangle.test\nM | /llvm/trunk/test/tools/llvm-cov/report.cpp\nM | /llvm/trunk/tools/llvm-cov/CodeCoverage.cpp\n"}, {"commit_id": "294532", "date": "2017-02-08T23:46:59.798565Z", "author": "wolfgangp", "msg": "Reapply r294356 (\"Keep track of spilled variables in LiveDebugValues\").\n\nWas reverted with r294447 due to undefined behavior with negative offsets\nin DBG_VALUE instructions.\n", "modified": "M | /llvm/trunk/lib/CodeGen/LiveDebugValues.cpp\nA | /llvm/trunk/test/DebugInfo/MIR/X86/live-debug-values-spill.mir\n"}, {"commit_id": "294787", "date": "2017-02-10T21:57:30.501186Z", "author": "nico", "msg": "Revert r294532, it caused PR31935", "modified": "M | /llvm/trunk/lib/CodeGen/LiveDebugValues.cpp\nD | /llvm/trunk/test/DebugInfo/MIR/X86/live-debug-values-spill.mir\n"}, {"commit_id": "295093", "date": "2017-02-14T19:08:45.734449Z", "author": "wolfgangp", "msg": "Reapply r294532, reverted in r294787.\n\nStore instructions can have more than one memory operand as a result\nof optimizations that fold different stores into one.\nWhen we identify spill instructions to generate DBG_VALUE instructions\nto record the spilling of a variable, we disregard stores with \nmultiple memory operands for now. We may miss some relevant spills but\nthe handling is a bit more complex, so we'll do it in a different patch.\n\nThis fixes PR31935.\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/LiveDebugValues.cpp\nA | /llvm/trunk/test/DebugInfo/MIR/X86/live-debug-values-spill.mir\n"}, {"commit_id": "296011", "date": "2017-02-23T21:05:29.479128Z", "author": "ab", "msg": "[CodeGen] Print MI without a newline when skipping debugloc. NFC.\n\nThis matches the behavior for skip-operands. While there, document it.\nThis is a follow-up to r296007.", "modified": "M | /llvm/trunk/include/llvm/CodeGen/MachineInstr.h\nM | /llvm/trunk/lib/CodeGen/MachineInstr.cpp\n"}, {"commit_id": "296231", "date": "2017-02-25T02:30:03.793983Z", "author": "vedantk", "msg": "[profiling] Fix profile counter increment when emitting selects (PR32019)\n\nClang has logic to lower certain conditional expressions directly into\nllvm select instructions. However, it does not emit the correct profile\ncounter increment as it does this: it emits an unconditional increment\nof the counter for the 'then branch', even if the value selected is from\nthe 'else branch' (this is PR32019).\n\nThat means, given the following snippet, we would report that \"0\" is\nselected twice, and that \"1\" is never selected:\n\n  int f1(int x) {\n    return x ? 0 : 1;\n               ^2  ^0\n  }\n\n  f1(0);\n  f1(1);\n\nFix the problem by using the instrprof_increment_step intrinsic to do\nthe proper increment.", "modified": "M | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/CodeGen/CodeGenPGO.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenPGO.h\nA | /cfe/trunk/test/Profile/c-ternary.c\n"}, {"commit_id": "296234", "date": "2017-02-25T02:59:47.209825Z", "author": "vedantk", "msg": "Revert \"[profiling] Fix profile counter increment when emitting selects (PR32019)\"\n\nThis reverts commit r296231. It causes an assertion failure on 32-bit\nmachines\n\nclang: /export/users/atombot/llvm/clang-atom-d525-fedora-rel/llvm/lib/IR/Instructions.cpp:263: void llvm::CallInst::init(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<llvm::OperandBundleDefT<llvm::Value*> >, const llvm::Twine&): Assertion `(i >= FTy->getNumParams() || FTy->getParamType(i) == Args[i]->getType()) && \"Calling a function with a bad signature!\"' failed.\nllvm::sys::PrintStackTrace(llvm::raw_ostream&) (/export/users/atombot/llvm/clang-atom-d525-fedora-rel/stage1/./bin/clang+0x1c5fbfa)\nllvm::sys::RunSignalHandlers() (/export/users/atombot/llvm/clang-atom-d525-fedora-rel/stage1/./bin/clang+0x1c5dc7e)\nSignalHandler(int) (/export/users/atombot/llvm/clang-atom-d525-fedora-rel/stage1/./bin/clang+0x1c5dde2)\n__restore_rt (/lib64/libpthread.so.0+0x3f1d00efa0)\n__GI_raise /home/glibctest/rpmbuild/BUILD/glibc-2.17-c758a686/signal/../nptl/sysdeps/unix/sysv/linux/raise.c:56:0\n__GI_abort /home/glibctest/rpmbuild/BUILD/glibc-2.17-c758a686/stdlib/abort.c:92:0\n__assert_fail_base /home/glibctest/rpmbuild/BUILD/glibc-2.17-c758a686/assert/assert.c:92:0\n(/lib64/libc.so.6+0x3f1c82e622)\nllvm::CallInst::init(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<llvm::OperandBundleDefT<llvm::Value*> >, llvm::Twine const&) (/export/users/atombot/llvm/clang-atom-d525-fedora-rel/stage1/./bin/clang+0x1804e3a)\nclang::CodeGen::CodeGenPGO::emitCounterIncrement(clang::CodeGen::CGBuilderTy&, clang::Stmt const*, llvm::Value*) (/export/users/atombot/llvm/clang-atom-d525-fedora-rel/stage1/./bin/clang+0x1ec7891)", "modified": "M | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/CodeGen/CodeGenPGO.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenPGO.h\nD | /cfe/trunk/test/Profile/c-ternary.c\n"}, {"commit_id": "296245", "date": "2017-02-25T06:35:45.018125Z", "author": "vedantk", "msg": "Retry: [profiling] Fix profile counter increment when emitting selects (PR32019)\n\n2nd attempt: the first was in r296231, but it had a use after lifetime\nbug.\n\nClang has logic to lower certain conditional expressions directly into llvm\nselect instructions. However, it does not emit the correct profile counter\nincrement as it does this: it emits an unconditional increment of the counter\nfor the 'then branch', even if the value selected is from the 'else branch'\n(this is PR32019).\n\nThat means, given the following snippet, we would report that \"0\" is selected\ntwice, and that \"1\" is never selected:\n\n  int f1(int x) {\n    return x ? 0 : 1;\n               ^2  ^0\n  }\n\n  f1(0);\n  f1(1);\n\nFix the problem by using the instrprof_increment_step intrinsic to do the\nproper increment.", "modified": "M | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/CodeGen/CodeGenPGO.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenPGO.h\nA | /cfe/trunk/test/Profile/c-ternary.c\n"}, {"commit_id": "296273", "date": "2017-02-25T20:30:45.145674Z", "author": "sanjoy", "msg": "[ValueTracking] Don't do an unchecked shift in ComputeNumSignBits\n\nSummary:\nPreviously we used to return a bogus result, 0, for IR like `ashr %val,\n-1`.\n\nI've also added an assert checking that `ComputeNumSignBits` at least\nreturns 1.  That assert found an already checked in test case where we\nwere returning a bad result for `ashr %val, -1`.\n\nFixes PR32045.\n\nReviewers: spatel, majnemer\n\nReviewed By: spatel, majnemer\n\nSubscribers: efriedma, mcrosier, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D30311", "modified": "M | /llvm/trunk/lib/Analysis/ValueTracking.cpp\nA | /llvm/trunk/test/Transforms/IndVarSimplify/pr32045.ll\nM | /llvm/trunk/unittests/Analysis/ValueTrackingTest.cpp\n"}, {"commit_id": "296487", "date": "2017-02-28T16:57:28.820550Z", "author": "vedantk", "msg": "[llvm-cov] Error-out when an unsupported format is used (PR32087)", "modified": "M | /llvm/trunk/test/tools/llvm-cov/warnings.h\nM | /llvm/trunk/tools/llvm-cov/CodeCoverage.cpp\n"}, {"commit_id": "297391", "date": "2017-03-09T16:29:30.363276Z", "author": "kparzysz", "msg": "[Hexagon] Propagate zext of i1 into arithmetic code in selection DAG\n\n(op ... (zext i1 c) ...) -> (select c (op ... 1 ...),\n                                      (op ... 0 ...))\n", "modified": "M | /llvm/trunk/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp\nM | /llvm/trunk/test/CodeGen/Hexagon/adde.ll\nA | /llvm/trunk/test/CodeGen/Hexagon/isel-op-zext-i1.ll\nM | /llvm/trunk/test/CodeGen/Hexagon/sube.ll\n"}, {"commit_id": "297695", "date": "2017-03-14T00:34:14.282804Z", "author": "niravd", "msg": "In visitSTORE, always use FindBetterChain, rather than only when UseAA is enabled.\n\n    Recommiting with compiler time improvements\n\n    Recommitting after fixup of 32-bit aliasing sign offset bug in DAGCombiner.\n\n    * Simplify Consecutive Merge Store Candidate Search\n\n    Now that address aliasing is much less conservative, push through\n    simplified store merging search and chain alias analysis which only\n    checks for parallel stores through the chain subgraph. This is cleaner\n    as the separation of non-interfering loads/stores from the\n    store-merging logic.\n\n    When merging stores search up the chain through a single load, and\n    finds all possible stores by looking down from through a load and a\n    TokenFactor to all stores visited.\n\n    This improves the quality of the output SelectionDAG and the output\n    Codegen (save perhaps for some ARM cases where we correctly constructs\n    wider loads, but then promotes them to float operations which appear\n    but requires more expensive constant generation).\n\n    Some minor peephole optimizations to deal with improved SubDAG shapes (listed below)\n\n    Additional Minor Changes:\n\n      1. Finishes removing unused AliasLoad code\n\n      2. Unifies the chain aggregation in the merged stores across code\n         paths\n\n      3. Re-add the Store node to the worklist after calling\n         SimplifyDemandedBits.\n\n      4. Increase GatherAllAliasesMaxDepth from 6 to 18. That number is\n         arbitrary, but seems sufficient to not cause regressions in\n         tests.\n\n      5. Remove Chain dependencies of Memory operations on CopyfromReg\n         nodes as these are captured by data dependence\n\n      6. Forward loads-store values through tokenfactors containing\n          {CopyToReg,CopyFromReg} Values.\n\n      7. Peephole to convert buildvector of extract_vector_elt to\n         extract_subvector if possible (see\n         CodeGen/AArch64/store-merge.ll)\n\n      8. Store merging for the ARM target is restricted to 32-bit as\n         some in some contexts invalid 64-bit operations are being\n         generated. This can be removed once appropriate checks are\n         added.\n\n    This finishes the change Matt Arsenault started in r246307 and\n    jyknight's original patch.\n\n    Many tests required some changes as memory operations are now\n    reorderable, improving load-store forwarding. One test in\n    particular is worth noting:\n\n      CodeGen/PowerPC/ppc64-align-long-double.ll - Improved load-store\n      forwarding converts a load-store pair into a parallel store and\n      a memory-realized bitcast of the same value. However, because we\n      lose the sharing of the explicit and implicit store values we\n      must create another local store. A similar transformation\n      happens before SelectionDAG as well.\n\n    Reviewers: arsenm, hfinkel, tstellarAMD, jyknight, nhaehnle", "modified": "M | /llvm/trunk/include/llvm/Target/TargetLowering.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nM | /llvm/trunk/lib/CodeGen/TargetLoweringBase.cpp\nM | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.h\nM | /llvm/trunk/test/CodeGen/AArch64/argument-blocks.ll\nM | /llvm/trunk/test/CodeGen/AArch64/arm64-abi.ll\nM | /llvm/trunk/test/CodeGen/AArch64/arm64-memset-inline.ll\nM | /llvm/trunk/test/CodeGen/AArch64/arm64-variadic-aapcs.ll\nM | /llvm/trunk/test/CodeGen/AArch64/merge-store.ll\nM | /llvm/trunk/test/CodeGen/AArch64/vector_merge_dep_check.ll\nM | /llvm/trunk/test/CodeGen/AMDGPU/debugger-insert-nops.ll\nM | /llvm/trunk/test/CodeGen/AMDGPU/insert_vector_elt.ll\nM | /llvm/trunk/test/CodeGen/AMDGPU/merge-stores.ll\nM | /llvm/trunk/test/CodeGen/AMDGPU/private-element-size.ll\nM | /llvm/trunk/test/CodeGen/AMDGPU/si-triv-disjoint-mem-access.ll\nM | /llvm/trunk/test/CodeGen/ARM/2012-10-04-AAPCS-byval-align8.ll\nM | /llvm/trunk/test/CodeGen/ARM/alloc-no-stack-realign.ll\nM | /llvm/trunk/test/CodeGen/ARM/gpr-paired-spill.ll\nM | /llvm/trunk/test/CodeGen/ARM/ifcvt10.ll\nM | /llvm/trunk/test/CodeGen/ARM/illegal-bitfield-loadstore.ll\nM | /llvm/trunk/test/CodeGen/ARM/static-addr-hoisting.ll\nM | /llvm/trunk/test/CodeGen/BPF/undef.ll\nM | /llvm/trunk/test/CodeGen/MSP430/Inst16mm.ll\nM | /llvm/trunk/test/CodeGen/Mips/cconv/arguments-float.ll\nM | /llvm/trunk/test/CodeGen/Mips/cconv/arguments-varargs.ll\nM | /llvm/trunk/test/CodeGen/Mips/fastcc.ll\nM | /llvm/trunk/test/CodeGen/Mips/load-store-left-right.ll\nM | /llvm/trunk/test/CodeGen/Mips/micromips-li.ll\nM | /llvm/trunk/test/CodeGen/Mips/mips64-f128-call.ll\nM | /llvm/trunk/test/CodeGen/Mips/mips64-f128.ll\nM | /llvm/trunk/test/CodeGen/Mips/mno-ldc1-sdc1.ll\nM | /llvm/trunk/test/CodeGen/Mips/msa/f16-llvm-ir.ll\nM | /llvm/trunk/test/CodeGen/Mips/msa/i5_ld_st.ll\nM | /llvm/trunk/test/CodeGen/Mips/o32_cc_byval.ll\nM | /llvm/trunk/test/CodeGen/Mips/o32_cc_vararg.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/anon_aggr.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/complex-return.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/jaggedstructs.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/ppc64-align-long-double.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/structsinmem.ll\nM | /llvm/trunk/test/CodeGen/PowerPC/structsinregs.ll\nM | /llvm/trunk/test/CodeGen/SystemZ/unaligned-01.ll\nM | /llvm/trunk/test/CodeGen/Thumb/2010-07-15-debugOrdering.ll\nM | /llvm/trunk/test/CodeGen/Thumb/stack-access.ll\nM | /llvm/trunk/test/CodeGen/X86/2010-09-17-SideEffectsInChain.ll\nM | /llvm/trunk/test/CodeGen/X86/2012-11-28-merge-store-alias.ll\nM | /llvm/trunk/test/CodeGen/X86/MergeConsecutiveStores.ll\nM | /llvm/trunk/test/CodeGen/X86/avx-vbroadcast.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-mask-op.ll\nM | /llvm/trunk/test/CodeGen/X86/chain_order.ll\nM | /llvm/trunk/test/CodeGen/X86/clear_upper_vector_element_bits.ll\nD | /llvm/trunk/test/CodeGen/X86/combiner-aa-0.ll\nD | /llvm/trunk/test/CodeGen/X86/combiner-aa-1.ll\nM | /llvm/trunk/test/CodeGen/X86/copy-eflags.ll\nM | /llvm/trunk/test/CodeGen/X86/dag-merge-fast-accesses.ll\nM | /llvm/trunk/test/CodeGen/X86/dont-trunc-store-double-to-float.ll\nM | /llvm/trunk/test/CodeGen/X86/extractelement-legalization-store-ordering.ll\nM | /llvm/trunk/test/CodeGen/X86/i256-add.ll\nM | /llvm/trunk/test/CodeGen/X86/i386-shrink-wrapping.ll\nM | /llvm/trunk/test/CodeGen/X86/live-range-nosubreg.ll\nM | /llvm/trunk/test/CodeGen/X86/longlong-deadload.ll\nM | /llvm/trunk/test/CodeGen/X86/merge-consecutive-loads-128.ll\nM | /llvm/trunk/test/CodeGen/X86/merge-consecutive-loads-256.ll\nM | /llvm/trunk/test/CodeGen/X86/merge-store-partially-alias-loads.ll\nD | /llvm/trunk/test/CodeGen/X86/pr18023.ll\nA | /llvm/trunk/test/CodeGen/X86/pr32108.ll\nM | /llvm/trunk/test/CodeGen/X86/split-store.ll\nM | /llvm/trunk/test/CodeGen/X86/stores-merging.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-compare-results.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-variable-128.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-variable-256.ll\nM | /llvm/trunk/test/CodeGen/X86/vectorcall.ll\nM | /llvm/trunk/test/CodeGen/X86/win32-eh.ll\nM | /llvm/trunk/test/CodeGen/XCore/varargs.ll\n"}, {"commit_id": "298226", "date": "2017-03-19T16:50:25.198700Z", "author": "rksimon", "msg": "Fix constant folding of fp2int to large integers\n\nWe make the assumption in most of our constant folding code that a fp2int will target an integer of 128-bits or less, calling the APFloat::convertToInteger with only uint64_t[2] of raw bits for the result.\n\nFuzz testing (PR24662) showed that we don't handle other cases at all, resulting in stack overflows and all sorts of crashes.\n\nThis patch uses the APSInt version of APFloat::convertToInteger instead to better handle such cases.\n\nDifferential Revision: https://reviews.llvm.org/D31074", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/FastISel.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAG.cpp\nM | /llvm/trunk/lib/IR/ConstantFold.cpp\nA | /llvm/trunk/test/CodeGen/Generic/pr24662.ll\n"}, {"commit_id": "298574", "date": "2017-03-23T02:51:25.819635Z", "author": "nikola", "msg": "Fix issues in clang-format's AlignConsecutive modes.\n\nPatch by Ben Harper.", "modified": "M | /cfe/trunk/lib/Format/WhitespaceManager.cpp\nM | /cfe/trunk/lib/Format/WhitespaceManager.h\nM | /cfe/trunk/unittests/Format/FormatTest.cpp\n"}, {"commit_id": "298633", "date": "2017-03-23T18:25:17.406529Z", "author": "niravd", "msg": "[X86] Fix Stale SDNode use in X86ISelDAGtoDAG\n\nSummary: Fixes pr32329.\n\nReviewers: spatel, craig.topper\n\nSubscribers: llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D31286", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelDAGToDAG.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr32329.ll\n"}, {"commit_id": "298931", "date": "2017-03-28T17:09:49.876115Z", "author": "niravd", "msg": "[SDAG] Deal with deleted node in PromoteIntShiftOp\n\nDeal with case that initial node is deleted during dag-combine leading\nto an assertional failure in promoteIntShiftOp.\n\nFixes PR32420.\n\nReviewers: spatel, RKSimon\n\nSubscribers: llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D31403", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr32420.ll\n"}, {"commit_id": "299701", "date": "2017-04-06T20:22:51.520741Z", "author": "huihuiz", "msg": "[SelectionDAG] [ARM CodeGen] Fix chain information of LowerMUL\n\nIn LowerMUL, the chain information is not preserved for the new\ncreated Load SDNode.\n\nFor example, if a Store alias with one of the operand of Mul.\nThe Load for that operand need to be scheduled before the Store.\nThe dependence is recorded in the chain of Store, in TokenFactor.\nHowever, when lowering MUL, the SDNodes for the new Loads for\nVMULL are not updated in the TokenFactor for the Store. Thus the\nchain is not preserved for the lowered VMULL.\n\n\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nA | /llvm/trunk/test/CodeGen/ARM/lowerMUL-newload.ll\n"}, {"commit_id": "299926", "date": "2017-04-11T08:43:32.408853Z", "author": "sam_parker", "msg": "[SelectionDAG] Check CALLSEQ_BEGIN nodes in DelayForLiveRegs\n\nA fix for the bug reported in PR30911.\n\nThe issue arises when multiple CALLSEQ_BEGIN nodes are unscheduled as\nthe last node to be unscheduled will gain access to the CallResource\nregister. But when a node is being picked, only CALLSEQ_END nodes are\nchecked against the CallResource and have their chains evaluated.\nThis then means that other CALLSEQ_BEGIN nodes can be scheduled\nbefore the existing call sequence has been finalised. This patch adds\na check against the FrameSetup nodes in DelayForLiveRegs to prevent\nthis from happening.\n\nDifferential Revision: https://reviews.llvm.org/D31536\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp\nA | /llvm/trunk/test/CodeGen/ARM/unschedule-first-call.ll\n"}, {"commit_id": "299973", "date": "2017-04-11T19:11:20.326711Z", "author": "davide", "msg": "[X86] Create the correct ADC/SBB SDNode when lowering add.\n\nDifferential Revision:  https://reviews.llvm.org/D31911", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr32588.ll\n"}, {"commit_id": "300522", "date": "2017-04-18T01:21:53.137914Z", "author": "adrian", "msg": "PR32382: Fix emitting complex DWARF expressions.\n\nThe DWARF specification knows 3 kinds of non-empty simple location\ndescriptions:\n1. Register location descriptions\n  - describe a variable in a register\n  - consist of only a DW_OP_reg\n2. Memory location descriptions\n  - describe the address of a variable\n3. Implicit location descriptions\n  - describe the value of a variable\n  - end with DW_OP_stack_value & friends\n\nThe existing DwarfExpression code is pretty much ignorant of these\nrestrictions. This used to not matter because we only emitted very\nshort expressions that we happened to get right by accident.  This\npatch makes DwarfExpression aware of the rules defined by the DWARF\nstandard and now chooses the right kind of location description for\neach expression being emitted.\n\nThis would have been an NFC commit (for the existing testsuite) if not\nfor the way that clang describes captured block variables. Based on\nhow the previous code in LLVM emitted locations, DW_OP_deref\noperations that should have come at the end of the expression are put\nat its beginning. Fixing this means changing the semantics of\nDIExpression, so this patch bumps the version number of DIExpression\nand implements a bitcode upgrade.\n\nThere are two major changes in this patch:\n\nI had to fix the semantics of dbg.declare for describing function\narguments. After this patch a dbg.declare always takes the *address*\nof a variable as the first argument, even if the argument is not an\nalloca.\n\nWhen lowering a DBG_VALUE, the decision of whether to emit a register\nlocation description or a memory location description depends on the\nMachineLocation \u9225?register machine locations may get promoted to\nmemory locations based on their DIExpression. (Future) optimization\npasses that want to salvage implicit debug location for variables may\ndo so by appending a DW_OP_stack_value. For example:\n  DBG_VALUE, [RBP-8]                        --> DW_OP_fbreg -8\n  DBG_VALUE, RAX                            --> DW_OP_reg0 +0\n  DBG_VALUE, RAX, DIExpression(DW_OP_deref) --> DW_OP_reg0 +0\n\nAll testcases that were modified were regenerated from clang. I also\nadded source-based testcases for each of these to the debuginfo-tests\nrepository over the last week to make sure that no synchronized bugs\nslip in. The debuginfo-tests compile from source and run the debugger.\n\nhttps://bugs.llvm.org/show_bug.cgi?id=32382\n<rdar://problem/31205000>\n\nDifferential Revision: https://reviews.llvm.org/D31439", "modified": "M | /llvm/trunk/docs/LangRef.rst\nM | /llvm/trunk/docs/SourceLevelDebugging.rst\nM | /llvm/trunk/include/llvm/CodeGen/MachineInstrBuilder.h\nM | /llvm/trunk/include/llvm/IR/DebugInfoMetadata.h\nM | /llvm/trunk/lib/Bitcode/Reader/BitcodeReader.cpp\nM | /llvm/trunk/lib/Bitcode/Reader/MetadataLoader.cpp\nM | /llvm/trunk/lib/Bitcode/Reader/MetadataLoader.h\nM | /llvm/trunk/lib/Bitcode/Writer/BitcodeWriter.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/AsmPrinter.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfExpression.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfExpression.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfUnit.cpp\nM | /llvm/trunk/lib/CodeGen/InlineSpiller.cpp\nM | /llvm/trunk/lib/CodeGen/MachineInstr.cpp\nM | /llvm/trunk/lib/CodeGen/RegAllocFast.cpp\nM | /llvm/trunk/lib/CodeGen/SafeStack.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/FastISel.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h\nM | /llvm/trunk/lib/Transforms/Instrumentation/AddressSanitizer.cpp\nM | /llvm/trunk/lib/Transforms/Utils/Local.cpp\nA | /llvm/trunk/test/Bitcode/DIExpression-aggresult.ll\nA | /llvm/trunk/test/Bitcode/DIExpression-aggresult.ll.bc\nA | /llvm/trunk/test/Bitcode/DIExpression-deref.ll\nA | /llvm/trunk/test/Bitcode/DIExpression-deref.ll.bc\nM | /llvm/trunk/test/DebugInfo/ARM/selectiondag-deadcode.ll\nM | /llvm/trunk/test/DebugInfo/Generic/block-asan.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg-declare-arg.ll\nM | /llvm/trunk/test/DebugInfo/X86/dbg_value_direct.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-info-block-captured-self.ll\nM | /llvm/trunk/test/DebugInfo/X86/dw_op_minus.ll\nM | /llvm/trunk/test/DebugInfo/X86/dw_op_minus_direct.ll\nM | /llvm/trunk/test/DebugInfo/X86/sret.ll\nM | /llvm/trunk/test/Instrumentation/AddressSanitizer/debug_info.ll\nM | /llvm/trunk/test/Transforms/SafeStack/X86/debug-loc.ll\n"}, {"commit_id": "300909", "date": "2017-04-20T22:23:10.522793Z", "author": "compnerd", "msg": "Sema: protect against ObjC++ typo-correction failure\n\nObjC++ has two different types of \"pointer\" types (ObjCClassPointerType\nand PointerType).  Both can be indirected through.  However, the former\nis not a member expression.  Ensure that we do not try to rebuild the\nMRE in that case.", "modified": "M | /cfe/trunk/lib/Sema/TreeTransform.h\nA | /cfe/trunk/test/SemaObjCXX/pr32725.mm\n"}, {"commit_id": "301020", "date": "2017-04-21T19:03:51.876629Z", "author": "meinersbur", "msg": "[CMake] Link unittests only against libLLVM.so, if available.\n\nWe can only link against libLLVM.so or the individual libLLVM*.so\ncomponents, but not both of them. Doing so results in these components\nexist twice in the programs address space, since it is already contained\nin libLLVM.so. The observable effect of this is that command line\nswitches are registered multiple times (once for each instance),\nwhich is an error.\n\nThis fixes llvm.org/PR32735.\n\nReported-by: Singapuram Sanjay Srivallabh <singapuram.sanjay@gmail.com>", "modified": "M | /polly/trunk/unittests/CMakeLists.txt\n"}, {"commit_id": "301235", "date": "2017-04-24T19:52:51.802045Z", "author": "eugenis", "msg": "[cfi] Disable ThinLTO + CFI tests on Windows.\n\nPR32770.", "modified": "M | /compiler-rt/trunk/test/cfi/CMakeLists.txt\n"}, {"commit_id": "301243", "date": "2017-04-24T20:25:39.425912Z", "author": "eugenis", "msg": "[asan] Use posix strerror_r interceptor on android.\n\nThis fixes a regression in r297315.", "modified": "M | /compiler-rt/trunk/lib/sanitizer_common/sanitizer_common_interceptors.inc\n"}, {"commit_id": "301257", "date": "2017-04-24T21:27:47.947001Z", "author": "eugenis", "msg": "[cfi] Fix wrong CMake condition for WIN32.", "modified": "M | /compiler-rt/trunk/test/cfi/CMakeLists.txt\n"}, {"commit_id": "301274", "date": "2017-04-24T23:16:49.271843Z", "author": "hans", "msg": "Revert r301089 \"[builtins] Implement emulated TLS on Windows.\"\n\nThis broke the self-host build on Windows (PR32777).\n\nOriginal commit message:\n\n> [builtins] Implement emulated TLS on Windows.\n>\n> Summary:\n> LLVM JIT needs to be able to use emulated TLS on all platforms, and this provides a reference one can compile to enable emutls for Linux/Mac/Windows.\n>\n> Reviewers: chh, howard.hinnant\n>\n> Reviewed By: chh\n>\n> Subscribers: mgorny, llvm-commits\n>\n> Differential Revision: https://reviews.llvm.org/D30787", "modified": "M | /compiler-rt/trunk/lib/builtins/CMakeLists.txt\nM | /compiler-rt/trunk/lib/builtins/emutls.c\n"}, {"commit_id": "301988", "date": "2017-05-02T23:46:56.389225Z", "author": "vedantk", "msg": "[ubsan] Skip overflow checks on safe arithmetic (fixes PR32874)\n\nCurrently, ubsan emits overflow checks for arithmetic that is known to\nbe safe at compile-time, e.g:\n\n  1 + 1 => CheckedAdd(1, 1)\n\nThis leads to breakage when using the __builtin_prefetch intrinsic. LLVM\nexpects the arguments to @llvm.prefetch to be constant integers, and\nwhen ubsan inserts unnecessary checks on the operands to the intrinsic,\nthis contract is broken, leading to verifier failures (see PR32874).\n\nInstead of special-casing __builtin_prefetch for ubsan, this patch fixes\nthe underlying problem, i.e that clang currently emits unnecessary\noverflow checks.\n\nTesting: I ran the check-clang and check-ubsan targets with a stage2,\nubsan-enabled build of clang. I added a regression test for PR32874, and\nsome extra checking to make sure we don't regress runtime checking for\nunsafe arithmetic. The existing ubsan-promoted-arithmetic.cpp test also\nprovides coverage for this change.", "modified": "M | /cfe/trunk/lib/CodeGen/CGExprScalar.cpp\nA | /cfe/trunk/test/CodeGen/PR32874.c\n"}, {"commit_id": "302183", "date": "2017-05-04T19:14:54.064851Z", "author": "kparzysz", "msg": "[PPC] When restoring R30 (PIC base pointer), mark it as <def>\n\nThis happened on the PPC32/SVR4 path and was discovered when building\nFreeBSD on PPC32. It was a typo-class error in the frame lowering code.\n\nThis fixes PR26519.\n", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCFrameLowering.cpp\nA | /llvm/trunk/test/CodeGen/PowerPC/restore-r30.ll\n"}, {"commit_id": "302203", "date": "2017-05-04T23:29:39.655492Z", "author": "eugenis", "msg": "Remap metadata attached to global variables.\n\nFix for PR32577.\nGlobal variables may have !associated metadata, which includes a reference to another global. It needs remapping.", "modified": "M | /llvm/trunk/lib/Transforms/Utils/ValueMapper.cpp\nA | /llvm/trunk/test/Linker/metadata-global.ll\n"}, {"commit_id": "302485", "date": "2017-05-08T23:46:20.702922Z", "author": "eugenis", "msg": "Ignore !associated metadata with null argument.\n\nFixes PR32577 (comment 10).\nSuch metadata may legitimately appear in LTO.", "modified": "M | /llvm/trunk/lib/CodeGen/TargetLoweringObjectFileImpl.cpp\nM | /llvm/trunk/test/CodeGen/X86/elf-associated.ll\n"}, {"commit_id": "302750", "date": "2017-05-11T00:17:17.388037Z", "author": "rsmith", "msg": "PR22877: When constructing an array via a constructor with a default argument\nin list-initialization, run cleanups for the default argument after each\niteration of the initialization loop.\n\nWe previously only ran the destructor for any temporary once, at the end of the\ncomplete loop, rather than once per iteration!\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGExprAgg.cpp\nA | /cfe/trunk/test/CodeGenCXX/array-default-argument.cpp\n"}, {"commit_id": "302776", "date": "2017-05-11T08:10:41.289527Z", "author": "rovka", "msg": "Revert \"PR22877: When constructing an array via a constructor with a default argument in list-initialization, run cleanups for the default argument after each iteration of the initialization loop.\"\n\nRevert \"clang/test/CodeGenCXX/array-default-argument.cpp: Satisfy targets that have x86_thiscallcc.\"\n\nThis reverts commit r302750 and its fixup r302757 because the test is\nstill breaking on some of the ARM bots.\n\narray-default-argument.cpp:20:12: error: expected string not found in input\n // CHECK: {{call|invoke}}[[THISCALL:( x86_thiscallcc)?]] void @_ZN1AC1Ev([[TEMPORARY:.*]])\n           ^\n<stdin>:18:1: note: scanning from here\narrayctor.loop: ; preds = %arrayctor.loop, %entry\n^\n<stdin>:28:2: note: possible intended match here\n call void @_Z1fv()\n ^\n\n--", "modified": "M | /cfe/trunk/lib/CodeGen/CGExprAgg.cpp\nD | /cfe/trunk/test/CodeGenCXX/array-default-argument.cpp\n"}, {"commit_id": "302817", "date": "2017-05-11T18:58:24.938463Z", "author": "rsmith", "msg": "PR22877: When constructing an array via a constructor with a default argument\nin list-initialization, run cleanups for the default argument after each\niteration of the initialization loop.\n\nWe previously only ran the destructor for any temporary once, at the end of the\ncomplete loop, rather than once per iteration!\n\nRe-commit of r302750, reverted in r302776.\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGExprAgg.cpp\nA | /cfe/trunk/test/CodeGenCXX/array-default-argument.cpp\n"}, {"commit_id": "303006", "date": "2017-05-14T09:09:54.569146Z", "author": "grosser", "msg": "[Polly] Fix code generation of llvm.expect intrinsic\n\nAt the time of code generation, an instruction with an llvm intrinsic is ignored\nin copyBB. However, if the value of the instruction is used later in the\nprogram, the value needs to be synthesized. However, this is causing some issues\nwith the instructions being generated in a hoisted basic block.\n\nRemoving llvm.expect from the list of ignored intrinsics fixes this bug.\n\nThis resolves http://llvm.org/PR32324.\n\nContributed-by: Annanay Agarwal <cs14btech11001@iith.ac.in>\n\nTags: #polly\n\nDifferential Revision: https://reviews.llvm.org/D32992", "modified": "M | /polly/trunk/lib/Support/ScopHelper.cpp\nA | /polly/trunk/test/CodeGen/Intrinsics\nA | /polly/trunk/test/CodeGen/Intrinsics/llvm-expect.ll\n"}, {"commit_id": "303102", "date": "2017-05-15T19:08:56.702328Z", "author": "evstupac", "msg": "The patch adds CTLZ idiom recognition.\n\nSummary:\n\nThe following loops should be recognized:\ni = 0;\nwhile (n) {\n  n = n >> 1;\n  i++;\n  body();\n}\nuse(i);\n\nAnd replaced with builtin_ctlz(n) if body() is empty or\nfor CPUs that have CTLZ instruction converted to countable:\n\nfor (j = 0; j < builtin_ctlz(n); j++) {\n  n = n >> 1;\n  i++;\n  body();\n}\nuse(builtin_ctlz(n));\n\nReviewers: rengolin, joerg\n\nDifferential Revision: http://reviews.llvm.org/D32605\n\nFrom: Evgeny Stupachenko <evstupac@gmail.com>\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopIdiomRecognize.cpp\nA | /llvm/trunk/test/Transforms/LoopIdiom/ARM\nA | /llvm/trunk/test/Transforms/LoopIdiom/ARM/ctlz.ll\nA | /llvm/trunk/test/Transforms/LoopIdiom/X86/ctlz.ll\n"}, {"commit_id": "303141", "date": "2017-05-16T05:23:23.906222Z", "author": "davide", "msg": "[NewGVN] Replace predicate info leftovers.\n\nFixes PR32945.\n\nDifferential Revision:  https://reviews.llvm.org/D33226", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nA | /llvm/trunk/test/Transforms/NewGVN/pr32945.ll\n"}, {"commit_id": "303257", "date": "2017-05-17T13:25:09.817138Z", "author": "kparzysz", "msg": "[PPC] Properly update register save area offsets\n\nThe variables MinGPR/MinG8R were not updated properly when resetting the\noffsets, which in the included testcase lead to saving the CR register\nin the same location as R30.\n\nThis fixes another issue reported in PR26519.\n\nDifferential Revision: https://reviews.llvm.org/D33017\n", "modified": "M | /llvm/trunk/lib/Target/PowerPC/PPCFrameLowering.cpp\nA | /llvm/trunk/test/CodeGen/PowerPC/save-bp.ll\nA | /llvm/trunk/test/CodeGen/PowerPC/save-cr-ppc32svr4.ll\nA | /llvm/trunk/test/CodeGen/PowerPC/save-crbp-ppc32svr4.ll\n"}, {"commit_id": "303393", "date": "2017-05-18T23:22:44.764289Z", "author": "davide", "msg": "[NewGVN] Break infinite recursion in singleReachablePHIPath().\n\nWe can have cycles between PHIs and this causes singleReachablePhi()\nto call itself indefintely (until we run out of stack). The proper\nsolution would be that of computing SCCs, but it's not worth for\nnow, so just keep a visited set and give up when we find a cycle.\nThanks to Dan for the discussion/help with this.\n\nFixes PR33014.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nA | /llvm/trunk/test/Transforms/NewGVN/pr33014.ll\n"}, {"commit_id": "303406", "date": "2017-05-19T04:06:10.312723Z", "author": "davide", "msg": "[NewGVN] Delete the old store when we find congruent to a load.\n\n(or non-store, more in general). Fixes PR33086. Caught by the\nstore verifier.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nA | /llvm/trunk/test/Transforms/NewGVN/pr33086.ll\n"}, {"commit_id": "303453", "date": "2017-05-19T20:22:20.294804Z", "author": "dannyb", "msg": "NewGVN: Fix PR32838.\nThis is a complicated bug involving two issues:\n1. What do we do with phi nodes when we prove all arguments are not\nlive?\n2. When is it safe to use value leaders to determine if we can ignore\nan argumnet?", "modified": "M | /llvm/trunk/include/llvm/Transforms/Scalar/GVNExpression.h\nM | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nA | /llvm/trunk/test/Transforms/NewGVN/pr32838.ll\n"}, {"commit_id": "303515", "date": "2017-05-21T20:50:16.152438Z", "author": "davide", "msg": "[NewGVN] Add a test for non most dominating leader.\n\nTaken from PR32845. Dan removed the most dominating leader check\nin r303443, but we check this test anyway to make sure things\ndon't regress.", "modified": "A | /llvm/trunk/test/Transforms/NewGVN/pr32845.ll\n"}, {"commit_id": "303521", "date": "2017-05-21T23:41:58.819647Z", "author": "dannyb", "msg": "NewGVN: Fix PR 33116, the memoryphi version of bug 32838.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nA | /llvm/trunk/test/Transforms/NewGVN/pr33116.ll\n"}, {"commit_id": "303700", "date": "2017-05-23T22:32:56.734859Z", "author": "davide", "msg": "[LIR] Strengthen the check for recurrence variable in popcnt/CTLZ.\n\nFixes PR33114.\nDifferential Revision:  https://reviews.llvm.org/D33420", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopIdiomRecognize.cpp\nA | /llvm/trunk/test/Transforms/LoopIdiom/pr33114.ll\n"}, {"commit_id": "303846", "date": "2017-05-25T07:18:37.342706Z", "author": "echuraev", "msg": "[OpenCL] reserve_id_t cannot be used as argument to kernel function\n\nReviewers: Anastasia\n\nReviewed By: Anastasia\n\nSubscribers: yaxunl, cfe-commits, bader\n\nDifferential Revision: https://reviews.llvm.org/D33483", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/test/SemaOpenCL/invalid-pipes-cl2.0.cl\n"}, {"commit_id": "303875", "date": "2017-05-25T15:44:20.423453Z", "author": "dannyb", "msg": "NewGVN: Fix PR 33119, PR 33129, due to regressed undef handling\nFix PR33120 and others by eliminating self-cycles a different way.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nM | /llvm/trunk/test/Transforms/NewGVN/pr32403.ll\n"}, {"commit_id": "304020", "date": "2017-05-26T18:52:56.134118Z", "author": "dblaikie", "msg": "DebugInfo: Do not emit empty CUs\n\nConsistent with GCC and addresses a shortcoming with ThinLTO where many\nimported CUs may end up being empty (because the functions imported from\nthem either ended up not being used (and were then discarded, since\nthey're imported as available_externally) or optimized away entirely).\n\nTest cases previously testing empty CUs (either intentionally, or\nbecause they didn't need anything more complicated) had a trivial 'int'\nor similar basic type added to their retained types list.\n\nThis is a first order approximation - a deeper implementation could do\nthings like:\n\n1) Be more lazy about construction of the CU - for example if two CUs\ncontaining a single identical retained type are linked together, with\nthis change one of the two CUs will be produced but empty (since a\nduplicate type won't be produced).\n\n2) Go further and invert all the CU links the same way the subprogram\nlink is inverted - keep named CU lists of retained types, macros, etc,\nand have those link back to the CU. Then if they're emitted, the CU is\nemitted, but never otherwise - this would allow the metadata itself to\nbe dropped earlier too, though it seems unlikely that's an important\noptimization as there shouldn't be many CUs relative to the number of\nother entities.", "modified": "M | /llvm/trunk/include/llvm/IR/Metadata.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.h\nM | /llvm/trunk/test/DebugInfo/Generic/empty.ll\nM | /llvm/trunk/test/DebugInfo/Generic/nodebug.ll\nM | /llvm/trunk/test/DebugInfo/Generic/skeletoncu.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-loc-offset.ll\nM | /llvm/trunk/test/DebugInfo/X86/debug-macro.ll\nM | /llvm/trunk/test/DebugInfo/X86/empty.ll\nM | /llvm/trunk/test/DebugInfo/X86/fission-hash.ll\nM | /llvm/trunk/test/DebugInfo/X86/gnu-public-names-empty.ll\nM | /llvm/trunk/test/DebugInfo/dwo.ll\nA | /llvm/trunk/test/DebugInfo/omit-empty.ll\nM | /llvm/trunk/test/DebugInfo/skeletoncu.ll\n"}, {"commit_id": "304194", "date": "2017-05-30T06:42:29.852064Z", "author": "dannyb", "msg": "NewGVN: Fix PR33194, memory corruption by putting temporary instructions in tables sometimes.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\n"}, {"commit_id": "304267", "date": "2017-05-31T01:21:35.463385Z", "author": "matze", "msg": "ARM: Fix cmpxchg O0 expansion\n\nThis is the equivalent of r304048 for ARM:\n\n- Rewrite livein calculation to use the computeLiveIns() helper\n  function. This is slightly less efficient but easier to reason about\n  and doesn't unnecessarily add pristine and reserved registers[1]\n- Zero the status register at the beginning of the loop to make sure it\n  has a defined value.\n- Remove kill flags of values that need to stay alive throughout the loop.\n\n[1] An upcoming commit of mine will tighten the MachineVerifier to catch\n    these.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMExpandPseudoInsts.cpp\nM | /llvm/trunk/test/CodeGen/ARM/cmpxchg-O0.ll\n"}, {"commit_id": "304444", "date": "2017-06-01T18:13:02.005721Z", "author": "rksimon", "msg": "Remove late nullptr pointer test (PR32447)\n\nIgnoreNarrowingConversion should never return nullptr, but I've added an assert just in case.", "modified": "M | /cfe/trunk/lib/Sema/SemaOverload.cpp\n"}, {"commit_id": "305162", "date": "2017-06-11T11:36:38.314062Z", "author": "deadalnix", "msg": "[DAGCombine] Make sure we check the ResNo from UADDO before combining\n\nSummary: UADDO has 2 result, and one must check the result no before doing any kind of combine. Without it, the transform is invalid.\n\nReviewers: joerg\n\nSubscribers: llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D34088", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nM | /llvm/trunk/test/CodeGen/X86/addcarry.ll\n"}, {"commit_id": "305244", "date": "2017-06-12T22:41:06.894810Z", "author": "adrian", "msg": "Fix an assertion failure when duplicate dbg.declares are present.\n\nThis fixes PR33157.\nhttps://bugs.llvm.org//show_bug.cgi?id=33157\n\nWe might also think about disallowing duplicate dbg.declare intrinsics\nentirely, but this may complicate some passes needlessly.", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.h\nA | /llvm/trunk/test/DebugInfo/Generic/double-declare.ll\n"}, {"commit_id": "305409", "date": "2017-06-14T19:29:53.686811Z", "author": "davide", "msg": "[EarlyCSE] Make PhiToCheck in removeMSSA() a set.\n\nThis way we end up not looking at PHI args already removed.\nMemSSA now goes through the updater so we can prune\nit to avoid having redundant MemoryPHI arguments, but that\ndoesn't quite work for the general case.\n\nDiscussed with Daniel Berlin, fixes PR33406.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/EarlyCSE.cpp\nA | /llvm/trunk/test/Transforms/EarlyCSE/pr33406.ll\n"}, {"commit_id": "306573", "date": "2017-06-28T17:56:07.508220Z", "author": "rafael", "msg": "Fix PR33625.\n\nWe were failing to convert this expression to pcrel.", "modified": "M | /llvm/trunk/lib/Target/X86/MCTargetDesc/X86WinCOFFObjectWriter.cpp\nA | /llvm/trunk/test/MC/X86/signed-coff-pcrel.s\n"}, {"commit_id": "307694", "date": "2017-07-11T19:19:45.115082Z", "author": "davide", "msg": "[NewGVN] Fix an innocent typo I found while debugging PR33720.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\n"}, {"commit_id": "307699", "date": "2017-07-11T19:49:12.072046Z", "author": "davide", "msg": "[NewGVN] Check for congruency of memory accesses.\n\nThis is fine as nothing in the code relies on leader and memory\nleader being the same for a given congruency class. Ack'ed by\nDan.\n\nFixes PR33720.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nA | /llvm/trunk/test/Transforms/NewGVN/pr33720.ll\n"}, {"commit_id": "308708", "date": "2017-07-21T01:24:05.954952Z", "author": "adrian", "msg": "Debug Info: Don't strip clang module skeleton CUs.\n\nThis corrects a (hopefully :-) accidental side-effect of r304020.\n\nrdar://problem/33442618", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nA | /llvm/trunk/test/DebugInfo/X86/clang-module.ll\n"}, {"commit_id": "308850", "date": "2017-07-23T17:59:07.652638Z", "author": "adrian", "msg": "Fix PR33875 by distinguishing between DWO and clang modules\n\nThe DWO handling code can get confused by clang modules which also use\nskeleton CUs to point to the object file with the full debug\ninfo. This patch detects whether an object is a \"real\" DWO or a clang\nmodule and prevents LLDB from interpreting clang modules as DWO. This\nfixes the regression in TestWithModuleDebugging.\n\nhttp://llvm.org/bugs/show_bug.cgi?id=33875\n\nDifferential Revision: https://reviews.llvm.org/D35740", "modified": "M | /lldb/trunk/packages/Python/lldbsuite/test/lang/cpp/gmodules/TestWithModuleDebugging.py\nM | /lldb/trunk/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDwo.cpp\n"}, {"commit_id": "308851", "date": "2017-07-23T20:24:41.056173Z", "author": "adrian", "msg": "Revert \"Fix PR33875 by distinguishing between DWO and clang modules\"\n\nThis reverts commit r308850.", "modified": "M | /lldb/trunk/packages/Python/lldbsuite/test/lang/cpp/gmodules/TestWithModuleDebugging.py\nM | /lldb/trunk/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDwo.cpp\n"}, {"commit_id": "308891", "date": "2017-07-24T16:18:09.156281Z", "author": "d0k", "msg": "[CodeGenPrepare] Cut off FindAllMemoryUses if there are too many uses.\n\nThis avoids excessive compile time. The case I'm looking at is\nFunction.cpp from an old version of LLVM that still had the giant memcmp\nstring matcher in it. Before r308322 this compiled in about 2 minutes,\nafter it, clang takes infinite* time to compile it. With this patch\nwe're at 5 min, which is still bad but this is a pathological case.\n\nThe cut off at 20 uses was chosen by looking at other cut-offs in LLVM\nfor user scanning. It's probably too high, but does the job and is very\nunlikely to regress anything.\n\nFixes PR33900.\n\n* I'm impatient and aborted after 15 minutes, on the bug report it was\n  killed after 2h.", "modified": "M | /llvm/trunk/lib/CodeGen/CodeGenPrepare.cpp\n"}, {"commit_id": "308905", "date": "2017-07-24T18:06:39.319927Z", "author": "adrian", "msg": "RFix PR33875 by distinguishing between DWO and clang modules.\n\nThis reapplies https://reviews.llvm.org/D35740 with a tweak to find\nthe section by name rather than type. Section types don't distinguish\nbetween regular sections and their DWO counterparts.", "modified": "M | /lldb/trunk/packages/Python/lldbsuite/test/lang/cpp/gmodules/TestWithModuleDebugging.py\nM | /lldb/trunk/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDwo.cpp\n"}, {"commit_id": "308978", "date": "2017-07-25T15:28:28.390451Z", "author": "fedor.sergeev", "msg": "[Sparc] invalid adjustments in TLS_LE/TLS_LDO relocations removed\n\nSummary:\nSome SPARC TLS relocations were applying nontrivial adjustments\nto zero value, leading to unexpected non-zero values in ELF and then\nSolaris linker failures.\n\nGetting rid of these adjustments.\n\nFixes PR33825.\n\nReviewers: rafael, asb, jyknight\n\nSubscribers: joerg, jyknight, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D35567", "modified": "M | /llvm/trunk/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp\nA | /llvm/trunk/test/MC/Sparc/sparc-tls-relocations.s\n"}, {"commit_id": "308986", "date": "2017-07-25T17:04:37.993897Z", "author": "rksimon", "msg": "[X86][CGP] Reduce memcmp() expansion to 2 load pairs (PR33914)\n\nD35067/rL308322 attempted to support up to 4 load pairs for memcmp inlining which resulted in regressions for some optimized libc memcmp implementations (PR33914).\n\nUntil we can match these more optimal cases, this patch reduces the memcmp expansion to a maximum of 2 load pairs (which matches what we do for -Os).\n\nThis patch should be considered for the 5.0.0 release branch as well\n\nDifferential Revision: https://reviews.llvm.org/D35830", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/memcmp.ll\nM | /llvm/trunk/test/Transforms/CodeGenPrepare/X86/memcmp.ll\n"}, {"commit_id": "309019", "date": "2017-07-25T20:12:25.140557Z", "author": "adrian", "msg": "Improve the fix for PR33875 by not hardcoding the section name.\nThis is a follow-up to r308905.", "modified": "M | /lldb/trunk/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDwo.cpp\n"}, {"commit_id": "309058", "date": "2017-07-25T23:33:58.238671Z", "author": "majnemer", "msg": "[CodeGen] Correctly model std::byte's aliasing properties\n\nstd::byte, when defined as an enum, needs to be given special treatment\nwith regards to its aliasing properties. An array of std::byte is\nallowed to be used as storage for other types.\n\nThis fixes PR33916.\n\nDifferential Revision: https://reviews.llvm.org/D35824", "modified": "M | /cfe/trunk/include/clang/AST/Type.h\nM | /cfe/trunk/lib/AST/Type.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenTBAA.cpp\nA | /cfe/trunk/test/CodeGenCXX/std-byte.cpp\n"}, {"commit_id": "309118", "date": "2017-07-26T14:58:55.898277Z", "author": "sepavloff", "msg": "Regression test for PR10856\n", "modified": "A | /cfe/trunk/test/SemaTemplate/instantiate-friend-function.cpp\n"}, {"commit_id": "309375", "date": "2017-07-28T09:43:52.621137Z", "author": "rksimon", "msg": "[X86] Add test case for PR33290", "modified": "A | /llvm/trunk/test/CodeGen/X86/pr33290.ll\n"}, {"commit_id": "309382", "date": "2017-07-28T13:47:02.381116Z", "author": "rksimon", "msg": "[X86] Add tests showing inability of vector non-temporal load/store intrinsic to force pointer alignment (PR33830)\n\nClang specifies a max type alignment of 16 bytes on darwin targets, meaning that the builtin nontemporal stores don't correctly align the loads/stores to 32 or 64 bytes when required, resulting in lowering to temporal unaligned loads/stores.", "modified": "A | /cfe/trunk/test/CodeGen/x86-nontemporal.c\n"}, {"commit_id": "309383", "date": "2017-07-28T14:01:51.266082Z", "author": "rksimon", "msg": "Strip trailing whitespace. NFCI.", "modified": "M | /cfe/trunk/lib/Headers/avx512fintrin.h\n"}, {"commit_id": "309488", "date": "2017-07-29T15:33:34.414671Z", "author": "rksimon", "msg": "[X86][AVX] Ensure vector non-temporal load/store intrinsics force pointer alignment (PR33830)\n\nClang specifies a max type alignment of 16 bytes on darwin targets (annoyingly in the driver not via cc1), meaning that the builtin nontemporal stores don't correctly align the loads/stores to 32 or 64 bytes when required, resulting in lowering to temporal unaligned loads/stores.\n\nThis patch casts the vectors to explicitly aligned types prior to the load/store to ensure that the require alignment is respected.\n\nDifferential Revision: https://reviews.llvm.org/D35996", "modified": "M | /cfe/trunk/lib/Headers/avx2intrin.h\nM | /cfe/trunk/lib/Headers/avx512fintrin.h\nM | /cfe/trunk/lib/Headers/avxintrin.h\nM | /cfe/trunk/test/CodeGen/x86-nontemporal.c\n"}, {"commit_id": "309611", "date": "2017-07-31T20:00:22.905134Z", "author": "kcc", "msg": "[sanitizer-coverage] don't instrument available_externally functions", "modified": "M | /llvm/trunk/lib/Transforms/Instrumentation/SanitizerCoverage.cpp\nM | /llvm/trunk/test/Instrumentation/SanitizerCoverage/tracing.ll\n"}, {"commit_id": "309752", "date": "2017-08-01T22:10:36.676813Z", "author": "bruno", "msg": "[Headers][Darwin] Allow #include_next<float.h> to work on Darwin prior to 10.7\n\nThis fixes PR31504 and it's a follow up from adding #include_next<float.h>\nfor Darwin in r289018.\n\nrdar://problem/29856682", "modified": "M | /cfe/trunk/lib/Headers/float.h\n"}, {"commit_id": "309923", "date": "2017-08-03T07:45:10.735725Z", "author": "rogfer01", "msg": "[ARM] Use ADDCARRY / SUBCARRY\n\nThis patch:\n\n- makes nodes ISD::ADDCARRY and ISD::SUBCARRY legal for i32\n- lowering is done by first converting the boolean value into the carry flag\n  using (_, C) <- (ARMISD::ADDC R, -1) and converted back to an integer value\n  using (R, _) <- (ARMISD::ADDE 0, 0, C). An ARMISD::ADDE between the two\n  operations does the actual addition.\n- for subtraction, given that ISD::SUBCARRY second result is actually a\n  borrow, we need to invert the value of the second operand and result before\n  and after using ARMISD::SUBE. We need to invert the carry result of\n  ARMISD::SUBE to preserve the semantics.\n- given that the generic combiner may lower ISD::ADDCARRY and\n  ISD::SUBCARRY into ISD::UADDO and ISD::USUBO we need to update their lowering\n  as well otherwise i64 operations now would require branches. This implies\n  updating the corresponding test for unsigned.\n- add new combiner to remove the redundant conversions from/to carry flags\n  to/from boolean values (ARMISD::ADDC (ARMISD::ADDE 0, 0, C), -1) -> C\n\nDifferential Revision: https://reviews.llvm.org/D35192\n\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.h\nM | /llvm/trunk/test/CodeGen/ARM/intrinsics-overflow.ll\n"}, {"commit_id": "309930", "date": "2017-08-03T09:38:46.631365Z", "author": "sdardis", "msg": "[SelectionDAG] Resolve PR33978.\n\nrL306209 taught SelectionDAG how to add the dereferenceable flag when\nexpanding memcpy and memmove. The fix however contained a nit where\nthe offset + size was constructed as an APInt of PointerSize rather\nthan PointerSizeInBits.\n\nThis lead to isDereferenceableAndAlignedPointer() get truncated values or\nvalues which would be sign extended within that function leading to\nincorrect results.\n\nThanks to Alex Crichton for reporting the issue!\n\nThis resolves PR33978.\n\nReviewers: inouehrs\n\nDifferential Revision: https://reviews.llvm.org/D36236\n", "modified": "M | /llvm/trunk/lib/CodeGen/MachineInstr.cpp\nA | /llvm/trunk/test/CodeGen/Mips/pr33978.ll\n"}, {"commit_id": "309950", "date": "2017-08-03T15:41:26.833019Z", "author": "nico", "msg": "Revert r309923, it caused PR34045.", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.h\nM | /llvm/trunk/test/CodeGen/ARM/intrinsics-overflow.ll\n"}, {"commit_id": "310055", "date": "2017-08-04T12:28:36.726053Z", "author": "filcab", "msg": "[DSE] Merge stores when the later store only writes to memory locations the early store also wrote to.\n\nSummary:\nThis fixes PR31777.\n\nIf both stores' values are ConstantInt, we merge the two stores\n(shifting the smaller store appropriately) and replace the earlier (and\nlarger) store with an updated constant.\n\nIn the future we should also support vectors of integers. And maybe\nfloat/double if we can.\n\nReviewers: hfinkel, junbuml, jfb, RKSimon, bkramer\n\nSubscribers: llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D30703", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/DeadStoreElimination.cpp\nM | /llvm/trunk/test/Transforms/DeadStoreElimination/PartialStore.ll\nM | /llvm/trunk/test/Transforms/DeadStoreElimination/combined-partial-overwrites.ll\nA | /llvm/trunk/test/Transforms/DeadStoreElimination/merge-stores-big-endian.ll\nA | /llvm/trunk/test/Transforms/DeadStoreElimination/merge-stores.ll\n"}, {"commit_id": "310058", "date": "2017-08-04T12:46:35.080913Z", "author": "rksimon", "msg": "[DAGCombiner] Extending pattern detection for vector shuffle.\n\nIf all the operands of a BUILD_VECTOR extract elements from same vector then split the vector efficiently based on the maximum vector access index.\n\nCommitted on behalf of @jbhateja (Jatin Bhateja)\n\nDifferential Revision: https://reviews.llvm.org/D35788", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nM | /llvm/trunk/test/CodeGen/X86/oddshuffles.ll\nM | /llvm/trunk/test/CodeGen/X86/shuffle-vs-trunc-512.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-512-v16.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-512-v8.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-interleaved-access.ll\n"}, {"commit_id": "310118", "date": "2017-08-04T20:24:13.309147Z", "author": "nico", "msg": "Revert r310058, it caused PR34073.", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nM | /llvm/trunk/test/CodeGen/X86/oddshuffles.ll\nM | /llvm/trunk/test/CodeGen/X86/shuffle-vs-trunc-512.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-512-v16.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-512-v8.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-interleaved-access.ll\n"}, {"commit_id": "310123", "date": "2017-08-04T20:40:38.298043Z", "author": "nico", "msg": "Revert r310055, it caused PR34074.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/DeadStoreElimination.cpp\nM | /llvm/trunk/test/Transforms/DeadStoreElimination/PartialStore.ll\nM | /llvm/trunk/test/Transforms/DeadStoreElimination/combined-partial-overwrites.ll\nD | /llvm/trunk/test/Transforms/DeadStoreElimination/merge-stores-big-endian.ll\nD | /llvm/trunk/test/Transforms/DeadStoreElimination/merge-stores.ll\n"}, {"commit_id": "310410", "date": "2017-08-08T20:30:14.526314Z", "author": "rnk", "msg": "[codeview] Emit nested enums and typedefs from classes\n\nPreviously we limited ourselves to only emitting nested classes, but we\nneed other kinds of types as well.\n\nThis fixes the Visual Studio STL visualizers, so that users can\nvisualize std::string and other objects.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nA | /cfe/trunk/test/CodeGenCXX/debug-info-codeview-nested-types.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp\nA | /llvm/trunk/test/DebugInfo/COFF/nested-types.ll\n"}, {"commit_id": "310534", "date": "2017-08-09T22:22:05.670901Z", "author": "matze", "msg": "ARM: Fix CMP_SWAP expansion\n\nClean up after my misguided attempt in r304267 to \"fix\" CMP_SWAP\nreturning an uninitialized status value.\n\n- I was always using tMOVi8 to zero the status register which cannot\n  encode higher register numbers and llvm would silently miscompile)\n\n- Nobody was ever looking at that status value outside the expansion.\n  ARMDAGToDAGISel::SelectCMP_SWAP() the only place creating CMP_SWAP\n  instructions was not mapping anything to it. (The cmpxchg status value\n  from llvm IR is lowered to a manual comparison after the CMP_SWAP)\n\nSo this:\n- Renames the register from \"status\" to \"temp\" it make it obvious that\n  it isn't used outside the expansion.\n- Remove the zeroing status/temp register.\n- Keep the live-in list improvements from r304267\n\nFixes http://llvm.org/PR34056", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMExpandPseudoInsts.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMInstrInfo.td\nM | /llvm/trunk/test/CodeGen/ARM/cmpxchg-O0.ll\n"}, {"commit_id": "310782", "date": "2017-08-12T17:43:25.905353Z", "author": "rksimon", "msg": "[DAGCombiner] Extending pattern detection for vector shuffle (REAPPLIED)\n\nIf all the operands of a BUILD_VECTOR extract elements from same vector then split the vector efficiently based on the maximum vector access index.\n\nReapplied with fix to only work with simple value types.\n\nCommitted on behalf of @jbhateja (Jatin Bhateja)\n\nDifferential Revision: https://reviews.llvm.org/D35788", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nM | /llvm/trunk/test/CodeGen/X86/shuffle-vs-trunc-512.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-512-v16.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-512-v8.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-interleaved-access.ll\n"}, {"commit_id": "310784", "date": "2017-08-12T20:19:44.854909Z", "author": "ctopper", "msg": "[X86] When handling addcarry intrinsic, create the flag result with the correct type so we don't crash if we use a memory instruction\n\nSummary:\nPreviously we were creating the flag result with MVT::Other which is interpretted as a Chain node. If we used a memory form of the instruction we would end up with a copyToReg that consumed the chain result of the adcx instruction instead of the flag result.\n\nPretty sure we should be using MVT::i32 here, that's what we do other places we create these node types.\n\nWe should probably consider this for 5.0 as well.\n\nReviewers: RKSimon, zvi, spatel\n\nReviewed By: RKSimon\n\nSubscribers: llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D36645", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/adx-intrinsics.ll\n"}, {"commit_id": "310827", "date": "2017-08-14T10:20:12.078203Z", "author": "seaneveson", "msg": "[llvm-cov] Add an option which maps the location of source directories on another machine to your local copies\n\nSummary:\nThis patch adds the -path-equivalence option (example: llvm-cov show -path-equivalence=/origin/path,/local/path) which maps the source code path from one machine to another when using `llvm-cov show`. This is similar to the -filename-equivalence option, but doesn't require you to specify all the source files on the command line.\n\nThis allows you to generate the coverage data on one machine (e.g. in a CI system), and then use llvm-cov on another machine where you have the same code base on a different path.\n\nReviewers: vsk\n\nReviewed By: vsk\n\nSubscribers: llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D36391", "modified": "M | /llvm/trunk/docs/CommandGuide/llvm-cov.rst\nA | /llvm/trunk/test/tools/llvm-cov/Inputs/path_equivalence.covmapping\nA | /llvm/trunk/test/tools/llvm-cov/Inputs/path_equivalence.proftext\nM | /llvm/trunk/test/tools/llvm-cov/binary-formats.c\nM | /llvm/trunk/test/tools/llvm-cov/combine_expansions.cpp\nM | /llvm/trunk/test/tools/llvm-cov/cov-comdat.test\nM | /llvm/trunk/test/tools/llvm-cov/deferred-region.cpp\nM | /llvm/trunk/test/tools/llvm-cov/demangle.test\nM | /llvm/trunk/test/tools/llvm-cov/hideUnexecutedSubviews.test\nM | /llvm/trunk/test/tools/llvm-cov/native_separators.c\nA | /llvm/trunk/test/tools/llvm-cov/path_equivalence.c\nM | /llvm/trunk/test/tools/llvm-cov/prefer_used_to_unused.h\nM | /llvm/trunk/test/tools/llvm-cov/prevent_false_instantiations.h\nM | /llvm/trunk/test/tools/llvm-cov/report.cpp\nM | /llvm/trunk/test/tools/llvm-cov/scan-directory.test\nM | /llvm/trunk/test/tools/llvm-cov/showExpansions.cpp\nM | /llvm/trunk/test/tools/llvm-cov/showHighlightedRanges.cpp\nM | /llvm/trunk/test/tools/llvm-cov/showLineExecutionCounts.cpp\nM | /llvm/trunk/test/tools/llvm-cov/showProjectSummary.cpp\nM | /llvm/trunk/test/tools/llvm-cov/showRegionMarkers.cpp\nM | /llvm/trunk/test/tools/llvm-cov/showTabsHTML.cpp\nM | /llvm/trunk/test/tools/llvm-cov/showTemplateInstantiations.cpp\nM | /llvm/trunk/test/tools/llvm-cov/style.test\nM | /llvm/trunk/test/tools/llvm-cov/threads.c\nM | /llvm/trunk/test/tools/llvm-cov/universal-binary.c\nM | /llvm/trunk/test/tools/llvm-cov/warnings.h\nM | /llvm/trunk/tools/llvm-cov/CodeCoverage.cpp\n"}, {"commit_id": "310836", "date": "2017-08-14T12:43:05.983775Z", "author": "seaneveson", "msg": "[llvm-cov] Fix compiler-rt tests failing in build bots after rL310827.\n\nThe compiler-rt tests used llvm-cov with -filename-equivelence, which was\nreplaced with the new option -path-equivalence in rL310827.\n\n", "modified": "M | /compiler-rt/trunk/test/profile/Linux/coverage_ctors.cpp\nM | /compiler-rt/trunk/test/profile/Linux/coverage_dtor.cpp\nM | /compiler-rt/trunk/test/profile/Linux/coverage_test.cpp\nM | /compiler-rt/trunk/test/profile/Linux/instrprof-comdat.test\n"}, {"commit_id": "311394", "date": "2017-08-21T22:31:31.282643Z", "author": "eugenis", "msg": "Fix ASan version list dependency in multi-arch builds.\n\nFixes PR32390.\n\nPatch by Andrey Krayniak.", "modified": "M | /compiler-rt/trunk/lib/asan/CMakeLists.txt\n"}, {"commit_id": "311565", "date": "2017-08-23T15:43:28.017922Z", "author": "hans", "msg": "LowerAtomic: Don't skip optnone functions; atomic still need lowering (PR34020)\n\nThe lowering isn't really an optimization, so optnone shouldn't make a\ndifference. ARM relies on the pass running when using \"-mthread-model\nsingle\", because in that mode, it doesn't run AtomicExpand. See bug for\nmore details.\n\nDifferential Revision: https://reviews.llvm.org/D37040", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LowerAtomic.cpp\nM | /llvm/trunk/test/Feature/optnone-opt.ll\nM | /llvm/trunk/test/Transforms/LowerAtomic/atomic-swap.ll\n"}, {"commit_id": "311595", "date": "2017-08-23T20:39:35.552432Z", "author": "rnk", "msg": "Attempt to fix the BUILD_SHARED_LIBS build after the DIExpression change", "modified": "M | /llvm/trunk/lib/CodeGen/MIRParser/LLVMBuild.txt\n"}, {"commit_id": "311623", "date": "2017-08-24T01:08:27.717507Z", "author": "hans", "msg": "[DAG] Fix Node Replacement in PromoteIntBinOp\n\nWhen one operand is a user of another in a promoted binary operation\nwe may replace and delete the returned value before returning\ntriggering an assertion. Reorder node replacements to prevent this.\n\nFixes PR34137.\n\nLanding on behalf of Nirav.\n\nDifferential Revision: https://reviews.llvm.org/D36581", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr34137.ll\n"}, {"commit_id": "311792", "date": "2017-08-25T19:14:53.986714Z", "author": "djasper", "msg": "[Format] Invert nestingAndIndentLevel pair in WhitespaceManager used for\nalignments\n\nIndent should be compared before nesting level to determine if a token\nis on the same scope as the one we align with. Because it was inverted,\nclang-format sometimes tried to align tokens with tokens from outer\nscopes, causing the assert(Shift >= 0) to fire.\n\nThis fixes bug #33507. Patch by Beren Minor, thank you!", "modified": "M | /cfe/trunk/lib/Format/WhitespaceManager.cpp\nM | /cfe/trunk/lib/Format/WhitespaceManager.h\nM | /cfe/trunk/unittests/Format/FormatTest.cpp\n"}, {"commit_id": "311957", "date": "2017-08-29T00:06:59.489485Z", "author": "inglorion", "msg": "[codeview] support more DW_OPs for more complete debug info\n\nSummary:\nSome variables show up in Visual Studio as \"optimized out\" even in -O0\n-Od builds. This change fixes two issues that would cause this to\nhappen. The first issue is that not all DIExpressions we generate were\nrecognized by the CodeView writer. This has been addressed by adding\nsupport for DW_OP_constu, DW_OP_minus, and DW_OP_plus. The second\nissue is that we had no way to encode DW_OP_deref in CodeView. We get\naround that by changinge the type we encode in the debug info to be\na reference to the type in the source code.\n\nThis fixes PR34261.\n\nReviewers: aprantl, rnk, zturner\n\nReviewed By: rnk\n\nSubscribers: mgorny, llvm-commits, aprantl, hiraditya\n\nDifferential Revision: https://reviews.llvm.org/D36907", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/CodeViewDebug.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DebugHandlerBase.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DebugHandlerBase.h\nA | /llvm/trunk/test/CodeGen/MIR/X86/diexpr-win32.mir\nM | /llvm/trunk/test/DebugInfo/COFF/pieces.ll\nM | /llvm/trunk/test/DebugInfo/COFF/types-array-advanced.ll\n"}, {"commit_id": "312034", "date": "2017-08-29T20:59:25.389292Z", "author": "inglorion", "msg": "Reland r311957 [codeview] support more DW_OPs for more complete debug info\n\nSummary:\nSome variables show up in Visual Studio as \"optimized out\" even in -O0\n-Od builds. This change fixes two issues that would cause this to\nhappen. The first issue is that not all DIExpressions we generate were\nrecognized by the CodeView writer. This has been addressed by adding\nsupport for DW_OP_constu, DW_OP_minus, and DW_OP_plus. The second\nissue is that we had no way to encode DW_OP_deref in CodeView. We get\naround that by changinge the type we encode in the debug info to be\na reference to the type in the source code.\n\nThis fixes PR34261.\n\nThe reland adds two extra checks to the original: It checks if the\nDbgVariableLocation is valid before checking any of its fields, and\nit only emits ranges with nonzero registers.\n\nReviewers: aprantl, rnk, zturner\n\nReviewed By: rnk\n\nSubscribers: mgorny, llvm-commits, aprantl, hiraditya\n\nDifferential Revision: https://reviews.llvm.org/D36907", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/CodeViewDebug.h\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DebugHandlerBase.cpp\nM | /llvm/trunk/lib/CodeGen/AsmPrinter/DebugHandlerBase.h\nA | /llvm/trunk/test/CodeGen/MIR/X86/diexpr-win32.mir\nM | /llvm/trunk/test/DebugInfo/COFF/pieces.ll\nM | /llvm/trunk/test/DebugInfo/COFF/types-array-advanced.ll\n"}, {"commit_id": "312249", "date": "2017-08-31T16:04:49.544870Z", "author": "grosser", "msg": "[ForwardOpTree] Allow forwarding in the presence of region statements\n\nSummary:\nAfter region statements now also have instruction lists, this is a\nstraightforward extension.\n\nReviewers: Meinersbur, bollu, singam-sanjay, gareevroman\n\nReviewed By: Meinersbur\n\nSubscribers: hfinkel, pollydev, llvm-commits\n\nTags: #polly\n\nDifferential Revision: https://reviews.llvm.org/D37298", "modified": "M | /polly/trunk/include/polly/ScopInfo.h\nM | /polly/trunk/lib/Support/VirtualInstruction.cpp\nM | /polly/trunk/lib/Transform/ForwardOpTree.cpp\nA | /polly/trunk/test/ForwardOpTree/forward_from_region.ll\nA | /polly/trunk/test/ForwardOpTree/forward_into_region.ll\nA | /polly/trunk/test/ForwardOpTree/noforward_from_region.ll\nD | /polly/trunk/test/ForwardOpTree/noforward_region.ll\n"}, {"commit_id": "312401", "date": "2017-09-02T02:18:44.445719Z", "author": "dannyb", "msg": "Fix PR/33305. caused by trying to simplify expressions in phi of ops that should have no leaders.\n\nSummary:\nAfter a discussion with Rekka, i believe this (or a small variant)\nshould fix the remaining phi-of-ops problems.\n\nRekka's algorithm for completeness relies on looking up expressions\nthat should have no leader, and expecting it to fail (IE looking up\nexpressions that can't exist in a predecessor, and expecting it to\nfind nothing).\n\nUnfortunately, sometimes these expressions can be simplified to\nconstants, but we need the lookup to fail anyway.  Additionally, our\nsimplifier outsmarts this by taking these \"not quite right\"\nexpressions, and simplifying them into other expressions or walking\nthrough phis, etc.  In the past, we've sometimes been able to find\nleaders for these expressions, incorrectly.\n\nThis change causes us to not to try to phi of ops such expressions.\nWe determine safety by seeing if they depend on a phi node in our\nblock.\n\nThis is not perfect, we can do a bit better, but this should be a\n\"correctness start\" that we can then improve.  It also requires a\nbunch of caching that i'll eventually like to eliminate.\n\nThe right solution, longer term, to the simplifier issues, is to make\nthe query interface for the instruction simplifier/constant folder\nhave the flags we need, so that we can keep most things going, but\nturn off the possibly-invalid parts (threading through phis, etc).\nThis is an issue in another wrong code bug as well.\n\nReviewers: davide, mcrosier\n\nSubscribers: sanjoy, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D37175", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nM | /llvm/trunk/test/Transforms/NewGVN/completeness.ll\nM | /llvm/trunk/test/Transforms/NewGVN/pr33185.ll\nA | /llvm/trunk/test/Transforms/NewGVN/pr33305.ll\nA | /llvm/trunk/test/Transforms/NewGVN/pr33432.ll\nM | /llvm/trunk/test/Transforms/NewGVN/pr33461.ll\n"}, {"commit_id": "312455", "date": "2017-09-03T19:47:19.639534Z", "author": "grosser", "msg": "[IslAst] Do not assert in case of empty min/max alias locations\n\nIn certain situations, the context in the isl_ast_build could result for the\nmin/max locations of our alias sets to become empty, which would cause an\ninternal error in isl, which is then unable to derive a value for these\nexpressions. Check these conditions before code generating expressions and\ninstead assume that alias check succeeded. This is valid, as the corresponding\nmemory accesses will not be executed under any valid context.\n\nThis fixed llvm.org/PR34432. Thanks to Qirun Zhang for reporting.", "modified": "M | /polly/trunk/lib/CodeGen/IslAst.cpp\nA | /polly/trunk/test/Isl/Ast/alias_checks_with_empty_context.ll\n"}, {"commit_id": "312480", "date": "2017-09-04T11:04:33.438808Z", "author": "grosser", "msg": "[CodegenCleanup] Use old GVN pass instead of NewGVN\n\nIt seems NewGVN still has some problems: llvm.org/PR34452, we will switch back\nafter they have been resolved.", "modified": "M | /polly/trunk/lib/CodeGen/CodegenCleanup.cpp\n"}, {"commit_id": "312509", "date": "2017-09-05T02:17:42.492494Z", "author": "dannyb", "msg": "NewGVN: Fix PR 34452 by passing instruction all the way down when we do aggregate value simplification", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nA | /llvm/trunk/test/Transforms/NewGVN/pr34452.ll\n"}, {"commit_id": "312510", "date": "2017-09-05T02:17:43.537364Z", "author": "dannyb", "msg": "NewGVN: Fix PR 34430 - we need to look through predicateinfo copies to detect self-cycles of phi nodes.  We also need to not ignore certain types of arguments when testing whether the phi has a backedge or was originally constant.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nA | /llvm/trunk/test/Transforms/NewGVN/pr34430.ll\n"}, {"commit_id": "312786", "date": "2017-09-08T10:49:11.782192Z", "author": "rksimon", "msg": "[X86] Added PR31045 test case \n\nReduced version of 'addr-calc-crash.ll' that was included in D27044, that had been fixed already by D31286/rL298633", "modified": "A | /llvm/trunk/test/CodeGen/X86/pr31045.ll\n"}, {"commit_id": "312897", "date": "2017-09-11T07:35:01.057797Z", "author": "djasper", "msg": "Revert r312830: \"Reinstall the patch \"Use EmitPointerWithAlignment to get alignment information of the pointer used in atomic expr\".\"\n\nThis triggers llvm.org/PR31620 in several of our internal builds. I'll\nforward reproduction instructions to the original author.", "modified": "M | /cfe/trunk/lib/CodeGen/CGAtomic.cpp\nD | /cfe/trunk/test/CodeGenCXX/atomic-align.cpp\n"}, {"commit_id": "312898", "date": "2017-09-11T07:38:05.694823Z", "author": "rogfer01", "msg": "[ARM] Use ADDCARRY / SUBCARRY\n\nThis is a preparatory step for D34515 and also is being recommitted as its\nfirst version caused PR34045.\n\nThis change:\n - makes nodes ISD::ADDCARRY and ISD::SUBCARRY legal for i32\n - lowering is done by first converting the boolean value into the carry flag\n   using (_, C) \u922b?(ARMISD::ADDC R, -1) and converted back to an integer value\n   using (R, _) \u922b?(ARMISD::ADDE 0, 0, C). An ARMISD::ADDE between the two\n   operations does the actual addition.\n - for subtraction, given that ISD::SUBCARRY second result is actually a\n   borrow, we need to invert the value of the second operand and result before\n   and after using ARMISD::SUBE. We need to invert the carry result of\n   ARMISD::SUBE to preserve the semantics.\n - given that the generic combiner may lower ISD::ADDCARRY and\n   ISD::SUBCARRYinto ISD::UADDO and ISD::USUBO we need to update their lowering\n   as well otherwise i64 operations now would require branches. This implies\n   updating the corresponding test for unsigned.\n - add new combiner to remove the redundant conversions from/to carry flags\n   to/from boolean values (ARMISD::ADDC (ARMISD::ADDE 0, 0, C), -1) \u922b?C\n - fixes PR34045\n\nDifferential Revision: https://reviews.llvm.org/D35192\n\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.h\nM | /llvm/trunk/test/CodeGen/ARM/intrinsics-overflow.ll\nA | /llvm/trunk/test/CodeGen/ARM/pr34045.ll\n"}, {"commit_id": "313009", "date": "2017-09-12T07:40:09.001762Z", "author": "rogfer01", "msg": "[ARM] Use ADDCARRY / SUBCARRY\n\nThis is a preparatory step for D34515 and also is being recommitted as its\nfirst version caused PR34045.\n\nThis change:\n - makes nodes ISD::ADDCARRY and ISD::SUBCARRY legal for i32\n - lowering is done by first converting the boolean value into the carry flag\n   using (_, C) \u922b?(ARMISD::ADDC R, -1) and converted back to an integer value\n   using (R, _) \u922b?(ARMISD::ADDE 0, 0, C). An ARMISD::ADDE between the two\n   operations does the actual addition.\n - for subtraction, given that ISD::SUBCARRY second result is actually a\n   borrow, we need to invert the value of the second operand and result before\n   and after using ARMISD::SUBE. We need to invert the carry result of\n   ARMISD::SUBE to preserve the semantics.\n - given that the generic combiner may lower ISD::ADDCARRY and\n   ISD::SUBCARRYinto ISD::UADDO and ISD::USUBO we need to update their lowering\n   as well otherwise i64 operations now would require branches. This implies\n   updating the corresponding test for unsigned.\n - add new combiner to remove the redundant conversions from/to carry flags\n   to/from boolean values (ARMISD::ADDC (ARMISD::ADDE 0, 0, C), -1) \u922b?C\n - fixes PR34045\n\nDifferential Revision: https://reviews.llvm.org/D35192\n\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.h\nM | /llvm/trunk/test/CodeGen/ARM/intrinsics-overflow.ll\nA | /llvm/trunk/test/CodeGen/ARM/pr34045.ll\n"}, {"commit_id": "313010", "date": "2017-09-12T07:42:28.302912Z", "author": "rogfer01", "msg": "[ARM] Fix typo when creating ISD::SUB nodes\n\nIn D35192, I accidentally introduced a typo when creating ISD::SUB nodes,\ngiving them two values instead of one.\n\nThis fails when the merge_values combiner finds one of these nodes.\n\nThis change fixes PR34564.\n\nDifferential Revision: https://reviews.llvm.org/D37690\n\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\n"}, {"commit_id": "313044", "date": "2017-09-12T16:24:17.817708Z", "author": "hans", "msg": "Revert r313009 \"[ARM] Use ADDCARRY / SUBCARRY\"\n\nThis was causing PR34045 to fire again.\n\n> This is a preparatory step for D34515 and also is being recommitted as its\n> first version caused PR34045.\n>\n> This change:\n>  - makes nodes ISD::ADDCARRY and ISD::SUBCARRY legal for i32\n>  - lowering is done by first converting the boolean value into the carry flag\n>    using (_, C) \u922b?(ARMISD::ADDC R, -1) and converted back to an integer value\n>    using (R, _) \u922b?(ARMISD::ADDE 0, 0, C). An ARMISD::ADDE between the two\n>    operations does the actual addition.\n>  - for subtraction, given that ISD::SUBCARRY second result is actually a\n>    borrow, we need to invert the value of the second operand and result before\n>    and after using ARMISD::SUBE. We need to invert the carry result of\n>    ARMISD::SUBE to preserve the semantics.\n>  - given that the generic combiner may lower ISD::ADDCARRY and\n>    ISD::SUBCARRYinto ISD::UADDO and ISD::USUBO we need to update their lowering\n>    as well otherwise i64 operations now would require branches. This implies\n>    updating the corresponding test for unsigned.\n>  - add new combiner to remove the redundant conversions from/to carry flags\n>    to/from boolean values (ARMISD::ADDC (ARMISD::ADDE 0, 0, C), -1) \u922b?C\n>  - fixes PR34045\n>\n> Differential Revision: https://reviews.llvm.org/D35192\n\nAlso revert follow-up r313010:\n\n> [ARM] Fix typo when creating ISD::SUB nodes\n>\n> In D35192, I accidentally introduced a typo when creating ISD::SUB nodes,\n> giving them two values instead of one.\n>\n> This fails when the merge_values combiner finds one of these nodes.\n>\n> This change fixes PR34564.\n>\n> Differential Revision: https://reviews.llvm.org/D37690", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.h\nM | /llvm/trunk/test/CodeGen/ARM/intrinsics-overflow.ll\nD | /llvm/trunk/test/CodeGen/ARM/pr34045.ll\n"}, {"commit_id": "313096", "date": "2017-09-13T00:04:35.407658Z", "author": "vedantk", "msg": "[ubsan] Function Sanitizer: Don't require writable text segments\n\nThis change will make it possible to use -fsanitize=function on Darwin and\npossibly on other platforms. It fixes an issue with the way RTTI is stored into\nfunction prologue data.\n\nOn Darwin, addresses stored in prologue data can't require run-time fixups and\nmust be PC-relative. Run-time fixups are undesirable because they necessitate\nwritable text segments, which can lead to security issues. And absolute\naddresses are undesirable because they break PIE mode.\n\nThe fix is to create a private global which points to the RTTI, and then to\nencode a PC-relative reference to the global into prologue data.\n\nDifferential Revision: https://reviews.llvm.org/D37597", "modified": "M | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/CodeGen/TargetInfo.cpp\nM | /cfe/trunk/test/CodeGenCXX/catch-undef-behavior.cpp\n"}, {"commit_id": "313379", "date": "2017-09-15T18:55:35.080423Z", "author": "pcc", "msg": "cfi: Enable ThinLTO tests on Windows.\n\nWe now avoid using absolute symbols on Windows (D37407 and D37408),\nso this should work.\n\nFixes PR32770.\n\nDifferential Revision: https://reviews.llvm.org/D37883", "modified": "M | /compiler-rt/trunk/test/cfi/CMakeLists.txt\n"}, {"commit_id": "313422", "date": "2017-09-15T23:14:22.740494Z", "author": "vedantk", "msg": "[llvm-cov] Fix a bot failure due to r313417\n\nThere's a type mismatch issue with the arguments to a call to std::min\nintroduced in r313417.\n\nhttp://lab.llvm.org:8011/builders/clang-cmake-thumbv7-a15/builds/11174", "modified": "M | /llvm/trunk/tools/llvm-cov/CoverageSummaryInfo.cpp\n"}, {"commit_id": "313618", "date": "2017-09-19T09:05:39.354120Z", "author": "rogfer01", "msg": "[ARM] Use ADDCARRY / SUBCARRY\n\nThis is a preparatory step for D34515.\n\nThis change:\n - makes nodes ISD::ADDCARRY and ISD::SUBCARRY legal for i32\n - lowering is done by first converting the boolean value into the carry flag\n   using (_, C) \u922b?(ARMISD::ADDC R, -1) and converted back to an integer value\n   using (R, _) \u922b?(ARMISD::ADDE 0, 0, C). An ARMISD::ADDE between the two\n   operations does the actual addition.\n - for subtraction, given that ISD::SUBCARRY second result is actually a\n   borrow, we need to invert the value of the second operand and result before\n   and after using ARMISD::SUBE. We need to invert the carry result of\n   ARMISD::SUBE to preserve the semantics.\n - given that the generic combiner may lower ISD::ADDCARRY and\n   ISD::SUBCARRYinto ISD::UADDO and ISD::USUBO we need to update their lowering\n   as well otherwise i64 operations now would require branches. This implies\n   updating the corresponding test for unsigned.\n - add new combiner to remove the redundant conversions from/to carry flags\n   to/from boolean values (ARMISD::ADDC (ARMISD::ADDE 0, 0, C), -1) \u922b?C\n - fixes PR34045\n - fixes PR34564\n\nDifferential Revision: https://reviews.llvm.org/D35192\n\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.h\nM | /llvm/trunk/test/CodeGen/ARM/intrinsics-overflow.ll\nA | /llvm/trunk/test/CodeGen/ARM/pr34045-2.ll\nA | /llvm/trunk/test/CodeGen/ARM/pr34045.ll\n"}, {"commit_id": "313842", "date": "2017-09-21T00:01:13.941395Z", "author": "meinersbur", "msg": "Check whether IslAstInfo and DependenceInfo were computed for the same Scop.\n\nSince -polly-codegen reports itself to preserve DependenceInfo and IslAstInfo,\nwe might get those analysis that were computed by a different ScopInfo for a\ndifferent Scop structure. This would be unfortunate because DependenceInfo and\nIslAstInfo hold references to resources allocated by\nScopInfo/ScopBuilder/Scop (e.g. isl_id). If -polly-codegen and\nDependenceInfo/IslAstInfo do not agree on which Scop to use, unpredictable\nthings can happen.\n\nWhen the ScopInfo/Scop object is freed, there is a high probability that the\nnew ScopInfo/Scop object will be created at the same heap position with the\nsame address. Comparing whether the Scop or ScopInfo address is the expected\ntherefore is unreliable.\n\nInstead, we compare the address of the isl_ctx object. Both, DependenceInfo\nand IslAstInfo must hold a reference to the isl_ctx object to ensure it is\nnot freed before the destruction of those analyses which might happen after\nthe destruction of the Scop/ScopInfo they refer to.  Hence, the isl_ctx\nwill not be freed and its address not reused as long there is a\nDependenceInfo or IslAstInfo around.\n\nThis fixes llvm.org/PR34441", "modified": "M | /polly/trunk/include/polly/CodeGen/IslAst.h\nM | /polly/trunk/include/polly/DependenceInfo.h\nM | /polly/trunk/lib/CodeGen/CodeGeneration.cpp\nM | /polly/trunk/lib/CodeGen/IslAst.cpp\nM | /polly/trunk/lib/Transform/ScheduleOptimizer.cpp\nA | /polly/trunk/test/Isl/CodeGen/multiple-codegens.ll\nM | /polly/trunk/test/ScopDetect/base_pointer_load_setNewAccessRelation.ll\n"}, {"commit_id": "313902", "date": "2017-09-21T19:08:23.200463Z", "author": "meinersbur", "msg": "[DeLICM] Allow non-injective PHIRead->PHIWrite mapping.\n\nRemove an assertion that tests the injectivity of the\nPHIRead -> PHIWrite relation.  That is, allow a single PHI write to be\nused by multiple PHI reads.  This may happen due to some statements\ncontaining the PHI write not having the statement instances that would\noverwrite the previous incoming value due to (assumed/invalid) contexts.\nThis result in that PHI write is mapped to multiple targets which is not\nsupported.  Codegen will select one one of the targets using\ngetAddressFunction().  However, the runtime check should protect us from\nthis case ever being executed.\n\nWe therefore allow injective PHI relations.  Additional calculations to\ndetect/santitize this case would probably not be worth the compuational\neffort.\n\nThis fixes llvm.org/PR34485", "modified": "M | /polly/trunk/lib/Transform/DeLICM.cpp\nA | /polly/trunk/test/DeLICM/noninjective_phi_relation.ll\n"}, {"commit_id": "313992", "date": "2017-09-22T16:30:00.135546Z", "author": "wmi", "msg": "[Atomic][X8664] set max atomic inline width according to the target\n\nThis is to fix PR31620. MaxAtomicInlineWidth is set to 128 for x86_64. However\nfor target without cx16 support, 128 atomic operation will generate __sync_*\nlibcalls. The patch set MaxAtomicInlineWidth to 64 if the target doesn't support\ncx16.\n\nDifferential Revision: https://reviews.llvm.org/D38046\n", "modified": "M | /cfe/trunk/include/clang/Basic/TargetInfo.h\nM | /cfe/trunk/lib/Basic/Targets/X86.h\nM | /cfe/trunk/lib/Basic/Targets.cpp\nA | /cfe/trunk/test/CodeGenCXX/atomic-inline.cpp\nM | /cfe/trunk/test/OpenMP/atomic_capture_codegen.cpp\nM | /cfe/trunk/test/OpenMP/atomic_read_codegen.c\nM | /cfe/trunk/test/OpenMP/atomic_update_codegen.cpp\nM | /cfe/trunk/test/OpenMP/atomic_write_codegen.c\n"}, {"commit_id": "314124", "date": "2017-09-25T17:36:54.035631Z", "author": "kongyi", "msg": "[Sema] Null check in BuildDeclarationNameExpr\n\nQualtype may point to null if we cannot infer its type yet.\n\nFixes PR33843\n\nDifferential Revision: https://reviews.llvm.org/D38158", "modified": "M | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/test/SemaCXX/typo-correction-crash.cpp\n"}, {"commit_id": "314145", "date": "2017-09-25T19:57:59.774580Z", "author": "wmi", "msg": "Reinstall the patch \"Use EmitPointerWithAlignment to get alignment information of the pointer used in atomic expr\" after fixing PR31620.\n\nThis is to fix PR34347. EmitAtomicExpr now only uses alignment information from\nType, instead of Decl, so when the declaration of an atomic variable is marked\nto have the alignment equal as its size, EmitAtomicExpr doesn't know about it and\nwill generate libcall instead of atomic op. The patch uses EmitPointerWithAlignment\nto get the precise alignment information.\n\nDifferential Revision: https://reviews.llvm.org/D37310\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGAtomic.cpp\nA | /cfe/trunk/test/CodeGenCXX/atomic-align.cpp\n"}, {"commit_id": "314161", "date": "2017-09-25T21:37:52.331485Z", "author": "efriedma", "msg": "[ARM] Add tests for vcvt followed by store.\n\n", "modified": "M | /llvm/trunk/test/CodeGen/ARM/vcvt.ll\n"}, {"commit_id": "314206", "date": "2017-09-26T13:54:28.815889Z", "author": "spatel", "msg": "[DSE] Merge stores when the later store only writes to memory locations the early store also wrote to (2nd try)\n\nThis is a 2nd attempt at:\nhttps://reviews.llvm.org/rL310055\n...which was reverted at rL310123 because of PR34074:\nhttps://bugs.llvm.org/show_bug.cgi?id=34074\n\nIn this version, we break out of the inner loop after we successfully merge and kill a pair of stores. In the\nearlier rev, we were continuing instead, which meant we could process the invalid info from a now dead store.\n\nOriginal commit message (authored by Filipe Cabecinhas):\n\nThis fixes PR31777.\n\nIf both stores' values are ConstantInt, we merge the two stores\n(shifting the smaller store appropriately) and replace the earlier (and\nlarger) store with an updated constant.\n\nIn the future we should also support vectors of integers. And maybe\nfloat/double if we can.  \n\nDifferential Revision: https://reviews.llvm.org/D30703\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/DeadStoreElimination.cpp\nM | /llvm/trunk/test/Transforms/DeadStoreElimination/PartialStore.ll\nM | /llvm/trunk/test/Transforms/DeadStoreElimination/combined-partial-overwrites.ll\nA | /llvm/trunk/test/Transforms/DeadStoreElimination/merge-stores-big-endian.ll\nA | /llvm/trunk/test/Transforms/DeadStoreElimination/merge-stores.ll\n"}, {"commit_id": "314254", "date": "2017-09-26T21:56:55.478557Z", "author": "kuhar", "msg": "[Dominators] Invalidate DFS numbers upon edge deletions\n\nThis patch makes DeleteEdge correctly invalidate DFS numbers in the\nincremental updater. This should fix PR34466 and related bugs.", "modified": "M | /llvm/trunk/include/llvm/Support/GenericDomTreeConstruction.h\n"}, {"commit_id": "314531", "date": "2017-09-29T16:32:12.623971Z", "author": "ether", "msg": "[SimplifyIndVar] Do not fail when we constant fold an IV user to ConstantPointerNull\n\nThe type of a SCEVConstant may not match the corresponding LLVM Value.\nIn this case, we skip the constant folding for now.\n\nTODO: Replace ConstantInt Zero by ConstantPointerNull", "modified": "M | /llvm/trunk/lib/Transforms/Utils/SimplifyIndVar.cpp\nA | /llvm/trunk/test/Transforms/IndVarSimplify/constant-fold-1.ll\nM | /llvm/trunk/test/Transforms/IndVarSimplify/constant-fold.ll\n"}, {"commit_id": "314542", "date": "2017-09-29T18:07:39.103707Z", "author": "mssimpso", "msg": "[LV] Use correct insertion point when type shrinking reductions\n\nWhen type shrinking reductions, we should insert the truncations and extends at\nthe end of the loop latch block. Previously, these instructions were inserted\nat the end of the loop header block. The difference is only a problem for loops\nwith predicated instructions (e.g., conditional stores and instructions that\nmay divide by zero). For these instructions, we create new basic blocks inside\nthe vectorized loop, which cause the loop header and latch to no longer be the\nsame block. This should fix PR34687.\n\nReference: https://bugs.llvm.org/show_bug.cgi?id=34687", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nA | /llvm/trunk/test/Transforms/LoopVectorize/reduction-small-size.ll\n"}, {"commit_id": "314801", "date": "2017-10-03T14:33:41.872118Z", "author": "kuhar", "msg": "[Dominators] Add DFS number verification\n\nSummary:\nThis patch teaches the DominatorTree verifier to check DFS In/Out numbers which are used to answer dominance queries.\nDFS number verification is done in O(nlogn), so it shouldn't add much overhead on top of the O(n^3) sibling property verification.\nThis check should detect errors like the one spotted in PR34466 and related bug reports.\n\nThe patch also cleans up the DFS calculation a bit, as all constructed trees should have a single root now.\n\nI see 2 new test failures when running check-all after this change:\n\n```\nFailing Tests (2):\n    Polly :: Isl/CodeGen/OpenMP/reference-argument-from-non-affine-region.ll\n    Polly :: Isl/CodeGen/OpenMP/two-parallel-loops-reference-outer-indvar.ll\n\n```\nwhich seem to happen just after `Create LLVM-IR from SCoPs` -- I XFAILed them in r314800.\n\nReviewers: dberlin, grosser, davide, zhendongsu, bollu\n\nReviewed By: dberlin\n\nSubscribers: nandini12396, bollu, Meinersbur, brzycki, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D38331", "modified": "M | /llvm/trunk/include/llvm/Support/GenericDomTree.h\nM | /llvm/trunk/include/llvm/Support/GenericDomTreeConstruction.h\n"}, {"commit_id": "314865", "date": "2017-10-04T00:18:55.778964Z", "author": "epilk", "msg": "[ExprConstant] Allow constexpr ctor to modify non static data members\n\nFixes PR19741.\n\nDifferential revision: https://reviews.llvm.org/D38483", "modified": "M | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/test/SemaCXX/constant-expression-cxx1y.cpp\n"}, {"commit_id": "315979", "date": "2017-10-17T06:51:54.536157Z", "author": "vedantk", "msg": "[Coverage] Explicitly mark the l.h.s of && and || (fixes PR33465)\n\nThis makes it possible to view sub-line region counts for the l.h.s of\n&& and || expressions in coverage reports.\n\nIt also fixes PR33465, which shows an example of incorrect coverage\noutput for an assignment statement containing '||'.", "modified": "M | /cfe/trunk/lib/CodeGen/CoverageMappingGen.cpp\nM | /cfe/trunk/test/CoverageMapping/logical.cpp\nM | /cfe/trunk/test/CoverageMapping/macro-expansion.c\n"}, {"commit_id": "315982", "date": "2017-10-17T07:47:39.620828Z", "author": "vedantk", "msg": "[Coverage] Discard deferred region in closing if-else\n\nA trailing deferred region isn't necessary in a function that ends with\nthis pattern:\n\n  ...\n  else {\n    ...\n    return;\n  }\n\nSpecial-case this pattern so that the closing curly brace of the\nfunction isn't marked as uncovered. This issue came up in PR34962.", "modified": "M | /cfe/trunk/lib/CodeGen/CoverageMappingGen.cpp\nM | /cfe/trunk/test/CoverageMapping/deferred-region.cpp\n"}, {"commit_id": "316261", "date": "2017-10-21T13:58:37.625031Z", "author": "dmgreen", "msg": "[LoopInterchange] Fix phi node ordering miscompile.\n\nThe way that splitInnerLoopHeader splits blocks requires that\nthe induction PHI will be the first PHI in the inner loop\nheader. This makes sure that is actually the case when there\nare both IV and reduction phis.\n\nDifferential Revision: https://reviews.llvm.org/D38682\n\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopInterchange.cpp\nA | /llvm/trunk/test/Transforms/LoopInterchange/phi-ordering.ll\n"}, {"commit_id": "316432", "date": "2017-10-24T13:05:24.520823Z", "author": "meinersbur", "msg": "[DeLICM] Do not try to map to multiple array elements.\n\nAdd check and skip when the store used to determine the target accesses\nmultiple array elements. Only a single array location should for\nmapping the scalar. Having multiple creates problems when deciding which\nelement to load from. While MemoryAccess::getAddressFunction() should\nselect just one of them, other problems arise in code that assumes\nthat there is just one target element per statement instance.\n\nThis fixes llvm.org/PR34989\n\nThis also reverts r313902 which fixed llvm.org/PR34485 also caused by\na non-functional target array element. This patch avoids the situation\nto occur in the first place.", "modified": "M | /polly/trunk/lib/Transform/DeLICM.cpp\nD | /polly/trunk/test/DeLICM/noninjective_phi_relation.ll\nA | /polly/trunk/test/DeLICM/skip_multiaccess.ll\n"}, {"commit_id": "316518", "date": "2017-10-24T21:31:50.808751Z", "author": "erichkeane", "msg": "mplement __has_unique_object_representations\n\nA helper builtin to facilitate implementing the\nstd::has_unique_object_representations type trait.\n\nRequested here: https://bugs.llvm.org/show_bug.cgi?id=34942\nAlso already exists in GCC and MSVC.\n\nDifferential Revision: https://reviews.llvm.org/D39064\n", "modified": "M | /cfe/trunk/include/clang/AST/Type.h\nM | /cfe/trunk/include/clang/Basic/TokenKinds.def\nM | /cfe/trunk/include/clang/Basic/TypeTraits.h\nM | /cfe/trunk/lib/AST/Type.cpp\nM | /cfe/trunk/lib/Parse/ParseExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/test/SemaCXX/type-traits.cpp\n"}, {"commit_id": "316820", "date": "2017-10-28T01:15:00.310255Z", "author": "rsmith", "msg": "Never try to instantiate a deduction guide's \"definition\". Fixes bogus warning when there inevitably isn't one.\n", "modified": "M | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/test/SemaCXX/cxx1z-class-template-argument-deduction.cpp\n"}, {"commit_id": "317079", "date": "2017-11-01T07:11:32.362774Z", "author": "ctopper", "msg": "[X86] Add more type qualifiers to INSERT_SUBREG operations in rotate patterns so they don't get created with a v64i8 type.\n\nNot sure why tablegen didn't error on this.\n\nFixes PR35158.", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrAVX512.td\n"}, {"commit_id": "317820", "date": "2017-11-09T19:06:22.343620Z", "author": "george.karpenkov", "msg": "[analyzer] assume bitwise arithmetic axioms\n\nPatches the solver to assume that bitwise OR of an unsigned value with a\nconstant always produces a value larger-or-equal than the constant, and\nbitwise AND with a constant always produces a value less-or-equal than\nthe constant.\n\nThis patch is especially useful in the context of using bitwise\narithmetic for error code encoding: the analyzer would be able to state\nthat the error code produced using a bitwise OR is non-zero.\n\nDifferential Revision: https://reviews.llvm.org/D39707", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp\nM | /cfe/trunk/test/Analysis/constant-folding.c\n"}, {"commit_id": "317895", "date": "2017-11-10T16:26:04.855372Z", "author": "jbhateja", "msg": "[WebAssembly] Fix stack offsets of return values from call lowering.\n\nSummary: Fixes PR35220\n\nReviewers: vadimcn, alexcrichton\n\nReviewed By: alexcrichton\n\nSubscribers: pepyakin, alexcrichton, jfb, dschuff, sbc100, jgravelle-google, llvm-commits, aheejin\n\nDifferential Revision: https://reviews.llvm.org/D39866", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\nM | /llvm/trunk/test/CodeGen/WebAssembly/umulo-i64.ll\n"}, {"commit_id": "318039", "date": "2017-11-13T14:03:17.884991Z", "author": "labath", "msg": "Revert \"[lldb] Use OrcMCJITReplacement rather than MCJIT as the underlying JIT for LLDB\"\n\nThis commit really did not introduce any functional changes (for most\npeople) but it turns out it's not for the reason we thought it was.\n\nThe reason wasn't that Orc is a perfect drop-in replacement for MCJIT,\nbut it was because we were never using Orc in the first place, as it was\nnot initialized.\n\nOrc's initialization relies on a global constructor in the LLVMOrcJIT.a.\nSince this archive does not expose any symbols referenced from other\nobject files, it does not get linked into liblldb when linking against\nllvm components statically. However, in an LLVM_LINK_LLVM_DYLIB=On\nbuild, LLVMOrcJit.a is linked into libLLVM.so using --whole-archive, so\nthe global constructor does end up firing.\n\nThe result of using Orc jit is pr34194, where lldb fails to evaluate\neven very simple expressions. This bug can be reproduced in\nnon-LLVM_LINK_LLVM_DYLIB builds by making sure Orc jit is linked into\nliblldb, for example by #including\nllvm/ExecutionEngine/OrcMCJITReplacement.h in IRExecutionUnit.cpp (and\nadding OrcJIT as a dependency to the relevant CMakeLists.txt file). The\nbug reproduces (at least) on linux and osx.\n\nThe root cause of the bug seems to be related to relocation processing.\nIt seems Orc processes relocations earlier than the system it is\nreplacing. This means the relocation processing happens before we have\nhad a chance to remap section load addresses to reflect their address in\nthe target process memory, so they end up pointing to locations in the\nlldb's address space instead.\n\nI am not sure whether this is a bug in Orc jit, or in how we are using\nit from lldb, but in any case it is preventing us from using Orc right\nnow. Reverting this fixes LLVM_LINK_LLVM_DYLIB build, and makes it clear\nthat we are in fact *not* using Orc, and we never really were.\n\nThis reverts commit r279327.", "modified": "M | /lldb/trunk/source/Expression/IRExecutionUnit.cpp\n"}, {"commit_id": "318806", "date": "2017-11-21T22:11:10.005607Z", "author": "meinersbur", "msg": "[CodeGen] Detect empty domain because of parameters context.\n\nIsl does not allow generating isl_ast_expr from an isl_pw_aff that has an\nempty domain (i.e. has no pieces). We already detected the case if the\nisl_pw_aff comes with an empty domain.\n\nisl_ast_build also considers the domain empty if it is disjoint with the\nparameter context (e.g. parameters values that we exclude by runtime\nversioning).\n\nIntersect the access relation domain with the parameter context to\nalso detect such practically empty access domains. The effective\npointer used in the generated code is unimportand because it will never\nbe executed.\n\nThis fixes llvm.org/PR35362", "modified": "M | /polly/trunk/lib/CodeGen/IslNodeBuilder.cpp\nA | /polly/trunk/test/Isl/CodeGen/empty_domain_in_context.ll\n"}, {"commit_id": "318817", "date": "2017-11-22T03:04:55.160514Z", "author": "davide", "msg": "[SCCP] Pick the right lattice value for constants.\n\nAfter the dataflow algorithm proves that an argument is constant,\nit replaces it value with the integer constant and drops the lattice\nvalue associated to the DEF.\n\ne.g. in the example we have @f() that's called twice:\ncall @f(undef, ...)\ncall @f(2, ...)\n\n`undef` MEET 2 = 2 so we replace the argument and all its uses with\nthe constant 2.\n\nShortly after, tryToReplaceWithConstantRange() tries to get the lattice\nvalue for the argument we just replaced, causing an assertion.\nThis function is a little peculiar as it runs when we're doing replacement\nand not as part of the solver but still queries the solver.\n\nThe fix is that of checking whether we replaced the value already and\nget a temporary lattice value for the constant.\n\nThanks to Zhendong Su for the report!\n\nFixes PR35357.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SCCP.cpp\nA | /llvm/trunk/test/Transforms/SCCP/pr35357.ll\n"}, {"commit_id": "319055", "date": "2017-11-27T17:31:16.062585Z", "author": "dergachev", "msg": "[analyzer] pr34404: Fix a crash on modeling pointers to indirect members.\n\nWe were crashing whenever a C++ pointer-to-member was taken, that was pointing\nto a member of an anonymous structure field within a class, eg.\n\n  struct A {\n    struct {\n     int x;\n    };\n  };\n  // ...\n  &A::x;\n\nDifferential Revision: https://reviews.llvm.org/D39800\n", "modified": "M | /cfe/trunk/lib/StaticAnalyzer/Core/ExprEngine.cpp\nM | /cfe/trunk/test/Analysis/pointer-to-member.cpp\n"}, {"commit_id": "319391", "date": "2017-11-30T00:28:23.362357Z", "author": "vedantk", "msg": "[Coverage] Use the most-recent completed region count (PR35437)\n\nThis is a fix for the coverage segment builder.\n\nIf multiple regions must be popped off the active stack at once, and\nmore than one of them end at the same location, emit a segment using the\ncount from the most-recent completed region.\n\nFixes PR35437, rdar://35760630\n\nTesting: invoked llvm-cov on a stage2 build of clang, additional unit\ntests, check-profile", "modified": "M | /llvm/trunk/lib/ProfileData/Coverage/CoverageMapping.cpp\nM | /llvm/trunk/test/tools/llvm-cov/deferred-region.cpp\nM | /llvm/trunk/unittests/ProfileData/CoverageMappingTest.cpp\n"}, {"commit_id": "319605", "date": "2017-12-02T02:48:42.505770Z", "author": "rsmith", "msg": "PR35456: Track definedness of variable template specializations separately from\nwhether they have an initializer.\n\nWe cannot distinguish between a declaration of a variable template\nspecialization and a definition of one that lacks an initializer without this,\nand would previously mistake the latter for the former.\n", "modified": "M | /cfe/trunk/include/clang/AST/DeclTemplate.h\nM | /cfe/trunk/lib/AST/Decl.cpp\nM | /cfe/trunk/lib/AST/DeclTemplate.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/lib/Serialization/ASTReaderDecl.cpp\nM | /cfe/trunk/lib/Serialization/ASTWriterDecl.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx1y-variable-template.cpp\nM | /cfe/trunk/test/CodeGenCXX/dllexport.cpp\n"}, {"commit_id": "319777", "date": "2017-12-05T15:42:47.611885Z", "author": "jina.nahias", "msg": "[x86][AVX512] Lowering kunpack intrinsics to LLVM IR\n\nThis patch, together with a matching llvm patch (https://reviews.llvm.org/D39720), implements the lowering of X86 kunpack intrinsics to IR.\n\nDifferential Revision: https://reviews.llvm.org/D39719\n\nChange-Id: Id5d3cb394ad33b98be79a6783d1d15569e2b798d", "modified": "M | /cfe/trunk/lib/Headers/avx512bwintrin.h\nM | /cfe/trunk/lib/Headers/avx512fintrin.h\nM | /cfe/trunk/test/CodeGen/avx512bw-builtins.c\nM | /cfe/trunk/test/CodeGen/avx512f-builtins.c\n"}, {"commit_id": "319778", "date": "2017-12-05T15:42:56.299405Z", "author": "jina.nahias", "msg": "[x86][AVX512] Lowering kunpack intrinsics to LLVM IR\n\nThis patch, together with a matching clang patch (https://reviews.llvm.org/D39719), implements the lowering of X86 kunpack intrinsics to IR.\n\nDifferential Revision: https://reviews.llvm.org/D39720\n\nChange-Id: I4088d9428478f9457f6afddc90bd3d66b3daf0a1", "modified": "M | /llvm/trunk/include/llvm/IR/IntrinsicsX86.td\nM | /llvm/trunk/lib/IR/AutoUpgrade.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86IntrinsicsInfo.h\nM | /llvm/trunk/test/CodeGen/X86/avx512-intrinsics-fast-isel.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-intrinsics-upgrade.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-intrinsics.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512bw-intrinsics-fast-isel.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512bw-intrinsics-upgrade.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512bw-intrinsics.ll\n"}, {"commit_id": "319911", "date": "2017-12-06T17:54:07.067033Z", "author": "ctopper", "msg": "[X86] Attempt to fix a ubsan failure in the autoupgrade of kunpck intrinsics.", "modified": "M | /llvm/trunk/lib/IR/AutoUpgrade.cpp\n"}, {"commit_id": "319917", "date": "2017-12-06T18:33:07.003193Z", "author": "smeenai", "msg": "[cmake] Remove unnecessary header include in atomics check\n\nThe header include was required to work around PR19898, as noted in that\ncomment. That PR has since been marked resolved fixed, and the\nconfiguration check passes without the header inclusion both when\ncompiling on Windows with cl and when cross-compiling on Linux using\nclang-cl.\n\nI noticed this because the inclusion was cased incorrectly (Intrin.h\ninstead of intrin.h), which when cross-compiling on a case sensitive\nfile system would cause the intrin.h from the Windows SDK to be included\n(which LLVM can't handle) instead of the one from clang's resource\ndirectory, making the check fail. This is the same issue as r309980.\nCorrecting the case of the inclusion makes the check pass when cross\ncompiling, but it seems better to get rid of the inclusion entirely,\nsince it appears to be unnecessary now.\n\nDifferential Revision: https://reviews.llvm.org/D40910", "modified": "M | /llvm/trunk/cmake/modules/CheckAtomic.cmake\n"}, {"commit_id": "319990", "date": "2017-12-07T00:01:15.899890Z", "author": "vedantk", "msg": "[Coverage] Scan ahead for the most-recent completed count (PR35495)\n\nThis extends r319391. It teaches the segment builder to emit the right\ncompleted segment when more than one region ends at the same location.\n\nFixes PR35495.", "modified": "M | /llvm/trunk/lib/ProfileData/Coverage/CoverageMapping.cpp\nM | /llvm/trunk/unittests/ProfileData/CoverageMappingTest.cpp\n"}, {"commit_id": "320355", "date": "2017-12-11T12:13:45.966402Z", "author": "rogfer01", "msg": "[ARM] Use ADDCARRY / SUBCARRY\n\nThis is a preparatory step for D34515.\n\nThis change:\n - makes nodes ISD::ADDCARRY and ISD::SUBCARRY legal for i32\n - lowering is done by first converting the boolean value into the carry flag\n   using (_, C) \u922b?(ARMISD::ADDC R, -1) and converted back to an integer value\n   using (R, _) \u922b?(ARMISD::ADDE 0, 0, C). An ARMISD::ADDE between the two\n   operations does the actual addition.\n - for subtraction, given that ISD::SUBCARRY second result is actually a\n   borrow, we need to invert the value of the second operand and result before\n   and after using ARMISD::SUBE. We need to invert the carry result of\n   ARMISD::SUBE to preserve the semantics.\n - given that the generic combiner may lower ISD::ADDCARRY and\n   ISD::SUBCARRYinto ISD::UADDO and ISD::USUBO we need to update their lowering\n   as well otherwise i64 operations now would require branches. This implies\n   updating the corresponding test for unsigned.\n - add new combiner to remove the redundant conversions from/to carry flags\n   to/from boolean values (ARMISD::ADDC (ARMISD::ADDE 0, 0, C), -1) \u922b?C\n - fixes PR34045\n - fixes PR34564\n - fixes PR35103\n\nDifferential Revision: https://reviews.llvm.org/D35192\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelLowering.h\nM | /llvm/trunk/test/CodeGen/ARM/intrinsics-overflow.ll\nA | /llvm/trunk/test/CodeGen/ARM/pr34045-2.ll\nA | /llvm/trunk/test/CodeGen/ARM/pr34045.ll\nA | /llvm/trunk/test/CodeGen/ARM/pr35103.ll\n"}, {"commit_id": "320411", "date": "2017-12-11T19:44:28.125947Z", "author": "erichkeane", "msg": "PR35586: Relax two asserts that are overly restrictive\n\nThe two asserts are too aggressive.  In C++  mode, an\nenum is NOT considered an integral type, but an enum value\nis allowed to be an enum.  This patch relaxes the two asserts\nto allow the enum value as well (as typechecking does).\n", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/test/SemaCXX/enum-scoped.cpp\n"}, {"commit_id": "320917", "date": "2017-12-16T06:58:30.223014Z", "author": "ctopper", "msg": "[X86] Remove unneeded code for handling the old kunpck intrinsics.", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86IntrinsicsInfo.h\n"}, {"commit_id": "321672", "date": "2018-01-02T20:56:45.161019Z", "author": "spatel", "msg": "[ValueTracking] recognize min/max of min/max patterns\n\nThis is part of solving PR35717:\nhttps://bugs.llvm.org/show_bug.cgi?id=35717\n\nThe larger IR optimization is proposed in D41603, but we can show \nthe improvement in ValueTracking using codegen tests because \nSelectionDAG creates min/max nodes based on ValueTracking. \n\nAny target with min/max ops should show wins here. I chose AArch64\nvector ops because they're clean and uniform.\n\nSome Alive proofs for the tests (can't put more than 2 tests in 1 \npage currently because the web app says it's too long):\nhttps://rise4fun.com/Alive/WRN\nhttps://rise4fun.com/Alive/iPm\nhttps://rise4fun.com/Alive/HmY\nhttps://rise4fun.com/Alive/CNm\nhttps://rise4fun.com/Alive/LYf\n\n", "modified": "M | /llvm/trunk/lib/Analysis/ValueTracking.cpp\nM | /llvm/trunk/test/CodeGen/AArch64/minmax-of-minmax.ll\n"}, {"commit_id": "321702", "date": "2018-01-03T11:13:45.451930Z", "author": "marco", "msg": "Flush gcda files before unlocking them\n\nSummary: Fixes https://bugs.llvm.org/show_bug.cgi?id=35464.\n\nReviewers: zturner, rnk, void\n\nSubscribers: sylvestre.ledru, llvm-commits, #sanitizers\n\nDifferential Revision: https://reviews.llvm.org/D40610", "modified": "M | /compiler-rt/trunk/lib/profile/GCDAProfiling.c\n"}, {"commit_id": "321991", "date": "2018-01-08T13:21:24.451115Z", "author": "sam_parker", "msg": "[DAGCombine] Fix for PR35761\n\nI had falsely assumed that constant operands would be operand(1) of\nthe bin ops that may need their constant operand to be masked.\n\nBugzilla: https://bugs.llvm.org/show_bug.cgi?id=35761\n\nDifferential Revision: https://reviews.llvm.org/D41667\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr35761.ll\n"}, {"commit_id": "322056", "date": "2018-01-09T04:37:06.959891Z", "author": "skatkov", "msg": "[CGP] Fix Complex addressing mode for offset\n\nIf the offset is differ in two addressing mode we can continue only if\nScaleReg is not set due to we will use it as merge of different offsets.\n\nIt should fix PR35799 and PR35805.\n\nReviewers: john.brawn, reames\nReviewed By: reames\nSubscribers: llvm-commits\nDifferential Revision: https://reviews.llvm.org/D41227\n\n", "modified": "M | /llvm/trunk/lib/CodeGen/CodeGenPrepare.cpp\nA | /llvm/trunk/test/Transforms/CodeGenPrepare/X86/sink-addrmode-select.ll\n"}, {"commit_id": "322461", "date": "2018-01-14T19:23:50.115291Z", "author": "ctopper", "msg": "[X86] Implement old kunpck intrinsics using vector ops on vXi1 instead of integer shift/and/or\n\nSummary:\nkunpck intrinsics were removed in favor of native IR a few months ago. The implementation lowers them as by operation on the integer types passed to the intrinsic and then just shifting, masking, and oring them together. A special X86 DAG combine was added to recognize this patter and turn it into a concat_vector operation.\n\nI think it makes more sense to keep the IR implementation closer to vector operations on vXi1. Given that we expect these builtins to be used around other builtins that operate on k-registers which we try to represent in IR with vXi1. InstCombine should be able to get rid of the bitcasts between integers and vXi1 leaving only the vector operations.\n\nReviewers: RKSimon, spatel, zvi, jina.nahias\n\nReviewed By: RKSimon\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D42016", "modified": "M | /cfe/trunk/lib/CodeGen/CGBuiltin.cpp\nM | /cfe/trunk/lib/Headers/avx512bwintrin.h\nM | /cfe/trunk/lib/Headers/avx512fintrin.h\nM | /cfe/trunk/test/CodeGen/avx512bw-builtins.c\nM | /cfe/trunk/test/CodeGen/avx512f-builtins.c\n"}, {"commit_id": "323320", "date": "2018-01-24T11:41:09.495472Z", "author": "rksimon", "msg": "[X86][SSE] Avoid calls to combineX86ShufflesRecursively that can't combine to target shuffles (PR32037)\n\nDon't bother making recursive calls to combineX86ShufflesRecursively if we have more shuffle source operands than will be combined together with the remaining recursive depth.\n\nSee https://bugs.llvm.org/show_bug.cgi?id=32037#c26 and https://bugs.llvm.org/show_bug.cgi?id=32037#c27 for the reduction in compile times from this patch.\n\nDifferential Revision: https://reviews.llvm.org/D42378", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\n"}, {"commit_id": "323331", "date": "2018-01-24T15:20:37.705758Z", "author": "spatel", "msg": "[ValueTracking] add recursion depth param to matchSelectPattern \n\nWe're getting bug reports:\nhttps://bugs.llvm.org/show_bug.cgi?id=35807\nhttps://bugs.llvm.org/show_bug.cgi?id=35840\nhttps://bugs.llvm.org/show_bug.cgi?id=36045\n...where we blow up the stack in value tracking because other passes are sending \nin selects that have an operand that is itself the select.\n\nWe don't currently have a reliable way to avoid analyzing dead code that may take \nnon-standard forms, so bail out when things go too far.\n\nThis mimics the recursion depth limitations in other parts of value tracking.\n\nUnfortunately, this pushes the underlying problems for other passes (jump-threading,\nsimplifycfg, correlated-propagation) into hiding. If someone wants to uncover those\nagain, the first draft of this patch on Phab would do that (it would assert rather\nthan bail out).\n\nDifferential Revision: https://reviews.llvm.org/D42442\n", "modified": "M | /llvm/trunk/include/llvm/Analysis/ValueTracking.h\nM | /llvm/trunk/lib/Analysis/ValueTracking.cpp\nA | /llvm/trunk/test/Analysis/ValueTracking/select-pattern.ll\n"}, {"commit_id": "324359", "date": "2018-02-06T16:14:29.292035Z", "author": "niravd", "msg": "[DAG, X86] Improve Dependency analysis when doing multi-node\nInstruction Selection\n\nCleanup cycle/validity checks in ISel (IsLegalToFold,\nHandleMergeInputChains) and X86 (isFusableLoadOpStore). Now do a full\nsearch for cycles / dependencies pruning the search when topological\nproperty of NodeId allows.\n\nAs part of this propogate the NodeId-based cutoffs to narrow\nhasPreprocessorHelper searches.\n\nReviewers: craig.topper, bogner\n\nSubscribers: llvm-commits, hiraditya\n\nDifferential Revision: https://reviews.llvm.org/D41293", "modified": "M | /llvm/trunk/include/llvm/CodeGen/SelectionDAGNodes.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelDAGToDAG.cpp\nM | /llvm/trunk/test/CodeGen/X86/avg.ll\nM | /llvm/trunk/test/CodeGen/X86/avx-vbroadcastf128.ll\nM | /llvm/trunk/test/CodeGen/X86/avx2-vbroadcast.ll\nM | /llvm/trunk/test/CodeGen/X86/avx2-vbroadcasti128.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-vbroadcasti128.ll\nA | /llvm/trunk/test/CodeGen/X86/foldmem_cycle.ll\nM | /llvm/trunk/test/CodeGen/X86/i256-add.ll\nA | /llvm/trunk/test/CodeGen/X86/load-op-store-fusion.ll\nM | /llvm/trunk/test/CodeGen/X86/masked_memop.ll\nM | /llvm/trunk/test/CodeGen/X86/merge-consecutive-stores.ll\nM | /llvm/trunk/test/CodeGen/X86/nontemporal.ll\nM | /llvm/trunk/test/CodeGen/X86/store_op_load_fold2.ll\nM | /llvm/trunk/test/CodeGen/X86/subvector-broadcast.ll\nM | /llvm/trunk/test/CodeGen/X86/var-permute-256.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-variable-256.ll\n"}, {"commit_id": "324572", "date": "2018-02-08T07:16:29.807680Z", "author": "skatkov", "msg": "[SimplifyCFG] Re-apply Relax restriction for folding unconditional branches\n\nThe commit rL308422 introduces a restriction for folding unconditional\nbranches. Specifically if empty block with unconditional branch leads to\nheader of the loop then elimination of this basic block is prohibited.\nHowever it seems this condition is redundantly strict.\nIf elimination of this basic block does not introduce more back edges\nthen we can eliminate this block.\n\nThe patch implements this relax of restriction.\n\nThe test profile/Linux/counter_promo_nest.c in compiler-rt project\nis updated to meet this change.\n\nReviewers: efriedma, mcrosier, pacxx, hsung, davidxl\t\nReviewed By: pacxx\nSubscribers: llvm-commits\nDifferential Revision: https://reviews.llvm.org/D42691\n", "modified": "M | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nM | /llvm/trunk/test/Transforms/LoopUnroll/peel-loop.ll\nM | /llvm/trunk/test/Transforms/LoopUnswitch/2015-06-17-Metadata.ll\nM | /llvm/trunk/test/Transforms/LoopUnswitch/infinite-loop.ll\nA | /llvm/trunk/test/Transforms/SimplifyCFG/UncondBranchToHeader.ll\n"}, {"commit_id": "324646", "date": "2018-02-08T20:16:06.879704Z", "author": "ctopper", "msg": "[X86] Remove kortest intrinsics and replace with native IR.", "modified": "M | /llvm/trunk/include/llvm/IR/IntrinsicsX86.td\nM | /llvm/trunk/lib/IR/AutoUpgrade.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/avx512-intrinsics-fast-isel.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-intrinsics-upgrade.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-intrinsics.ll\n"}, {"commit_id": "324647", "date": "2018-02-08T20:16:17.858554Z", "author": "ctopper", "msg": "[X86] Replace kortest intrinsics with native IR.", "modified": "M | /cfe/trunk/lib/CodeGen/CGBuiltin.cpp\nM | /cfe/trunk/test/CodeGen/avx512f-builtins.c\n"}, {"commit_id": "324907", "date": "2018-02-12T17:01:41.495436Z", "author": "erichkeane", "msg": "Make attribute-target on a Definition-after-use update the LLVM attributes\n\nAs reported here: https://bugs.llvm.org/show_bug.cgi?id=36301\nThe issue is that the 'use' causes the plain declaration to emit\nthe attributes to LLVM-IR. However, if the definition added it\nlater, these would silently disappear.\n\nThis commit extracts that logic to its own function in CodeGenModule,\nand has the attribute-applications done during 'definition' update\nthe attributes properly.\n\nDifferential Revision: https://reviews.llvm.org/D43095\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenModule.h\nM | /cfe/trunk/test/CodeGen/attr-target-x86.c\n"}, {"commit_id": "325039", "date": "2018-02-13T18:48:27.654088Z", "author": "spatel", "msg": "[InstCombine] fix test comment and add vector test; NFC\n", "modified": "M | /llvm/trunk/test/Transforms/InstCombine/mul.ll\n"}, {"commit_id": "325420", "date": "2018-02-17T02:26:25.775001Z", "author": "chandlerc", "msg": "[DAG, X86] Revert r324797, r324491, and r324359.\n\nSadly, r324359 caused at least PR36312. There is a patch out for review\nbut it seems to be taking a bit and we've already had these crashers in\ntree for too long. We're hitting this PR in real code now and are\nblocked on shipping new compilers as a consequence so I'm reverting us\nback to green.\n\nSorry for the churn due to the stacked changes that I had to revert. =/", "modified": "M | /llvm/trunk/include/llvm/CodeGen/SelectionDAGNodes.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelDAGToDAG.cpp\nM | /llvm/trunk/test/CodeGen/X86/avg.ll\nM | /llvm/trunk/test/CodeGen/X86/avx-vbroadcastf128.ll\nM | /llvm/trunk/test/CodeGen/X86/avx2-vbroadcast.ll\nM | /llvm/trunk/test/CodeGen/X86/avx2-vbroadcasti128.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-vbroadcasti128.ll\nD | /llvm/trunk/test/CodeGen/X86/foldmem_cycle.ll\nM | /llvm/trunk/test/CodeGen/X86/i256-add.ll\nD | /llvm/trunk/test/CodeGen/X86/load-op-store-fusion.ll\nM | /llvm/trunk/test/CodeGen/X86/masked_memop.ll\nM | /llvm/trunk/test/CodeGen/X86/merge-consecutive-stores.ll\nM | /llvm/trunk/test/CodeGen/X86/nontemporal.ll\nM | /llvm/trunk/test/CodeGen/X86/store_op_load_fold2.ll\nM | /llvm/trunk/test/CodeGen/X86/subvector-broadcast.ll\nM | /llvm/trunk/test/CodeGen/X86/var-permute-256.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-variable-256.ll\n"}, {"commit_id": "325820", "date": "2018-02-22T19:09:07.855535Z", "author": "pcc", "msg": "Fix DataFlowSanitizer instrumentation pass to take parameter position changes into account for custom functions.\n\nWhen DataFlowSanitizer transforms a call to a custom function, the\nnew call has extra parameters. The attributes on parameters must be\nupdated to take the new position of each parameter into account.\n\nPatch by Sam Kerner!\n\nDifferential Revision: https://reviews.llvm.org/D43132", "modified": "M | /llvm/trunk/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp\nA | /llvm/trunk/test/Instrumentation/DataFlowSanitizer/custom_fun_callback_attributes.ll\nA | /llvm/trunk/test/Instrumentation/DataFlowSanitizer/custom_fun_varargs_attributes.ll\n"}, {"commit_id": "326404", "date": "2018-03-01T01:19:18.002217Z", "author": "rnk", "msg": "[IPSCCP] do not break musttail invariant (PR36485)\n\nDo not replace results of `musttail` calls with a constant if the\ncall itself can't be removed.\n\nDo not zap returns of `musttail` callees, if the call site can't be\nremoved and replaced with a constant.\n\nDo not zap returns of `musttail`-calling blocks, this breaks\ninvariant too.\n\nPatch by Fedor Indutny\n\nDifferential Revision: https://reviews.llvm.org/D43695", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/SCCP.cpp\nA | /llvm/trunk/test/Transforms/IPConstantProp/musttail-call.ll\n"}, {"commit_id": "326602", "date": "2018-03-02T19:03:22.751588Z", "author": "jdenny", "msg": "[Attr] Fix parameter indexing for several attributes\n\nThe patch fixes a number of bugs related to parameter indexing in\nattributes:\n\n* Parameter indices in some attributes (argument_with_type_tag,\n  pointer_with_type_tag, nonnull, ownership_takes, ownership_holds,\n  and ownership_returns) are specified in source as one-origin\n  including any C++ implicit this parameter, were stored as\n  zero-origin excluding any this parameter, and were erroneously\n  printing (-ast-print) and confusingly dumping (-ast-dump) as the\n  stored values.\n\n* For alloc_size, the C++ implicit this parameter was not subtracted\n  correctly in Sema, leading to assert failures or to silent failures\n  of __builtin_object_size to compute a value.\n\n* For argument_with_type_tag, pointer_with_type_tag, and\n  ownership_returns, the C++ implicit this parameter was not added\n  back to parameter indices in some diagnostics.\n\nThis patch fixes the above bugs and aims to prevent similar bugs in\nthe future by introducing careful mechanisms for handling parameter\nindices in attributes.  ParamIdx stores a parameter index and is\ndesigned to hide the stored encoding while providing accessors that\nrequire each use (such as printing) to make explicit the encoding that\nis needed.  Attribute declarations declare parameter index arguments\nas [Variadic]ParamIdxArgument, which are exposed as ParamIdx[*].  This\npatch rewrites all attribute arguments that are processed by\ncheckFunctionOrMethodParameterIndex in SemaDeclAttr.cpp to be declared\nas [Variadic]ParamIdxArgument.  The only exception is xray_log_args's\nargument, which is encoded as a count not an index.\n\nDifferential Revision: https://reviews.llvm.org/D43248", "modified": "M | /cfe/trunk/include/clang/AST/Attr.h\nM | /cfe/trunk/include/clang/Basic/Attr.td\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/lib/Sema/SemaChecking.cpp\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclAttr.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Checkers/MallocChecker.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Checkers/NonNullParamChecker.cpp\nM | /cfe/trunk/test/CodeGenCXX/alloc-size.cpp\nM | /cfe/trunk/test/Misc/ast-dump-attr.cpp\nA | /cfe/trunk/test/Sema/attr-ownership.cpp\nM | /cfe/trunk/test/Sema/attr-print.cpp\nM | /cfe/trunk/test/Sema/error-type-safety.cpp\nM | /cfe/trunk/utils/TableGen/ClangAttrEmitter.cpp\n"}, {"commit_id": "326862", "date": "2018-03-07T02:22:41.788719Z", "author": "nico", "msg": "Revert r326602, it caused PR36620.", "modified": "M | /cfe/trunk/include/clang/AST/Attr.h\nM | /cfe/trunk/include/clang/Basic/Attr.td\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/lib/Sema/SemaChecking.cpp\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclAttr.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Checkers/MallocChecker.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Checkers/NonNullParamChecker.cpp\nM | /cfe/trunk/test/CodeGenCXX/alloc-size.cpp\nM | /cfe/trunk/test/Misc/ast-dump-attr.cpp\nD | /cfe/trunk/test/Sema/attr-ownership.cpp\nM | /cfe/trunk/test/Sema/attr-print.cpp\nM | /cfe/trunk/test/Sema/error-type-safety.cpp\nM | /cfe/trunk/utils/TableGen/ClangAttrEmitter.cpp\n"}, {"commit_id": "326883", "date": "2018-03-07T09:16:10.816266Z", "author": "kamil", "msg": "Don't intercept mmap64() on NetBSD\n\nDisable SANITIZER_INTERCEPT_MMAP64 for SI_NETBSD.\n\nNetBSD switched to 64-bit offsets almost 30 years ago on 32-bit platforms\nand never needed mmap64() concept.\n", "modified": "M | /compiler-rt/trunk/lib/sanitizer_common/sanitizer_platform_interceptors.h\n"}, {"commit_id": "326926", "date": "2018-03-07T18:55:10.021558Z", "author": "rnk", "msg": "Push a function scope when parsing function bodies without a declaration\n\nSummary:\nThis is PR36536.\n\nThere are a few ways to reach Sema::ActOnStartOfFunctionDef with a null\nDecl. Currently, the parser continues on to attempt to parse the\nstatements in the function body without pushing a function scope or\ndeclaration context. However, lots of statement parsing logic relies on\ngetCurFunction() returning something reasonable. It turns out that\ngetCurFunction() will never return null today because of an optimization\nwhere Sema pre-allocates one FunctionScopeInfo and reuses it when\npossible. This goes wrong when something inside the function body causes\nus to push another function scope, such as requiring an implicit\ndefinition of a special member function. Reusing the state clears it\nout, which will lead to bugs. In PR36536, we found that the SwitchStack\ngets unbalanced, because we push a switch, clear out the stack, and then\ntry to pop a switch that isn't there.\n\nAs a follow-up, I plan to move the pre-allocated FunctionScopeInfo out\nof the FunctionScopes stack. This means the FunctionScopes stack will\noften be empty, and callers of getCurFunction() will need to check for\nnull.\n\nReviewers: thakis\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D43980", "modified": "M | /cfe/trunk/lib/Sema/SemaDecl.cpp\nA | /cfe/trunk/test/SemaCXX/pr36536.cpp\n"}, {"commit_id": "326965", "date": "2018-03-08T00:14:34.610056Z", "author": "rnk", "msg": "[Sema] Make getCurFunction() return null outside function parsing\n\nSummary:\nBefore this patch, Sema pre-allocated a FunctionScopeInfo and kept it in\nthe first, always present element of the FunctionScopes stack. This\nmeant that Sema::getCurFunction would return a pointer to this\npre-allocated object when parsing code outside a function body. This is\npretty much always a bug, so this patch moves the pre-allocated object\ninto a separate unique_ptr. This should make bugs like PR36536 a lot\nmore obvious.\n\nAs you can see from this patch, there were a number of places that\nunconditionally assumed they were always called inside a function.\nHowever, there are also many places that null checked the result of\ngetCurFunction(), so I think this is a reasonable direction.\n\nReviewers: rsmith\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D44039", "modified": "M | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Sema/AnalysisBasedWarnings.cpp\nM | /cfe/trunk/lib/Sema/Sema.cpp\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaOpenMP.cpp\nM | /cfe/trunk/lib/Sema/SemaStmt.cpp\nM | /cfe/trunk/lib/Sema/SemaStmtAsm.cpp\n"}, {"commit_id": "327109", "date": "2018-03-09T10:31:31.945352Z", "author": "rengolin", "msg": "[LV] Fix vectorizer's isUniform() abuse triggers assert in SCEV\n\nFixes PR36311.\n\nSee more detailed analysis in\nhttps://bugs.llvm.org/show_bug.cgi?id=36311.\n\nisUniform() information is recomputed after LV started transforming the\nunderlying IR and that triggered an assert in SCEV.\n\nFrom vectorizer's architectural perspective, such information, while\nstill useful in vector code gen, should not be recomputed after the\nstart of transforming the LLVM IR. Instead, we should collect and cache\nsuch information during the analysis phase of LV and use the cached info\nduring code gen.\n\nFrom the symptom perspective, this assert as it stands right now is not\nvery useful. Legality already rejected loops that would trigger the\nassert. As such, commenting out the assert is NFC from vectorizer's\nfunctionality perspective. On top of that, just above the assertion, we\ncheck for unit-strided load/store or\ngather scatter. Addresses can't be uniform below that check.\n\nFrom vectorization theory point of view, we don't have to reject all\ncases of stores to uniform addresses. Eventually, we should support\nsafe/profitable cases.\n\nThis patch resolves the issue by removing the useless assertion that is\ninvoking LAA's isUniform() that requires up-to-date DomTree ---- once\nvector code gen starts modifying CFG, we don't have an up-to-date\nDomTree.\n\nPatch by Hideki Saito <hideki.saito@intel.com>.", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\n"}, {"commit_id": "327170", "date": "2018-03-09T20:57:15.939480Z", "author": "niravd", "msg": "[DAG] Enforce stricter NodeId invariant during Instruction selection\n\nInstruction Selection makes use of the topological ordering of nodes\nby node id (a node's operands have smaller node id than it) when doing\ncycle detection.  During selection we may violate this property as a\nselection of multiple nodes may induce a use dependence (and thus a\nnode id restriction) between two unrelated nodes. If a selected node\nhas an unselected successor this may allow us to miss a cycle in\ndetection an invalid selection.\n\nThis patch fixes this by marking all unselected successors of a\nselected node have negated node id.  We avoid pruning on such negative\nids but still can reconstruct the original id for pruning.\n\nIn-tree targets have been updated to replace DAG-level replacements\nwith ISel-level ones which enforce this property.\n\nThis preemptively fixes PR36312 before triggering commit r324359 relands\n\nReviewers: craig.topper, bogner, jyknight\n\nSubscribers: arsenm, nhaehnle, javed.absar, llvm-commits, hiraditya\n\nDifferential Revision: https://reviews.llvm.org/D43198", "modified": "M | /llvm/trunk/include/llvm/CodeGen/SelectionDAGISel.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp\nM | /llvm/trunk/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp\nM | /llvm/trunk/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelDAGToDAG.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr36312.ll\n"}, {"commit_id": "327405", "date": "2018-03-13T14:51:22.832943Z", "author": "jdenny", "msg": "Reland \"[Attr] Fix parameter indexing for several attributes\"\n\nRelands r326602 (reverted in r326862) with new test and fix for\nPR36620.\n\nDifferential Revision: https://reviews.llvm.org/D43248", "modified": "M | /cfe/trunk/include/clang/AST/Attr.h\nM | /cfe/trunk/include/clang/Basic/Attr.td\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/lib/Sema/SemaChecking.cpp\nM | /cfe/trunk/lib/Sema/SemaDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclAttr.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Checkers/MallocChecker.cpp\nM | /cfe/trunk/lib/StaticAnalyzer/Checkers/NonNullParamChecker.cpp\nM | /cfe/trunk/test/CodeGenCXX/alloc-size.cpp\nA | /cfe/trunk/test/Frontend/ast-attr.cpp\nM | /cfe/trunk/test/Misc/ast-dump-attr.cpp\nA | /cfe/trunk/test/Sema/attr-ownership.cpp\nM | /cfe/trunk/test/Sema/attr-print.cpp\nM | /cfe/trunk/test/Sema/error-type-safety.cpp\nM | /cfe/trunk/utils/TableGen/ClangAttrEmitter.cpp\n"}, {"commit_id": "327490", "date": "2018-03-14T10:08:21.254784Z", "author": "labath", "msg": "[cmake] Fix standalone+LLVM_LINK_LLVM_DYLIB builds (pr36687)\n\nSummary:\nTo make this build work, I needed to add detection code for the pthread\nlibrary. This is necessary, because we have direct calls to these\nlibraries (instead of going through llvm) and in the standalone build we\ncannot rely on llvm to detect these for us. In a standalone non-dylib\nbuild this was accidentaly working because these libraries were pulled\nin as an interface dependency of the .a files, but in a dylib build\nthese are no longer part of the link interface, and so we need to add\nthem explicitly.\n\nReviewers: krytarowski, zturner\n\nSubscribers: lldb-commits, mgorny\n\nDifferential Revision: https://reviews.llvm.org/D44379", "modified": "M | /lldb/trunk/cmake/modules/LLDBConfig.cmake\n"}, {"commit_id": "327898", "date": "2018-03-19T20:19:46.205036Z", "author": "niravd", "msg": "[DAG, X86] Revert r327197 \"Revert r327170, r327171, r327172\"\n\nReland ISel cycle checking improvements after simplifying node id\ninvariant traversal and correcting typo.", "modified": "M | /llvm/trunk/include/llvm/CodeGen/SelectionDAGISel.h\nM | /llvm/trunk/include/llvm/CodeGen/SelectionDAGNodes.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp\nM | /llvm/trunk/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/ARM/ARMISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp\nM | /llvm/trunk/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelDAGToDAG.cpp\nM | /llvm/trunk/test/CodeGen/X86/avg.ll\nM | /llvm/trunk/test/CodeGen/X86/avx-vbroadcastf128.ll\nM | /llvm/trunk/test/CodeGen/X86/avx2-vbroadcast.ll\nM | /llvm/trunk/test/CodeGen/X86/avx2-vbroadcasti128.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-vbroadcasti128.ll\nM | /llvm/trunk/test/CodeGen/X86/i256-add.ll\nM | /llvm/trunk/test/CodeGen/X86/masked_memop.ll\nM | /llvm/trunk/test/CodeGen/X86/merge-consecutive-stores.ll\nM | /llvm/trunk/test/CodeGen/X86/nontemporal.ll\nA | /llvm/trunk/test/CodeGen/X86/pr36274.ll\nA | /llvm/trunk/test/CodeGen/X86/pr36312.ll\nM | /llvm/trunk/test/CodeGen/X86/required-vector-width.ll\nM | /llvm/trunk/test/CodeGen/X86/store_op_load_fold2.ll\nM | /llvm/trunk/test/CodeGen/X86/subvector-broadcast.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-variable-256.ll\n"}, {"commit_id": "329414", "date": "2018-04-06T16:16:43.914419Z", "author": "ctopper", "msg": "[X86] Merge itineraries for CLC, CMC, and STC.\n\nThese are very simple flag setting instructions that appear to only be a single uop. They're unlikely to need this separation.", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrInfo.td\nM | /llvm/trunk/lib/Target/X86/X86Schedule.td\nM | /llvm/trunk/lib/Target/X86/X86ScheduleAtom.td\n"}, {"commit_id": "330264", "date": "2018-04-18T15:13:16.217830Z", "author": "chandlerc", "msg": "[x86] Fix PR37100 by teaching the EFLAGS copy lowering to rewrite uses\nacross basic blocks in the limited cases where it is very straight\nforward to do so.\n\nThis will also be useful for other places where we do some limited\nEFLAGS propagation across CFG edges and need to handle copy rewrites\nafterward. I think this is rapidly approaching the maximum we can and\nshould be doing here. Everything else begins to require either heroic\nanalysis to prove how to do PHI insertion manually, or somehow managing\narbitrary PHI-ing of EFLAGS with general PHI insertion. Neither of these\nseem at all promising so if those cases come up, we'll almost certainly\nneed to rewrite the parts of LLVM that produce those patterns.\n\nWe do now require dominator trees in order to reliably diagnose patterns\nthat would require PHI nodes. This is a bit unfortunate but it seems\nbetter than the completely mysterious crash we would get otherwise.\n\nDifferential Revision: https://reviews.llvm.org/D45673", "modified": "M | /llvm/trunk/lib/Target/X86/X86FlagsCopyLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/O0-pipeline.ll\nM | /llvm/trunk/test/CodeGen/X86/O3-pipeline.ll\nM | /llvm/trunk/test/CodeGen/X86/copy-eflags.ll\n"}, {"commit_id": "330301", "date": "2018-04-18T23:04:09.358964Z", "author": "inglorion", "msg": "Fix data race in X86FloatingPoint.cpp ASSERT_SORTED\n\nSummary:\nASSERT_SORTED checks if a table is sorted, and uses a boolean to\nprevent the check from being run again if it was earlier determined\nthat the table is in fact sorted. Unsynchronized reads and writes of\nthat boolean triggered ThreadSanitizer's data race detection. This\nchange rewrites the code to use std::atomic<bool> instead.\n\nFixes PR36922.\n\nReviewers: rnk\n\nReviewed By: rnk\n\nSubscribers: llvm-commits, hiraditya\n\nDifferential Revision: https://reviews.llvm.org/D45742", "modified": "M | /llvm/trunk/lib/Target/X86/X86FloatingPoint.cpp\n"}, {"commit_id": "330706", "date": "2018-04-24T10:32:08.552960Z", "author": "petarj", "msg": "Correct dwarf unwind information in function epilogue\n\nThis patch aims to provide correct dwarf unwind information in function\nepilogue for X86.\nIt consists of two parts. The first part inserts CFI instructions that set\nappropriate cfa offset and cfa register in emitEpilogue() in\nX86FrameLowering. This part is X86 specific.\n\nThe second part is platform independent and ensures that:\n\n* CFI instructions do not affect code generation (they are not counted as\n  instructions when tail duplicating or tail merging)\n* Unwind information remains correct when a function is modified by\n  different passes. This is done in a late pass by analyzing information\n  about cfa offset and cfa register in BBs and inserting additional CFI\n  directives where necessary.\n\nAdded CFIInstrInserter pass:\n\n* analyzes each basic block to determine cfa offset and register are valid\n  at its entry and exit\n* verifies that outgoing cfa offset and register of predecessor blocks match\n  incoming values of their successors\n* inserts additional CFI directives at basic block beginning to correct the\n  rule for calculating CFA\n\nHaving CFI instructions in function epilogue can cause incorrect CFA\ncalculation rule for some basic blocks. This can happen if, due to basic\nblock reordering, or the existence of multiple epilogue blocks, some of the\nblocks have wrong cfa offset and register values set by the epilogue block\nabove them.\nCFIInstrInserter is currently run only on X86, but can be used by any target\nthat implements support for adding CFI instructions in epilogue.\n\nPatch by Violeta Vukobrat.\n\nDifferential Revision: https://reviews.llvm.org/D42848\n", "modified": "M | /llvm/trunk/include/llvm/CodeGen/Passes.h\nM | /llvm/trunk/include/llvm/CodeGen/TargetFrameLowering.h\nM | /llvm/trunk/include/llvm/InitializePasses.h\nM | /llvm/trunk/lib/CodeGen/BranchFolding.cpp\nA | /llvm/trunk/lib/CodeGen/CFIInstrInserter.cpp\nM | /llvm/trunk/lib/CodeGen/CMakeLists.txt\nM | /llvm/trunk/lib/CodeGen/CodeGen.cpp\nM | /llvm/trunk/lib/CodeGen/TargetFrameLoweringImpl.cpp\nM | /llvm/trunk/lib/Target/X86/X86FrameLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86FrameLowering.h\nM | /llvm/trunk/lib/Target/X86/X86TargetMachine.cpp\nM | /llvm/trunk/test/CodeGen/AArch64/taildup-cfi.ll\nM | /llvm/trunk/test/CodeGen/X86/2009-03-16-PHIElimInLPad.ll\nM | /llvm/trunk/test/CodeGen/X86/2011-10-19-widen_vselect.ll\nM | /llvm/trunk/test/CodeGen/X86/GlobalISel/brcond.ll\nM | /llvm/trunk/test/CodeGen/X86/GlobalISel/callingconv.ll\nM | /llvm/trunk/test/CodeGen/X86/GlobalISel/frameIndex.ll\nM | /llvm/trunk/test/CodeGen/X86/O0-pipeline.ll\nM | /llvm/trunk/test/CodeGen/X86/O3-pipeline.ll\nM | /llvm/trunk/test/CodeGen/X86/TruncAssertZext.ll\nM | /llvm/trunk/test/CodeGen/X86/avoid-sfb.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-intrinsics-fast-isel.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-regcall-Mask.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-regcall-NoMask.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-schedule.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-select.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-vbroadcast.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512bw-intrinsics-fast-isel.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512bw-intrinsics-upgrade.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512vl-vbroadcast.ll\nM | /llvm/trunk/test/CodeGen/X86/bool-vector.ll\nA | /llvm/trunk/test/CodeGen/X86/cfi-inserter-check-order.ll\nM | /llvm/trunk/test/CodeGen/X86/cmp.ll\nM | /llvm/trunk/test/CodeGen/X86/cmpxchg-i128-i1.ll\nM | /llvm/trunk/test/CodeGen/X86/emutls-pie.ll\nM | /llvm/trunk/test/CodeGen/X86/emutls.ll\nA | /llvm/trunk/test/CodeGen/X86/epilogue-cfi-fp.ll\nA | /llvm/trunk/test/CodeGen/X86/epilogue-cfi-no-fp.ll\nM | /llvm/trunk/test/CodeGen/X86/fast-isel-int-float-conversion.ll\nM | /llvm/trunk/test/CodeGen/X86/fast-isel-store.ll\nM | /llvm/trunk/test/CodeGen/X86/fmaxnum.ll\nM | /llvm/trunk/test/CodeGen/X86/fminnum.ll\nM | /llvm/trunk/test/CodeGen/X86/fp-arith.ll\nM | /llvm/trunk/test/CodeGen/X86/frame-lowering-debug-intrinsic-2.ll\nM | /llvm/trunk/test/CodeGen/X86/frame-lowering-debug-intrinsic.ll\nM | /llvm/trunk/test/CodeGen/X86/h-registers-1.ll\nM | /llvm/trunk/test/CodeGen/X86/haddsub-2.ll\nM | /llvm/trunk/test/CodeGen/X86/hipe-cc64.ll\nM | /llvm/trunk/test/CodeGen/X86/illegal-bitfield-loadstore.ll\nM | /llvm/trunk/test/CodeGen/X86/imul.ll\nM | /llvm/trunk/test/CodeGen/X86/lea-opt-cse1.ll\nM | /llvm/trunk/test/CodeGen/X86/lea-opt-cse2.ll\nM | /llvm/trunk/test/CodeGen/X86/lea-opt-cse3.ll\nM | /llvm/trunk/test/CodeGen/X86/lea-opt-cse4.ll\nM | /llvm/trunk/test/CodeGen/X86/legalize-shift-64.ll\nM | /llvm/trunk/test/CodeGen/X86/legalize-shl-vec.ll\nM | /llvm/trunk/test/CodeGen/X86/live-out-reg-info.ll\nM | /llvm/trunk/test/CodeGen/X86/load-combine.ll\nM | /llvm/trunk/test/CodeGen/X86/masked_gather_scatter.ll\nM | /llvm/trunk/test/CodeGen/X86/memset-nonzero.ll\nM | /llvm/trunk/test/CodeGen/X86/merge-consecutive-loads-128.ll\nA | /llvm/trunk/test/CodeGen/X86/merge-sp-updates-cfi.ll\nM | /llvm/trunk/test/CodeGen/X86/mmx-arith.ll\nM | /llvm/trunk/test/CodeGen/X86/movtopush.ll\nM | /llvm/trunk/test/CodeGen/X86/mul-constant-result.ll\nM | /llvm/trunk/test/CodeGen/X86/mul-i256.ll\nM | /llvm/trunk/test/CodeGen/X86/mul128.ll\nM | /llvm/trunk/test/CodeGen/X86/musttail-varargs.ll\nM | /llvm/trunk/test/CodeGen/X86/pr21792.ll\nM | /llvm/trunk/test/CodeGen/X86/pr29061.ll\nM | /llvm/trunk/test/CodeGen/X86/pr29112.ll\nM | /llvm/trunk/test/CodeGen/X86/pr30430.ll\nM | /llvm/trunk/test/CodeGen/X86/pr32241.ll\nM | /llvm/trunk/test/CodeGen/X86/pr32256.ll\nM | /llvm/trunk/test/CodeGen/X86/pr32282.ll\nM | /llvm/trunk/test/CodeGen/X86/pr32284.ll\nM | /llvm/trunk/test/CodeGen/X86/pr32329.ll\nM | /llvm/trunk/test/CodeGen/X86/pr32345.ll\nM | /llvm/trunk/test/CodeGen/X86/pr32451.ll\nM | /llvm/trunk/test/CodeGen/X86/pr34088.ll\nM | /llvm/trunk/test/CodeGen/X86/pr34592.ll\nM | /llvm/trunk/test/CodeGen/X86/pr34653.ll\nM | /llvm/trunk/test/CodeGen/X86/pr9743.ll\nM | /llvm/trunk/test/CodeGen/X86/push-cfi-debug.ll\nM | /llvm/trunk/test/CodeGen/X86/push-cfi-obj.ll\nM | /llvm/trunk/test/CodeGen/X86/push-cfi.ll\nM | /llvm/trunk/test/CodeGen/X86/rdtsc.ll\nM | /llvm/trunk/test/CodeGen/X86/return-ext.ll\nM | /llvm/trunk/test/CodeGen/X86/rtm.ll\nM | /llvm/trunk/test/CodeGen/X86/schedule-x86_32.ll\nM | /llvm/trunk/test/CodeGen/X86/select-mmx.ll\nM | /llvm/trunk/test/CodeGen/X86/setcc-lowering.ll\nM | /llvm/trunk/test/CodeGen/X86/shrink_vmul.ll\nM | /llvm/trunk/test/CodeGen/X86/stack-probe-red-zone.ll\nM | /llvm/trunk/test/CodeGen/X86/statepoint-call-lowering.ll\nM | /llvm/trunk/test/CodeGen/X86/statepoint-gctransition-call-lowering.ll\nM | /llvm/trunk/test/CodeGen/X86/statepoint-invoke.ll\nM | /llvm/trunk/test/CodeGen/X86/statepoint-vector.ll\nM | /llvm/trunk/test/CodeGen/X86/swift-return.ll\nM | /llvm/trunk/test/CodeGen/X86/test-shrink-bug.ll\nM | /llvm/trunk/test/CodeGen/X86/test-vs-bittest.ll\nA | /llvm/trunk/test/CodeGen/X86/throws-cfi-fp.ll\nA | /llvm/trunk/test/CodeGen/X86/throws-cfi-no-fp.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-arith-sat.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-sext.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-avx512.ll\nM | /llvm/trunk/test/CodeGen/X86/wide-integer-cmp.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-64-psub.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-framelowering-trap.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-interleaved-access.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-no_caller_saved_registers-preserve.ll\n"}, {"commit_id": "330954", "date": "2018-04-26T16:11:19.002465Z", "author": "msearles", "msg": "[AMDGPU][Waitcnt] As of gfx7, VMEM operations do not increment the export counter and the input registers are available in the next instruction; update the waitcnt pass to take this into account.\n\nDifferential Revision: https://reviews.llvm.org/D46067", "modified": "M | /llvm/trunk/lib/Target/AMDGPU/AMDGPUSubtarget.h\nM | /llvm/trunk/lib/Target/AMDGPU/SIInsertWaitcnts.cpp\nM | /llvm/trunk/test/CodeGen/AMDGPU/insert_vector_elt.ll\nM | /llvm/trunk/test/CodeGen/AMDGPU/llvm.amdgcn.buffer.store.format.ll\nM | /llvm/trunk/test/CodeGen/AMDGPU/llvm.amdgcn.buffer.store.ll\nM | /llvm/trunk/test/CodeGen/AMDGPU/llvm.amdgcn.image.ll\nM | /llvm/trunk/test/CodeGen/AMDGPU/llvm.amdgcn.tbuffer.store.ll\n"}, {"commit_id": "331182", "date": "2018-04-30T14:37:39.552551Z", "author": "bjope", "msg": "[SelectionDAG] Improve selection of DBG_VALUE using a PHI node result\n\nSummary:\nWhen building the selection DAG at ISel all PHI nodes are\nselected and lowered to Machine Instruction PHI nodes before\nwe start to create any SDNodes. So there are no SDNodes for\nvalues produced by the PHI nodes.\n\nIn the past when selecting a dbg.value intrinsic that uses\nthe value produced by a PHI node we have been handling such\ndbg.value intrinsics as \"dangling debug info\". I.e. we have\nnot created a SDDbgValue node directly, because there is\nno existing SDNode for the PHI result, instead we deferred\nthe creationg of a SDDbgValue until we found the first use\nof the PHI result.\n\nThe old solution had a couple of flaws. The position of the\nselected DBG_VALUE instruction would end up quite late in a\nbasic block, and for example not directly after the PHI node\nas in the LLVM IR input. And in case there were no use at all\nin the basic block the dbg.value could be dropped completely.\n\nThis patch introduces a new VREG kind of SDDbgValue nodes.\nIt is similar to a SDNODE kind of node, but it refers directly\nto a virtual register and not a SDNode. When we do selection\nfor a dbg.value that is using the result of a PHI node we\ncan do a lookup of the virtual register directly (as it already\nis determined for the PHI node) and create a SDDbgValue node\nimmediately instead of delaying the selection until we find a\nuse.\n\nThis should fix a problem with losing debug info at ISel\nas seen in PR37234 (https://bugs.llvm.org/show_bug.cgi?id=37234).\nIt does not resolve PR37234 completely, because the debug info\nis dropped later on in the BranchFolder (see D46184).\n\nReviewers: #debug-info, aprantl\n\nReviewed By: #debug-info, aprantl\n\nSubscribers: rnk, gbedwell, aprantl, JDevlieghere, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D46129", "modified": "M | /llvm/trunk/include/llvm/CodeGen/SelectionDAG.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/InstrEmitter.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAG.cpp\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\nM | /llvm/trunk/test/DebugInfo/COFF/pieces.ll\nA | /llvm/trunk/test/DebugInfo/X86/sdag-dbgvalue-phi-use-1.ll\nA | /llvm/trunk/test/DebugInfo/X86/sdag-dbgvalue-phi-use-2.ll\n"}, {"commit_id": "331183", "date": "2018-04-30T14:37:46.551421Z", "author": "bjope", "msg": "[BranchFolding] Salvage DBG_VALUE instructions from empty blocks\n\nSummary:\nThis patch will introduce copying of DBG_VALUE instructions\nfrom an otherwise empty basic block to predecessor/successor\nblocks in case the empty block is eliminated/bypassed. It\nis currently only done in one identified situation in the\nBranchFolding pass, before optimizing on empty block.\nIt can be seen as a light variant of the propagation done\nby the LiveDebugValues pass, which unfortunately is executed\nafter the BranchFolding pass.\n\nWe only propagate (copy) DBG_VALUE instructions in a limited\nnumber of situations:\n a) If the empty BB is the only predecessor of a successor\n    we can copy the DBG_VALUE instruction to the beginning of\n    the successor (because the DBG_VALUE instruction is always\n    part of the flow between the blocks).\n b) If the empty BB is the only successor of a predecessor\n    we can copy the DBG_VALUE instruction to the end of the\n    predecessor (because the DBG_VALUE instruction is always\n    part of the flow between the blocks). In this case we add\n    the DBG_VALUE just before the first terminator (assuming\n    that the terminators do not impact the DBG_VALUE).\n\nA future solution, to handle more situations, could perhaps\nbe to run the LiveDebugValues pass before branch folding?\n\nThis fix is related to PR37234. It is expected to resolve\nthe problem seen, when applied together with the fix in\nSelectionDAG from here: https://reviews.llvm.org/D46129\n\nReviewers: #debug-info, aprantl, rnk\n\nReviewed By: #debug-info, aprantl\n\nSubscribers: ormris, gbedwell, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D46184", "modified": "M | /llvm/trunk/lib/CodeGen/BranchFolding.cpp\nA | /llvm/trunk/test/DebugInfo/X86/PR37234.ll\n"}, {"commit_id": "331692", "date": "2018-05-07T22:23:38.183230Z", "author": "rsmith", "msg": "PR37352: mangle numbering for decomposition declarations.\n\nIn order to match our mangling scheme, use a different set of numbers for\ndecomposition declarations, and consider all binding names when forming the\nnumbering. This does not yet affect any mangled names we produce, because\nlocal decomposition declarations can't yet have linkage, but a C++ standard\nproposal to change that is currently being processed.\n", "modified": "M | /cfe/trunk/lib/AST/ItaniumCXXABI.cpp\nM | /cfe/trunk/test/SemaCXX/cxx1z-decomposition.cpp\n"}, {"commit_id": "331824", "date": "2018-05-08T23:28:15.461760Z", "author": "davide", "msg": "[SimplifyCFG] Fix a crash when folding PHIs.\n\nWe enter MergeBlockIntoPredecessor with a block looking like this:\n\nfor.inc.us-lcssa:                                 ; preds = %cond.end\n  %k.1.lcssa.ph = phi i32 [ %conv15, %cond.end ]\n  %t.3.lcssa.ph = phi i32 [ %k.1.lcssa.ph, %cond.end ]\n  br label %for.inc, !dbg !66\n\n[note the first arg of the PHI being a PHI].\nFoldSingleEntryPHINodes gets rid of both PHIs (calling, eraseFromParent).\nBut right before we call the function, we push into IncomingValues the\nonly argument of the PHIs, and shortly after we try to iterate over\nsomething which has been invalidated before :(\n\nThe fix its not trying to remove PHIs which have an incoming value\ncoming from the same BB we're looking at.\n\nFixes PR37300 and rdar://problem/39910460\n\nDifferential Revision:  https://reviews.llvm.org/D46568", "modified": "M | /llvm/trunk/lib/Transforms/Utils/BasicBlockUtils.cpp\nA | /llvm/trunk/test/Transforms/SimplifyCFG/fold-debug-info.ll\n"}, {"commit_id": "332243", "date": "2018-05-14T13:43:32.629127Z", "author": "spatel", "msg": "[AggressiveInstCombine] avoid crashing on unsimplified code (PR37446)\n\nThis bug:\nhttps://bugs.llvm.org/show_bug.cgi?id=37446\n...raises another question: why do we run aggressive-instcombine before \nregular instcombine?\n", "modified": "M | /llvm/trunk/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp\nM | /llvm/trunk/test/Transforms/AggressiveInstCombine/masked-cmp.ll\n"}, {"commit_id": "332309", "date": "2018-05-14T23:05:43.874377Z", "author": "efriedma", "msg": "[SCEVAffinator] Fix handling of pwaff complexity limit.\n\nnullptr is not a valid affine expression, and none of the callers check\nfor null, so we eventually hit an isl error and crash.\n\nInstead, invalidate the scop and return a constant zero.\n\nDifferential Revision: https://reviews.llvm.org/D46445\n\n", "modified": "M | /polly/trunk/include/polly/Support/SCEVAffinator.h\nM | /polly/trunk/lib/Support/SCEVAffinator.cpp\nA | /polly/trunk/test/ScopInfo/pwaff-complexity-bailout.ll\n"}, {"commit_id": "332389", "date": "2018-05-15T20:16:57.407188Z", "author": "chandlerc", "msg": "[x86][eflags] Fix PR37431 by teaching the EFLAGS copy lowering to\nspecially handle SETB_C* pseudo instructions.\n\nSummary:\nWhile the logic here is somewhat similar to the arithmetic lowering, it\nis different enough that it made sense to have its own function.\nI actually tried a bunch of different optimizations here and none worked\nwell so I gave up and just always do the arithmetic based lowering.\n\nLooking at code from the PR test case, we actually pessimize a bunch of\ncode when generating these. Because SETB_C* pseudo instructions clobber\nEFLAGS, we end up creating a bunch of copies of EFLAGS to feed multiple\nSETB_C* pseudos from a single set of EFLAGS. This in turn causes the\nlowering code to ruin all the clever code generation that SETB_C* was\nhoping to achieve. None of this is needed. Whenever we're generating\nmultiple SETB_C* instructions from a single set of EFLAGS we should\ninstead generate a single maximally wide one and extract subregs for all\nthe different desired widths. That would result in substantially better\ncode generation. But this patch doesn't attempt to address that.\n\nThe test case from the PR is included as well as more directed testing\nof the specific lowering pattern used for these pseudos.\n\nReviewers: craig.topper\n\nSubscribers: sanjoy, mcrosier, llvm-commits, hiraditya\n\nDifferential Revision: https://reviews.llvm.org/D46799", "modified": "M | /llvm/trunk/lib/Target/X86/X86FlagsCopyLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/copy-eflags.ll\nM | /llvm/trunk/test/CodeGen/X86/flags-copy-lowering.mir\n"}, {"commit_id": "333072", "date": "2018-05-23T10:09:53.042680Z", "author": "mkazantsev", "msg": "[LoopUnswitch] Fix SCEV invalidation in unswitching\n\nLoop unswitching makes substantial changes to a loop that can also affect cached\nSCEV info in its outer loops as well, but it only cares to invalidate SCEV cache for the\ninnermost loop in case of full unswitching and does not invalidate anything at all in\ncase of trivial unswitching. As result, we may end up with incorrect data in cache.\n\nDifferential Revision: https://reviews.llvm.org/D46045\nReviewed By: mzolotukhin\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/LoopUnswitch.cpp\nA | /llvm/trunk/test/Transforms/LoopUnswitch/invalidate-scev.ll\n"}, {"commit_id": "334036", "date": "2018-06-05T18:15:57.206949Z", "author": "vitalybuka", "msg": "[lsan] Do not check for leaks in the forked process\n\nSummary:\nIf calling process had threads then forked process will fail to detect\nreferences from them.\n\nFixes https://github.com/google/sanitizers/issues/836\n\nReviewers: alekseyshl\n\nSubscribers: llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D47751", "modified": "M | /compiler-rt/trunk/lib/lsan/lsan_common.cc\nA | /compiler-rt/trunk/test/lsan/TestCases/Linux/fork_with_threads.cc\n"}, {"commit_id": "334187", "date": "2018-06-07T11:09:05.940194Z", "author": "fhahn", "msg": "[Mem2Reg] Avoid replacing load with itself in promoteSingleBlockAlloca.\n\nWe do the same thing in rewriteSingleStoreAlloca.\n\nFixes PR37632.\n\nReviewers: chandlerc, davide, efriedma\n\nReviewed By: davide\n\nDifferential Revision: https://reviews.llvm.org/D47825\n", "modified": "M | /llvm/trunk/lib/Transforms/Utils/PromoteMemoryToRegister.cpp\nA | /llvm/trunk/test/Transforms/Mem2Reg/pr37632-unreachable-list-of-stores.ll\n"}, {"commit_id": "335093", "date": "2018-06-20T04:32:05.559114Z", "author": "ctopper", "msg": "[SelectionDAG] Don't crash on inline assembly errors when the inline assembly return type is a struct.\n\nSummary:\nIf we get an error building the SelectionDAG for inline assembly we try to continue and still build the DAG.\n\nBut if the return type for the inline assembly is a struct we end up crashing because we try to create an UNDEF node with a struct type which isn't valid.\n\nInstead we need to create an UNDEF for each element of the struct and join them with merge_values.\n\nThis patch relies on single operand merge_values being handled gracefully by getMergeValues. If the return type is void there will be no VTs returned by ComputeValueVTs and now we just return instead of calling setValue. Hopefully that's ok, I assumed nothing would need to look up the mapped value for void node.\n\nFixes PR37359\n\nReviewers: rengolin, rovka, echristo, efriedma, bogner\n\nReviewed By: efriedma\n\nSubscribers: craig.topper, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D46560", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr37359.ll\n"}, {"commit_id": "335137", "date": "2018-06-20T15:36:29.407886Z", "author": "niravd", "msg": "[DAG] Fix and-mask folding when narrowing loads.\n\nSummary:\nCheck that and masks are strictly smaller than implicit mask from\nnarrowed load.\n\nFixes PR37820.\n\nReviewers: samparker, RKSimon, nemanjai\n\nSubscribers: hiraditya, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D48335", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr37820.ll\n"}, {"commit_id": "336176", "date": "2018-07-03T07:56:04.342581Z", "author": "shiva", "msg": "[DebugInfo] Fix PR37395.\n\nDbgLabelInst has no address as its operands.\n\nDifferential Revision: https://reviews.llvm.org/D46738\n\nPatch by Hsiangkai Wang.", "modified": "M | /llvm/trunk/lib/IR/IntrinsicInst.cpp\nA | /llvm/trunk/test/DebugInfo/Generic/PR37395.ll\n"}, {"commit_id": "336419", "date": "2018-07-06T08:04:47.262850Z", "author": "tnorthover", "msg": "CallGraphSCCPass: iterate over all functions.\n\nPreviously we only iterated over functions reachable from the set of\nexternal functions in the module. But since some of the passes under\nthis (notably the always-inliner and coroutine lowerer) are required for\ncorrectness, they need to run over everything.\n\nThis just adds an extra layer of iteration over the CallGraph to keep\ntrack of which functions we've already visited and get the next batch of\nSCCs.\n\nShould fix PR38029.", "modified": "M | /llvm/trunk/include/llvm/ADT/SCCIterator.h\nM | /llvm/trunk/lib/Analysis/CallGraphSCCPass.cpp\nM | /llvm/trunk/test/Transforms/Inline/always-inline.ll\n"}, {"commit_id": "337449", "date": "2018-07-19T12:44:15.136990Z", "author": "nemanjai", "msg": "[PowerPC] Handle __builtin_xxpermdi the same way as GCC does\n\nThe codegen for this builtin was initially implemented to match GCC.\nHowever, due to interest from users GCC changed behaviour to account for the\nbig endian bias of the instruction and correct it. This patch brings the\nhandling inline with GCC.\n\nFixes https://bugs.llvm.org/show_bug.cgi?id=38192\n\nDifferential Revision: https://reviews.llvm.org/D49424\n", "modified": "M | /cfe/trunk/lib/CodeGen/CGBuiltin.cpp\nM | /cfe/trunk/test/CodeGen/builtins-ppc-vsx.c\n"}, {"commit_id": "337563", "date": "2018-07-20T15:27:24.464024Z", "author": "niravd", "msg": "[DAG] Avoid Node Update assertion due to AND simplification\n\nCheck for construction-time folding for incomplete AND nodes in\nBackwardsPropagateMask.\n\nFixes PR38185.\n\nReviewers: RKSimon, samparker\n\nReviewed By: samparker\n\nSubscribers: llvm-commits, hiraditya\n\nDifferential Revision: https://reviews.llvm.org/D49444", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr38185.ll\n"}, {"commit_id": "337717", "date": "2018-07-23T17:50:15.498475Z", "author": "jdevlieghere", "msg": "[DebugInfo] Error out when enabling -fdebug-types-section on non-ELF target.\n\nCurrently, support for debug_types is only present for ELF and trying to\npass -fdebug-types-section for other targets results in a crash in the\nbackend. Until this is fixed, we should emit a diagnostic in the front\nend when the option is passed for non-linux targets.\n\nDifferential revision: https://reviews.llvm.org/D49594", "modified": "M | /cfe/trunk/lib/Driver/ToolChains/Clang.cpp\nM | /cfe/trunk/test/Driver/debug-options.c\n"}, {"commit_id": "337800", "date": "2018-07-24T02:23:59.218933Z", "author": "shiva", "msg": "[DebugInfo] Generate debug information for labels. (Fix PR37395)\n\nGenerate DILabel metadata and call llvm.dbg.label after label\nstatement to associate the metadata with the label.\n\nAfter fixing PR37395.\n\nDifferential Revision: https://reviews.llvm.org/D45045\n\nPatch by Hsiangkai Wang.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nA | /cfe/trunk/test/CodeGen/debug-label-inline.c\nA | /cfe/trunk/test/CodeGen/debug-label.c\n"}, {"commit_id": "337803", "date": "2018-07-24T02:57:11.046318Z", "author": "shiva", "msg": "Revert \"[DebugInfo] Generate debug information for labels. (Fix PR37395)\"\n\nThis reverts commit 4288dd3bf082482e02c8a044c611c18168cb0180.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nD | /cfe/trunk/test/CodeGen/debug-label-inline.c\nD | /cfe/trunk/test/CodeGen/debug-label.c\n"}, {"commit_id": "338527", "date": "2018-08-01T12:53:06.510934Z", "author": "jdevlieghere", "msg": "[MC] Report fatal error for DWARF types for non-ELF object files\n\nGetting the DWARF types section is only implemented for ELF object\nfiles. We already disabled emitting debug types in clang (r337717), but\nnow we also report an fatal error (rather than crashing) when trying to\nobtain this section in MC. Additionally we ignore the generate debug\ntypes flag for unsupported target triples.\n\nSee PR38190 for more information.\n\nDifferential revision: https://reviews.llvm.org/D50057", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DwarfDebug.cpp\nM | /llvm/trunk/lib/MC/MCObjectFileInfo.cpp\nM | /llvm/trunk/test/DebugInfo/X86/accel-tables-dwarf5.ll\nM | /llvm/trunk/test/DebugInfo/X86/accel-tables.ll\n"}, {"commit_id": "338758", "date": "2018-08-02T19:13:35.410895Z", "author": "kparzysz", "msg": "[SCEV] Properly solve quadratic equations\n\nDifferential Revision: https://reviews.llvm.org/D48283\n", "modified": "M | /llvm/trunk/include/llvm/ADT/APInt.h\nM | /llvm/trunk/lib/Analysis/ScalarEvolution.cpp\nM | /llvm/trunk/lib/Support/APInt.cpp\nA | /llvm/trunk/test/Analysis/ScalarEvolution/solve-quadratic-i1.ll\nA | /llvm/trunk/test/Analysis/ScalarEvolution/solve-quadratic-overflow.ll\nA | /llvm/trunk/test/Analysis/ScalarEvolution/solve-quadratic.ll\nM | /llvm/trunk/unittests/ADT/APIntTest.cpp\n"}, {"commit_id": "338934", "date": "2018-08-03T23:12:37.429912Z", "author": "vsapsai", "msg": "[Preprocessor] Allow libc++ to detect when aligned allocation is unavailable.\n\nLibc++ needs to know when aligned allocation is supported by clang, but is\notherwise unavailable at link time. Otherwise, libc++ will incorrectly end up\ngenerating calls to `__builtin_operator_new`/`__builtin_operator_delete` with\nalignment arguments.\n\nThis patch implements the following changes:\n\n* The `__cpp_aligned_new` feature test macro to no longer be defined when\n  aligned allocation is otherwise enabled but unavailable.\n\n* The Darwin driver no longer passes `-faligned-alloc-unavailable` when the\n  user manually specifies `-faligned-allocation` or `-fno-aligned-allocation`.\n\n* Instead of a warning Clang now generates a hard error when an aligned\n  allocation or deallocation function is referenced but unavailable.\n\nPatch by Eric Fiselier.\n\nReviewers: rsmith, vsapsai, erik.pilkington, ahatanak, dexonsmith\n\nReviewed By: rsmith\n\nSubscribers: Quuxplusone, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D45015\n\n", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticGroups.td\nM | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/lib/Driver/ToolChains/Darwin.cpp\nM | /cfe/trunk/lib/Frontend/InitPreprocessor.cpp\nM | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/test/Driver/unavailable_aligned_allocation.cpp\nA | /cfe/trunk/test/Lexer/aligned-allocation.cpp\n"}, {"commit_id": "338989", "date": "2018-08-06T05:58:59.042266Z", "author": "hsiangkai", "msg": "[DebugInfo] Generate debug information for labels. (Fix PR37395)\n\nGenerate DILabel metadata and call llvm.dbg.label after label\nstatement to associate the metadata with the label.\n\nAfter fixing PR37395.\n\nDifferential Revision: https://reviews.llvm.org/D45045", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nA | /cfe/trunk/test/CodeGen/debug-label-inline.c\nA | /cfe/trunk/test/CodeGen/debug-label.c\n"}, {"commit_id": "338992", "date": "2018-08-06T07:07:18.913740Z", "author": "hsiangkai", "msg": "Revert \"[DebugInfo] Generate debug information for labels. (Fix PR37395)\"\n\nBuild failed in\nhttp://lab.llvm.org:8011/builders/sanitizer-x86_64-linux-autoconf/builds/27258\n\nIn lib/CodeGen/LiveDebugVariables.cpp:589, it uses std::prev(MBBI) to\nget DebugValue's SlotIndex. however, the previous instruction may be\nalso a debug instruction.", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nD | /cfe/trunk/test/CodeGen/debug-label-inline.c\nD | /cfe/trunk/test/CodeGen/debug-label.c\n"}, {"commit_id": "339210", "date": "2018-08-08T00:42:42.448792Z", "author": "rsmith", "msg": "PR38286: Don't crash when attempting to define a constructor for an\nincomplete class template.", "modified": "M | /cfe/trunk/lib/Sema/SemaExprCXX.cpp\nM | /cfe/trunk/test/SemaCXX/constructor.cpp\n"}, {"commit_id": "339225", "date": "2018-08-08T09:35:26.252218Z", "author": "thopre", "msg": "Support inline asm with multiple 64bit output in 32bit GPR\n\nSummary: Extend fix for PR34170 to support inline assembly with multiple output operands that do not naturally go in the register class it is constrained to (eg. double in a 32-bit GPR as in the PR).\n\nReviewers: bogner, t.p.northover, lattner, javed.absar, efriedma\n\nReviewed By: efriedma\n\nSubscribers: efriedma, tra, eraman, javed.absar, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D45437", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\nD | /llvm/trunk/test/CodeGen/ARM/inline-asm-operand-implicit-cast.ll\nA | /llvm/trunk/test/CodeGen/ARM/inlineasm-operand-implicit-cast.ll\n"}, {"commit_id": "339431", "date": "2018-08-10T13:24:56.934246Z", "author": "ldionne", "msg": "[libc++] Enable aligned allocation based on feature test macro, irrespective of standard\n\nSummary:\nThe current code enables aligned allocation functions when compiling in C++17\nand later. This is a problem because aligned allocation functions might not\nbe supported on the target platform, which leads to an error at link time.\n\nSince r338934, Clang knows not to define __cpp_aligned_new when it's not\navailable on the target platform -- this commit takes advantage of that to\nonly use aligned allocation functions when they are available.\n\nReviewers: vsapsai, EricWF\n\nSubscribers: christof, dexonsmith, cfe-commits, EricWF, mclow.lists\n\nDifferential Revision: https://reviews.llvm.org/D50344", "modified": "M | /libcxx/trunk/include/__config\nM | /libcxx/trunk/include/new\nA | /libcxx/trunk/test/libcxx/memory/aligned_allocation_macro.pass.cpp\n"}, {"commit_id": "340758", "date": "2018-08-27T17:26:28.919257Z", "author": "vitalybuka", "msg": "Revert \"[lsan] Do not check for leaks in the forked process\"\n\nUsers need leak reports in forks.\n\nThis reverts commit r334036.", "modified": "M | /compiler-rt/trunk/lib/lsan/lsan_common.cc\nD | /compiler-rt/trunk/test/lsan/TestCases/Linux/fork_with_threads.cc\n"}, {"commit_id": "340769", "date": "2018-08-27T19:15:05.713754Z", "author": "vitalybuka", "msg": "[lsan] Check that leak sanitizer works in the forked process\n\nRegression test for PR38698", "modified": "A | /compiler-rt/trunk/test/lsan/TestCases/Linux/fork_and_leak.cc\n"}, {"commit_id": "340977", "date": "2018-08-29T22:05:35.110683Z", "author": "dergachev", "msg": "[CFG] [analyzer] Disable argument construction contexts for variadic functions.\n\nThe analyzer doesn't make use of them anyway and they seem to have\npretty weird AST from time to time, so let's just skip them for now.\n\nFixes a crash reported as pr37769.\n\nDifferential Revision: https://reviews.llvm.org/D50855\n", "modified": "M | /cfe/trunk/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h\nM | /cfe/trunk/lib/StaticAnalyzer/Core/ExprEngine.cpp\nM | /cfe/trunk/test/Analysis/temporaries.cpp\n"}, {"commit_id": "341519", "date": "2018-09-06T06:03:36.174175Z", "author": "hsiangkai", "msg": "[DebugInfo] Generate debug information for labels. (Fix PR37395)\n\nGenerate DILabel metadata and call llvm.dbg.label after label\nstatement to associate the metadata with the label.\n\nAfter fixing PR37395.\nAfter fixing problems in LiveDebugVariables.\n\nDifferential Revision: https://reviews.llvm.org/D45045", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nA | /cfe/trunk/test/CodeGen/debug-label-inline.c\nA | /cfe/trunk/test/CodeGen/debug-label.c\n"}, {"commit_id": "341549", "date": "2018-09-06T14:27:40.272425Z", "author": "sammccall", "msg": "Revert \"[DebugInfo] Generate debug information for labels. (Fix PR37395)\"\n\nThis reverts commit r341519, which generates debug info that causes\nbackend crashes. (with -split-dwarf-file)\n\nDetails in https://reviews.llvm.org/D50495", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nD | /cfe/trunk/test/CodeGen/debug-label-inline.c\nD | /cfe/trunk/test/CodeGen/debug-label.c\n"}, {"commit_id": "341947", "date": "2018-09-11T14:29:59.348958Z", "author": "alelab01", "msg": "[MemorySSAUpdater] Avoid creating self-referencing MemoryDefs\n\nFix for https://bugs.llvm.org/show_bug.cgi?id=38807, which occurred\nwhile compiling SemaTemplateInstantiate.cpp with clang and GVNHoist\nenabled. In the following example:\n\n      1=def(entry)\n      /        \\\n2=def(1)       4=def(1)\n3=def(2)       5=def(4)\n\nWhen removing the MemoryDef 2=def(1) from its basic block, and just\nbefore adding it to the end of the parent basic block, we first\nreplace all its uses with the defining memory access:\n\n3=def(2) -> 3=def(1)\n\nThen we call insertDef for adding 2=def(1) to the parent basic block,\nwhere we replace the uses of 1=def(entry) with 2=def(1). Doing so we\ncreate a self reference:\n\n2=def(1) -> 2=def(2)  (bad)\n3=def(1) -> 3=def(2)  (ok)\n4=def(1) -> 4=def(2)  (ok)\n\nDifferential Revision: https://reviews.llvm.org/D51801", "modified": "M | /llvm/trunk/lib/Analysis/MemorySSAUpdater.cpp\nA | /llvm/trunk/test/Transforms/GVNHoist/pr38807.ll\n"}, {"commit_id": "342059", "date": "2018-09-12T15:47:34.385834Z", "author": "ctopper", "msg": "[X86] Remove isel patterns for ADCX instruction\n\nThere's no advantage to this instruction unless you need to avoid touching other flag bits. It's encoding is longer, it can't fold an immediate, it doesn't write all the flags.\n\nI don't think gcc will generate this instruction either.\n\nFixes PR38852.\n\nDifferential Revision: https://reviews.llvm.org/D51754", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrArithmetic.td\nM | /llvm/trunk/test/CodeGen/X86/adx-intrinsics-upgrade.ll\nM | /llvm/trunk/test/CodeGen/X86/adx-intrinsics.ll\nM | /llvm/trunk/test/CodeGen/X86/pr32282.ll\nM | /llvm/trunk/test/CodeGen/X86/pr32284.ll\nM | /llvm/trunk/test/CodeGen/X86/stack-folding-adx-x86_64.ll\n"}, {"commit_id": "342175", "date": "2018-09-13T20:33:56.343150Z", "author": "niravd", "msg": "[X86] Fix register resizings for inline assembly register operands.\n\nWhen replacing a named register input to the appropriately sized\nsub/super-register. In the case of a 64-bit value being assigned to a\nregister in 32-bit mode, match GCC's assignment.\n\nReviewers: eli.friedman, craig.topper\n\nSubscribers: nickdesaulniers, llvm-commits, hiraditya\n\nDifferential Revision: https://reviews.llvm.org/D51502", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86RegisterInfo.td\nM | /llvm/trunk/test/CodeGen/X86/atomic_mi.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-regcall-Mask.ll\nA | /llvm/trunk/test/CodeGen/X86/physreg-pairs-error.ll\nA | /llvm/trunk/test/CodeGen/X86/physreg-pairs.ll\nM | /llvm/trunk/test/CodeGen/X86/unfold-masked-merge-vector-variablemask.ll\n"}, {"commit_id": "342600", "date": "2018-09-19T23:57:38.353916Z", "author": "aaronpuchert", "msg": "Thread safety analysis: Handle ObjCIvarRefExpr in SExprBuilder::translate\n\nSummary:\nThis imitates the code for MemberExpr.\n\nFixes PR38896.\n\nReviewers: aaron.ballman, delesley, lukasza, rjmccall\n\nReviewed By: delesley\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D52200", "modified": "M | /cfe/trunk/include/clang/Analysis/Analyses/ThreadSafetyCommon.h\nM | /cfe/trunk/lib/Analysis/ThreadSafetyCommon.cpp\nA | /cfe/trunk/test/SemaObjCXX/warn-thread-safety-analysis.mm\n"}, {"commit_id": "342657", "date": "2018-09-20T16:09:30.976652Z", "author": "calixte", "msg": "[gcov] Fix wrong line hit counts when multiple blocks are on the same line\n\nSummary:\nThe goal of this patch is to have the same behaviour than gcc-gcov.\nCurrently the hit counts for a line is the sum of the counts for each block on that line.\nThe idea is to detect the cycles in the graph of blocks in using the algorithm by Hawick & James.\nThe count for a cycle is the min of the counts for each edge in the cycle.\nOnce we've the count for each cycle, we can sum them and add the transition counts of those cycles.\n\nFix both https://bugs.llvm.org/show_bug.cgi?id=38065 and https://bugs.llvm.org/show_bug.cgi?id=38066\n\nReviewers: marco-c, davidxl\n\nReviewed By: marco-c\n\nSubscribers: vsk, lebedev.ri, sylvestre.ledru, dblaikie, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D49659", "modified": "M | /llvm/trunk/include/llvm/ProfileData/GCOV.h\nM | /llvm/trunk/lib/ProfileData/GCOV.cpp\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_-a.cpp.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_-a.h.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_-a_-b.cpp.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_-a_-b.h.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_-a_-b_-c_-u.cpp.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_-a_-b_-c_-u.h.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_-a_-b_-u.cpp.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_-a_-b_-u.h.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_missing.cpp.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_no_options.cpp.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_objdir.cpp.gcov\nM | /llvm/trunk/test/tools/llvm-cov/Inputs/test_paths.cpp.gcov\nM | /llvm/trunk/test/tools/llvm-cov/range_based_for.cpp\n"}, {"commit_id": "342682", "date": "2018-09-20T20:05:57.070867Z", "author": "waltl", "msg": "[RegAllocGreedy] Fix crash in tryLocalSplit\n\ntryLocalSplit only handles a single use block, but an interval may\nhave multiple use blocks.  So don't crash in that case.  This fixes\nPR38795.\n\nDifferential revision: https://reviews.llvm.org/D52277", "modified": "M | /llvm/trunk/lib/CodeGen/RegAllocGreedy.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr38795.ll\n"}, {"commit_id": "343148", "date": "2018-09-26T22:18:45.914040Z", "author": "hsiangkai", "msg": "[DebugInfo] Generate debug information for labels.\n\nGenerate DILabel metadata and call llvm.dbg.label after label\nstatement to associate the metadata with the label.\n\nAfter fixing PR37395.\nAfter fixing problems in LiveDebugVariables.\nAfter fixing NULL symbol problems in AddressPool when enabling\nsplit-dwarf-file.\n\nDifferential Revision: https://reviews.llvm.org/D45045", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nA | /cfe/trunk/test/CodeGen/debug-label-inline.c\nA | /cfe/trunk/test/CodeGen/debug-label.c\n"}, {"commit_id": "344069", "date": "2018-10-09T18:41:17.804050Z", "author": "sbc", "msg": "[SLPVectorizer] Check that lowered type is floating point before calling isFabsFree\n\nIn the case of soft-fp (e.g. fp128 under wasm) the result of\ngetTypeLegalizationCost() can be an integer type even if the input is\nfloating point (See LegalizeTypeAction::TypeSoftenFloat).\n\nBefore calling isFabsFree() (which asserts if given a non-fp\ntype) we need to check that that result is fp.  This is safe since in\nfabs is certainly not free in the soft-fp case.\n\nFixes PR39168\n\nDifferential Revision: https://reviews.llvm.org/D52899", "modified": "M | /llvm/trunk/include/llvm/CodeGen/BasicTTIImpl.h\nA | /llvm/trunk/test/Transforms/SLPVectorizer/X86/fabs-cost-softfp.ll\n"}, {"commit_id": "344120", "date": "2018-10-10T08:29:55.547037Z", "author": "carlos.alberto.enciso", "msg": "[DebugInfo][Dexter] Unreachable line stepped onto after SimplifyCFG.\n\nWhen SimplifyCFG changes the PHI node into a select instruction, the debug line records becomes ambiguous. It causes the debugger to display unreachable source lines. \n\nDifferential Revision: https://reviews.llvm.org/D52887", "modified": "M | /llvm/trunk/include/llvm/Transforms/Utils/Local.h\nM | /llvm/trunk/lib/Transforms/Utils/Local.cpp\nM | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr38762.ll\nM | /llvm/trunk/test/CodeGen/X86/pr38763.ll\n"}, {"commit_id": "344141", "date": "2018-10-10T13:39:59.113060Z", "author": "spatel", "msg": "[x86] allow single source horizontal op matching (PR39195)\n\nThis is intended to restore horizontal codegen to what it looked like before IR demanded elements improved in:\nrL343727\n\nAs noted in PR39195:\nhttps://bugs.llvm.org/show_bug.cgi?id=39195\n...horizontal ops can be worse for performance than a shuffle+regular binop, so I've added a TODO. Ideally, we'd \nsolve that in a machine instruction pass, but a quicker solution will be adding a 'HasFastHorizontalOp' feature\nbit to deal with it here in the DAG.\n\nDifferential Revision: https://reviews.llvm.org/D52997\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/avx512-intrinsics-fast-isel.ll\nM | /llvm/trunk/test/CodeGen/X86/haddsub-undef.ll\nM | /llvm/trunk/test/CodeGen/X86/phaddsub.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-combining.ll\n"}, {"commit_id": "344361", "date": "2018-10-12T16:41:02.016941Z", "author": "spatel", "msg": "[x86] add and use fast horizontal vector math subtarget feature\n\nThis is the planned follow-up to D52997. Here we are reducing horizontal vector math codegen \nby default. AMD Jaguar (btver2) should have no difference with this patch because it has \nfast-hops. (If we want to set that bit for other CPUs, let me know.)\n\nThe code changes are small, but there are many test diffs. For files that are specifically \ntesting for hops, I added RUNs to distinguish fast/slow, so we can see the consequences \nside-by-side. For files that are primarily concerned with codegen other than hops, I just \nupdated the CHECK lines to reflect the new default codegen.\n\nTo recap the recent horizontal op story:\n\n1. Before rL343727, we were producing hops for all subtargets for a variety of patterns. \n   Hops were likely not optimal for all targets though.\n2. The IR improvement in r343727 exposed a hole in the backend hop pattern matching, so \n   we reduced hop codegen for all subtargets. That was bad for Jaguar (PR39195).\n3. We restored the hop codegen for all targets with rL344141. Good for Jaguar, but \n   probably bad for other CPUs.\n4. This patch allows us to distinguish when we want to produce hops, so everyone can be \n   happy. I'm not sure if we have the best predicate here, but the intent is to undo the \n   extra hop-iness that was enabled by r344141.\n\nDifferential Revision: https://reviews.llvm.org/D53095\n", "modified": "M | /llvm/trunk/lib/Target/X86/X86.td\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86Subtarget.h\nM | /llvm/trunk/test/CodeGen/X86/avx2-phaddsub.ll\nM | /llvm/trunk/test/CodeGen/X86/avx512-intrinsics-fast-isel.ll\nM | /llvm/trunk/test/CodeGen/X86/haddsub-shuf.ll\nM | /llvm/trunk/test/CodeGen/X86/haddsub-undef.ll\nM | /llvm/trunk/test/CodeGen/X86/haddsub.ll\nM | /llvm/trunk/test/CodeGen/X86/madd.ll\nM | /llvm/trunk/test/CodeGen/X86/phaddsub.ll\nM | /llvm/trunk/test/CodeGen/X86/required-vector-width.ll\nM | /llvm/trunk/test/CodeGen/X86/sad.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-reduce-add.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-reduce-fadd-fast.ll\nM | /llvm/trunk/test/CodeGen/X86/vector-shuffle-combining.ll\n"}, {"commit_id": "345250", "date": "2018-10-25T09:58:59.505982Z", "author": "carlos.alberto.enciso", "msg": "[DebugInfo][Dexter] Unreachable line stepped onto after SimplifyCFG.\n\nWhen SimplifyCFG changes the PHI node into a select instruction, the debug line records becomes ambiguous. It causes the debugger to display unreachable source lines.\n\nDifferential Revision: https://reviews.llvm.org/D53287", "modified": "M | /llvm/trunk/include/llvm/Transforms/Utils/Local.h\nM | /llvm/trunk/lib/Transforms/Utils/Local.cpp\nM | /llvm/trunk/lib/Transforms/Utils/SimplifyCFG.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr38762.ll\nM | /llvm/trunk/test/CodeGen/X86/pr38763.ll\nA | /llvm/trunk/test/CodeGen/X86/pr39243.ll\n"}, {"commit_id": "345470", "date": "2018-10-28T03:30:18.620601Z", "author": "brad", "msg": "Reapply Pass the nopie flag to the linker when linking with -pg.\n", "modified": "M | /cfe/trunk/lib/Driver/ToolChains/OpenBSD.cpp\nM | /cfe/trunk/test/Driver/openbsd.c\n"}, {"commit_id": "345677", "date": "2018-10-31T00:20:41.198341Z", "author": "rnk", "msg": "[asan] Remove flags for clang-cl before it supported EH\n\nAlso remove -Wno-undefined-inline, which needed to work around PR19898,\nwhich was fixed.", "modified": "M | /compiler-rt/trunk/cmake/Modules/AddCompilerRT.cmake\nM | /compiler-rt/trunk/cmake/base-config-ix.cmake\nM | /compiler-rt/trunk/lib/asan/tests/CMakeLists.txt\n"}, {"commit_id": "345959", "date": "2018-11-02T09:16:12.634081Z", "author": "ayalz", "msg": "[LV] Avoid vectorizing loops under opt for size that involve SCEV checks\n\nFix PR39417, PR39497\n\nThe loop vectorizer may generate runtime SCEV checks for overflow and stride==1\ncases, leading to execution of original scalar loop. The latter is forbidden\nwhen optimizing for size. An assert introduced in r344743 triggered the above\nPR's showing it does happen. This patch fixes this behavior by preventing\nvectorization in such cases.\n\nDifferential Revision: https://reviews.llvm.org/D53612\n", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nM | /llvm/trunk/test/Transforms/LoopVectorize/X86/optsize.ll\nA | /llvm/trunk/test/Transforms/LoopVectorize/pr39417-optsize-scevchecks.ll\n"}, {"commit_id": "345996", "date": "2018-11-02T16:52:48.971412Z", "author": "jmorse", "msg": "[MachineSink][DebugInfo] Correctly sink DBG_VALUEs\n\nAs reported in PR38952, postra-machine-sink relies on DBG_VALUE insns being\nadjacent to the def of the register that they reference. This is not always\ntrue, leading to register copies being sunk but not the associated DBG_VALUEs,\nwhich gives the debugger a bad variable location.\n\nThis patch collects DBG_VALUEs as we walk through a BB looking for copies to\nsink, then passes them down to performSink. Compile-time impact should be\nnegligable.\n\nDifferential Revision: https://reviews.llvm.org/D53992\n", "modified": "M | /llvm/trunk/lib/CodeGen/MachineSink.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr38952.mir\n"}, {"commit_id": "346335", "date": "2018-11-07T17:20:07.061412Z", "author": "fhahn", "msg": "[NewGVN] Make sure we do not add a user to itself.\n\nIf we simplify an instruction to itself, we do not need to add a user to\nitself. For congruence classes with a defining expression, we already\nuse a similar logic.\n\nFixes PR38259.\n\nReviewers: davide, efriedma, mcrosier\n\nReviewed By: davide\n\nDifferential Revision: https://reviews.llvm.org/D51168\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nA | /llvm/trunk/test/Transforms/NewGVN/simp-to-self.ll\n"}, {"commit_id": "347037", "date": "2018-11-16T08:35:19.877509Z", "author": "sam_parker", "msg": "[DAGCombine] Fix non-deterministic debug output\n\nPR37970 reported non-deterministic debug output, this was caused by\niterating through a set and not a a vector.\n\nbugzilla: https://bugs.llvm.org/show_bug.cgi?id=37970\n\nDifferential Revision: https://reviews.llvm.org/D54570\n", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/DAGCombiner.cpp\n"}, {"commit_id": "347556", "date": "2018-11-26T14:35:38.502558Z", "author": "nemanjai", "msg": "[PowerPC] Vector load/store builtins overstate alignment of pointers\n\nA number of builtins in altivec.h load/store vectors from pointers to scalar\ntypes. Currently they just cast the pointer to a vector pointer, but expressions\nlike that have the alignment of the target type. Of course, the input pointer\ndid not have that alignment so this triggers UBSan (and rightly so).\n\nThis resolves https://bugs.llvm.org/show_bug.cgi?id=39704\n\nDifferential revision: https://reviews.llvm.org/D54787\n", "modified": "M | /cfe/trunk/lib/Headers/altivec.h\nM | /cfe/trunk/test/CodeGen/builtins-ppc-altivec.c\nM | /cfe/trunk/test/CodeGen/builtins-ppc-quadword.c\nM | /cfe/trunk/test/CodeGen/builtins-ppc-vsx.c\n"}, {"commit_id": "348988", "date": "2018-12-12T23:32:35.815126Z", "author": "davide", "msg": "[LoopDeletion] Update debug values after loop deletion.\n\nWhen loops are deleted, we don't keep track of variables modified inside\nthe loops, so the DI will contain the wrong value for these.\n\ne.g.\n\nint b() {\n\nint i;\nfor (i = 0; i < 2; i++)\n  ;\npatatino();\nreturn a;\n-> 6 patatino();\n\n7     return a;\n8   }\n9   int main() { b(); }\n(lldb) frame var i\n(int) i = 0\n\nWe mark instead these values as unavailable inserting a\n@llvm.dbg.value(undef to make sure we don't end up printing an incorrect\nvalue in the debugger. We could consider doing something fancier,\nfor, e.g. constants, in the future.\n\nPR39868.\nrdar://problem/46418795)\n\nDifferential Revision: https://reviews.llvm.org/D55299", "modified": "M | /llvm/trunk/lib/Transforms/Utils/LoopUtils.cpp\nA | /llvm/trunk/test/Transforms/LoopDeletion/diundef.ll\n"}, {"commit_id": "349214", "date": "2018-12-15T00:03:33.447553Z", "author": "vedantk", "msg": "[Util] Refer to [s|z]exts of args when converting dbg.declares (fix PR35400)\n\nWhen converting dbg.declares, if the described value is a [s|z]ext,\nrefer to the ext directly instead of referring to its operand.\n\nThis fixes a narrowing bug (the debugger got the sign of a variable\nwrong, see llvm.org/PR35400).\n\nThe main reason to refer to the ext's operand was that an optimization\nmay remove the ext itself, leading to a dropped variable. Now that\nInstCombine has been taught to use replaceAllDbgUsesWith (r336451), this\nis less of a concern. Other passes can/should adopt this API as needed\nto fix dropped variable bugs.\n\nDifferential Revision: https://reviews.llvm.org/D51813", "modified": "M | /llvm/trunk/lib/Transforms/Utils/Local.cpp\nA | /llvm/trunk/test/Transforms/Util/dbg-user-of-aext.ll\nD | /llvm/trunk/test/Transforms/Util/split-bit-piece.ll\n"}, {"commit_id": "349217", "date": "2018-12-15T00:32:38.808919Z", "author": "fhahn", "msg": "[NewGVN] Update use counts for SSA copies when replacing them by their operands.\n\nThe current code relies on LeaderUseCount to determine if we can remove\nan SSA copy, but in that the LeaderUseCount does not refer to the SSA\ncopy. If a SSA copy is a dominating leader, we use the operand as dominating\nleader instead. This means we removed a user of a ssa copy and we should\ndecrement its use count, so we can remove the ssa copy once it becomes dead.\n\nFixes PR38804.\n\nReviewers: efriedma, davide\n\nReviewed By: davide\n\nDifferential Revision: https://reviews.llvm.org/D51595\n", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/NewGVN.cpp\nA | /llvm/trunk/test/Transforms/NewGVN/eliminate-ssacopy.ll\n"}, {"commit_id": "349323", "date": "2018-12-17T01:42:39.614415Z", "author": "davide", "msg": "[EarlyCSE] If DI can't be salvaged, mark it as unavailable.\n\nFixes PR39874.", "modified": "M | /llvm/trunk/lib/Transforms/Scalar/EarlyCSE.cpp\nA | /llvm/trunk/test/Transforms/EarlyCSE/debug-info-undef.ll\n"}, {"commit_id": "350476", "date": "2019-01-05T19:27:12.964857Z", "author": "compnerd", "msg": "CodeGen: fix autolink emission on ELF\n\nThe autolinking extension for ELF uses a slightly different format for\nencoding the autolink information compared to COFF and MachO.  Account\nfor this in the CGM to ensure that we do not assert when emitting\nassembly or an object file.", "modified": "M | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/test/Modules/autolink.m\n"}, {"commit_id": "350603", "date": "2019-01-08T02:48:45.281065Z", "author": "marshall", "msg": "Set the buffer of an fstream to empty when the underlying file is closed. This 'fixes' PR#38052 - std::fstream still good after closing and updating content.", "modified": "M | /libcxx/trunk/include/fstream\nA | /libcxx/trunk/test/libcxx/input.output/file.streams/fstreams/fstream.close.pass.cpp\n"}, {"commit_id": "350643", "date": "2019-01-08T18:44:22.762428Z", "author": "erichkeane", "msg": "Limit COFF 'common' emission to <=32 alignment types.\n\nAs reported in PR33035, LLVM crashes if given a common object with an\nalignment of greater than 32 bits. This is because the COFF file format\ndoes not support these alignments, so emitting them is broken anyway.\n\nThis patch changes any global definitions greater than 32 bit alignment\nto no longer be in 'common'.\n\nhttps://bugs.llvm.org/show_bug.cgi?id=33035\n\nDifferential Revision: https://reviews.llvm.org/D56391\n\nChange-Id: I48609289753b7f3b58c5e2bc1712756750fbd45a", "modified": "M | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nA | /cfe/trunk/test/CodeGen/microsoft-no-common-align.c\n"}, {"commit_id": "350649", "date": "2019-01-08T20:26:56.946589Z", "author": "ldionne", "msg": "[Sema] Teach Clang that aligned allocation is not supported with macosx10.13\n\nSummary:\nr306722 added diagnostics when aligned allocation is used with deployment\ntargets that do not support it, but the first macosx supporting aligned\nallocation was incorrectly set to 10.13. In reality, the dylib shipped\nwith macosx10.13 does not support aligned allocation, but the dylib\nshipped with macosx10.14 does.\n\nReviewers: ahatanak\n\nSubscribers: christof, jkorous, dexonsmith, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D56445", "modified": "M | /cfe/trunk/include/clang/Basic/AlignedAllocation.h\nM | /cfe/trunk/test/Driver/unavailable_aligned_allocation.cpp\nM | /cfe/trunk/test/SemaCXX/unavailable_aligned_allocation.cpp\nM | /libcxx/trunk/test/libcxx/language.support/support.dynamic/libcpp_deallocate.sh.cpp\nM | /libcxx/trunk/test/libcxx/memory/aligned_allocation_macro.pass.cpp\n"}, {"commit_id": "351625", "date": "2019-01-19T03:27:05.945930Z", "author": "ericwf", "msg": "Fix aligned allocation availability XFAILs after D56445.\n\nD56445 bumped the minimum Mac OS X version required for aligned\nallocation from 10.13 to 10.14. This caused libc++ tests depending\non the old value to break.\n\nThis patch updates the XFAILs for those tests to include 10.13.", "modified": "M | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.array/delete_align_val_t_replace.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.array/new_align_val_t.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.array/new_align_val_t_nothrow.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.array/new_align_val_t_nothrow_replace.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.single/delete_align_val_t_replace.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.single/new_align_val_t.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.single/new_align_val_t_nothrow.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.single/new_align_val_t_nothrow_replace.pass.cpp\n"}, {"commit_id": "351626", "date": "2019-01-19T03:37:25.679106Z", "author": "rtereshin", "msg": "Reapply \"[CGP] Check for existing inttotpr before creating new one\"\n\nOriginal commit: r351582", "modified": "M | /llvm/trunk/lib/CodeGen/CodeGenPrepare.cpp\nA | /llvm/trunk/test/Transforms/CodeGenPrepare/X86/sink-addrmode-cse-inttoptrs.ll\n"}, {"commit_id": "351670", "date": "2019-01-20T01:21:35.380097Z", "author": "ericwf", "msg": "Fix aligned allocation availability XFAILs after D56445.\n\nD56445 bumped the minimum Mac OS X version required for aligned\nallocation from 10.13 to 10.14. This caused libc++ tests depending\non the old value to break.\n\nThis patch updates the XFAILs for those tests to include 10.13.", "modified": "M | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.array/delete_align_val_t_replace.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.array/new_align_val_t.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.array/new_align_val_t_nothrow.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.array/new_align_val_t_nothrow_replace.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.single/delete_align_val_t_replace.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.single/new_align_val_t.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.single/new_align_val_t_nothrow.pass.cpp\nM | /libcxx/trunk/test/std/language.support/support.dynamic/new.delete/new.delete.single/new_align_val_t_nothrow_replace.pass.cpp\n"}, {"commit_id": "352025", "date": "2019-01-24T05:34:29.219168Z", "author": "hsiangkai", "msg": "Reland r345009 \"[DebugInfo] Generate debug information for labels.\"\n\nGenerate DILabel metadata and call llvm.dbg.label after label\nstatement to associate the metadata with the label.\n\nAfter fixing PR37395.\nAfter fixing problems in LiveDebugVariables.\nAfter fixing NULL symbol problems in AddressPool when enabling\nsplit-dwarf-file.\nAfter fixing PR39094.\nAfter landing D54199 and D54465 to fix Chromium build failed.\n\nDifferential Revision: https://reviews.llvm.org/D45045", "modified": "M | /cfe/trunk/lib/CodeGen/CGDebugInfo.cpp\nM | /cfe/trunk/lib/CodeGen/CGDebugInfo.h\nM | /cfe/trunk/lib/CodeGen/CGStmt.cpp\nA | /cfe/trunk/test/CodeGen/debug-label-inline.c\nA | /cfe/trunk/test/CodeGen/debug-label.c\n"}, {"commit_id": "352541", "date": "2019-01-29T20:53:51.991569Z", "author": "probinson", "msg": "[DWARF] Emit reasonable debug info for empty .s files.", "modified": "M | /llvm/trunk/lib/MC/MCParser/AsmParser.cpp\nA | /llvm/trunk/test/MC/AsmParser/debug-only-comments.s\n"}, {"commit_id": "352707", "date": "2019-01-31T00:49:27.094155Z", "author": "evandro", "msg": "[InstCombine] Simplify check clauses in test (NFC)", "modified": "M | /llvm/trunk/test/Transforms/InstCombine/pow-1.ll\n"}, {"commit_id": "352714", "date": "2019-01-31T01:41:39.796911Z", "author": "evandro", "msg": "[InstCombine] Expand testing for Windows (NFC)\n\nAdded the checks to the existing cases when the target is Win64.", "modified": "M | /llvm/trunk/test/Transforms/InstCombine/pow-1.ll\n"}, {"commit_id": "352886", "date": "2019-02-01T16:57:53.758823Z", "author": "evandro", "msg": "[InstCombine] Refactor test checks (NFC)", "modified": "M | /llvm/trunk/test/Transforms/InstCombine/win-math.ll\n"}, {"commit_id": "352892", "date": "2019-02-01T17:39:48.265707Z", "author": "evandro", "msg": "[InstCombine] Expand Windows test (NFC)\n\nAdd checks for Win64 to existing cases.", "modified": "M | /llvm/trunk/test/Transforms/InstCombine/win-math.ll\n"}, {"commit_id": "352895", "date": "2019-02-01T18:34:20.254271Z", "author": "evandro", "msg": "[InstCombine] Refactor test checks (NFC)", "modified": "M | /llvm/trunk/test/Transforms/InstCombine/double-float-shrink-2.ll\n"}, {"commit_id": "352908", "date": "2019-02-01T20:42:03.526049Z", "author": "evandro", "msg": "[InstCombine] Expand Windows test (NFC)\n\nRun checks for Win64 as well.", "modified": "M | /llvm/trunk/test/Transforms/InstCombine/double-float-shrink-1.ll\n"}, {"commit_id": "352917", "date": "2019-02-01T21:14:10.881660Z", "author": "evandro", "msg": "[InstCombine] Expand Windows test (NFC)\n\nRun checks for Win32 as well.", "modified": "M | /llvm/trunk/test/Transforms/InstCombine/double-float-shrink-1.ll\n"}, {"commit_id": "352935", "date": "2019-02-01T22:52:05.670952Z", "author": "evandro", "msg": "[InstCombine] Refactor test checks (NFC)", "modified": "M | /llvm/trunk/test/Transforms/InstCombine/double-float-shrink-2.ll\n"}, {"commit_id": "353114", "date": "2019-02-04T23:29:41.320401Z", "author": "evandro", "msg": "[PATCH] [TargetLibraryInfo] Update run time support for Windows\n\nIt seems that the run time for Windows has changed and supports more math\nfunctions than before.  Since LLVM requires at least VS2015, I assume that\nthis is the run time that would be redistributed with programs built with\nClang.  Thus, I based this update on the header file `math.h` that\naccompanies it.\n\nThis patch addresses the PR40541.  Unfortunately, I have no access to a\nWindows development environment to validate it.", "modified": "M | /llvm/trunk/lib/Analysis/TargetLibraryInfo.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/double-float-shrink-1.ll\nM | /llvm/trunk/test/Transforms/InstCombine/double-float-shrink-2.ll\nM | /llvm/trunk/test/Transforms/InstCombine/pow-1.ll\nM | /llvm/trunk/test/Transforms/InstCombine/win-math.ll\n"}, {"commit_id": "353213", "date": "2019-02-05T20:24:21.918674Z", "author": "evandro", "msg": "[TargetLibraryInfo] Regroup run time functions for Windows (NFC)\n\nRegroup supported and unsupported functions by precision and C standard.", "modified": "M | /llvm/trunk/lib/Analysis/TargetLibraryInfo.cpp\n"}, {"commit_id": "353733", "date": "2019-02-11T19:02:28.617996Z", "author": "evandro", "msg": "[TargetLibraryInfo] Update run time support for Windows\n\nIt seems that the run time for Windows has changed and supports more math\nfunctions than it used to, especially on AArch64, ARM, and AMD64.\n\nFixes PR40541.\n\nDifferential revision: https://reviews.llvm.org/D57625", "modified": "M | /llvm/trunk/lib/Analysis/TargetLibraryInfo.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/double-float-shrink-1.ll\nM | /llvm/trunk/test/Transforms/InstCombine/double-float-shrink-2.ll\nM | /llvm/trunk/test/Transforms/InstCombine/pow-1.ll\nM | /llvm/trunk/test/Transforms/InstCombine/win-math.ll\n"}, {"commit_id": "353758", "date": "2019-02-11T22:12:01.642579Z", "author": "evandro", "msg": "[TargetLibraryInfo] Update run time support for Windows\n\nIt seems that, since VC19, the `float` C99 math functions are supported for all\ntargets, unlike the C89 ones.\n\nAccording to the discussion at https://reviews.llvm.org/D57625.", "modified": "M | /llvm/trunk/lib/Analysis/TargetLibraryInfo.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/double-float-shrink-1.ll\nM | /llvm/trunk/test/Transforms/InstCombine/pow-1.ll\n"}, {"commit_id": "354035", "date": "2019-02-14T15:43:17.738799Z", "author": "brunoricci", "msg": "[Sema] Fix a regression introduced in \"[AST][Sema] Remove CallExpr::setNumArgs\"\n\nD54902 removed CallExpr::setNumArgs in preparation of tail-allocating the\narguments of CallExpr. It did this by allocating storage for\nmax(number of arguments, number of parameters in the prototype). The\ntemporarily nulled arguments however causes issues in BuildResolvedCallExpr\nwhen typo correction is done just after the creation of the call expression.\n\nThis was unfortunately missed by the tests /:\n\nTo fix this, delay setting the number of arguments to\nmax(number of arguments, number of parameters in the prototype) until we are\nready for it. It would be nice to have this encapsulated in CallExpr but this\nis the best I can come up with under the constraint that we cannot add\nanything the CallExpr.\n\nFixes PR40286.\n\nDifferential Revision: https://reviews.llvm.org/D57948\n\nReviewed By: aaron.ballman\n\n", "modified": "M | /cfe/trunk/include/clang/AST/Expr.h\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/test/Sema/typo-correction.c\n"}, {"commit_id": "354121", "date": "2019-02-15T12:07:57.009481Z", "author": "stulova", "msg": "[OpenCL][PR40707] Allow OpenCL C types in C++ mode.\n\nAllow all OpenCL types to be parsed in C++ mode.\n\n", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticParseKinds.td\nM | /cfe/trunk/include/clang/Basic/TokenKinds.def\nM | /cfe/trunk/lib/Parse/ParseDecl.cpp\nM | /cfe/trunk/lib/Parse/ParseExprCXX.cpp\nM | /cfe/trunk/lib/Parse/ParseTentative.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclAttr.cpp\nM | /cfe/trunk/test/CodeGenOpenCL/images.cl\nM | /cfe/trunk/test/SemaOpenCL/invalid-image.cl\nM | /cfe/trunk/test/SemaOpenCLCXX/restricted.cl\n"}, {"commit_id": "354395", "date": "2019-02-19T22:37:00.884698Z", "author": "ctopper", "msg": "[X86] Mark FP32_TO_INT16_IN_MEM/FP32_TO_INT32_IN_MEM/FP32_TO_INT64_IN_MEM as clobbering EFLAGS to prevent mis-scheduling during conversion from SelectionDAG to MIR.\n\nAfter r354178, these instruction expand to a sequence that uses an OR instruction. That OR clobbers EFLAGS so we need to state that to avoid accidentally using the clobbered flags.\n\nOur tests show the bug, but I didn't notice because the SETcc instructions didn't move after r354178 since it used to be safe to do the fp->int conversion first.\n\nWe should probably convert this whole sequence to SelectionDAG instead of a custom inserter to avoid mistakes like this.\n\nFixes PR40779", "modified": "M | /llvm/trunk/lib/Target/X86/X86InstrFPStack.td\nM | /llvm/trunk/test/CodeGen/X86/fp-cvt.ll\nM | /llvm/trunk/test/CodeGen/X86/scalar-fp-to-i64.ll\n"}, {"commit_id": "355226", "date": "2019-03-01T20:58:04.478165Z", "author": "probinson", "msg": "[DWARF] Make -g with empty assembler source work better.\n\nThis was sometimes causing clang or llvm-mc to crash, and in other\ncases could emit a bogus DWARF line-table header. I did an interim\npatch in r352541; this patch should be a cleaner and more complete\nfix, and retains the test.\n\nAddresses PR40538.\n\nDifferential Revision: https://reviews.llvm.org/D58750", "modified": "M | /cfe/trunk/test/Misc/cc1as-asm-debug.s\nM | /cfe/trunk/tools/driver/cc1as_main.cpp\nM | /llvm/trunk/include/llvm/MC/MCContext.h\nM | /llvm/trunk/include/llvm/MC/MCDwarf.h\nM | /llvm/trunk/lib/MC/MCContext.cpp\nM | /llvm/trunk/lib/MC/MCDwarf.cpp\nM | /llvm/trunk/lib/MC/MCParser/AsmParser.cpp\nM | /llvm/trunk/test/MC/ELF/debug-prefix-map.s\nM | /llvm/trunk/tools/llvm-mc/llvm-mc.cpp\n"}, {"commit_id": "355235", "date": "2019-03-01T22:28:13.193617Z", "author": "probinson", "msg": "Try to fix Windows bots after r355226.\n\nWindows has two path separator characters.", "modified": "M | /llvm/trunk/lib/MC/MCContext.cpp\n"}, {"commit_id": "355292", "date": "2019-03-03T18:59:33.840635Z", "author": "spatel", "msg": "[ValueTracking] do not try to peek through bitcasts in computeKnownBitsFromAssume()\n\nThere are no tests for this case, and I'm not sure how it could ever work,\nso I'm just removing this option from the matcher. This should fix PR40940:\nhttps://bugs.llvm.org/show_bug.cgi?id=40940", "modified": "M | /llvm/trunk/lib/Analysis/ValueTracking.cpp\nM | /llvm/trunk/test/Transforms/InstCombine/assume.ll\n"}, {"commit_id": "355301", "date": "2019-03-04T04:38:58.769215Z", "author": "davide", "msg": "[InstCombine] Mark debug values as unavailable after DCE.\n\nFixes PR40838.", "modified": "M | /llvm/trunk/lib/Transforms/InstCombine/InstructionCombining.cpp\nA | /llvm/trunk/test/Transforms/InstCombine/unavailable-debug.ll\n"}, {"commit_id": "355852", "date": "2019-03-11T18:31:28.012917Z", "author": "modocache", "msg": "[coroutines][PR40979] Ignore unreachable uses across suspend points\n\nSummary:\nDepends on https://reviews.llvm.org/D59069.\n\nhttps://bugs.llvm.org/show_bug.cgi?id=40979 describes a bug in which the\n-coro-split pass would assert that a use was across a suspend point from\na definition. Normally this would mean that a value would \"spill\" across\na suspend point and thus need to be stored in the coroutine frame. However,\nin this case the use was unreachable, and so it would not be necessary\nto store the definition on the frame.\n\nTo prevent the assert, simply remove unreachable basic blocks from a\ncoroutine function before computing spills. This avoids the assert\nreported in PR40979.\n\nReviewers: GorNishanov, tks2103\n\nReviewed By: GorNishanov\n\nSubscribers: EricWF, jdoerfert, llvm-commits, lewissbaker\n\nTags: #llvm\n\nDifferential Revision: https://reviews.llvm.org/D59068", "modified": "M | /llvm/trunk/lib/Transforms/Coroutines/CoroSplit.cpp\nA | /llvm/trunk/test/Transforms/Coroutines/coro-frame-unreachable.ll\n"}, {"commit_id": "356300", "date": "2019-03-15T21:17:53.885403Z", "author": "lebedevri", "msg": "[X86] Promote i8 CMOV's (PR40965)\n\nSummary:\n@mclow.lists brought up this issue up in IRC, it came up during\nimplementation of libc++ `std::midpoint()` implementation (D59099)\nhttps://godbolt.org/z/oLrHBP\n\nCurrently LLVM X86 backend only promotes i8 CMOV if it came from 2x`trunc`.\nThis differential proposes to always promote i8 CMOV.\n\nThere are several concerns here:\n* Is this actually more performant, or is it just the ASM that looks cuter?\n* Does this result in partial register stalls?\n* What about branch predictor?\n\n# Indeed, performance should be the main point here.\nLet's look at a simple microbenchmark: {F8412076}\n```\n#include \"benchmark/benchmark.h\"\n\n#include <algorithm>\n#include <cmath>\n#include <cstdint>\n#include <iterator>\n#include <limits>\n#include <random>\n#include <type_traits>\n#include <utility>\n#include <vector>\n\n// Future preliminary libc++ code, from Marshall Clow.\nnamespace std {\ntemplate <class _Tp>\n__inline _Tp midpoint(_Tp __a, _Tp __b) noexcept {\n  using _Up = typename std::make_unsigned<typename remove_cv<_Tp>::type>::type;\n\n  int __sign = 1;\n  _Up __m = __a;\n  _Up __M = __b;\n  if (__a > __b) {\n    __sign = -1;\n    __m = __b;\n    __M = __a;\n  }\n  return __a + __sign * _Tp(_Up(__M - __m) >> 1);\n}\n}  // namespace std\n\ntemplate <typename T>\nstd::vector<T> getVectorOfRandomNumbers(size_t count) {\n  std::random_device rd;\n  std::mt19937 gen(rd());\n  std::uniform_int_distribution<T> dis(std::numeric_limits<T>::min(),\n                                       std::numeric_limits<T>::max());\n  std::vector<T> v;\n  v.reserve(count);\n  std::generate_n(std::back_inserter(v), count,\n                  [&dis, &gen]() { return dis(gen); });\n  assert(v.size() == count);\n  return v;\n}\n\nstruct RandRand {\n  template <typename T>\n  static std::pair<std::vector<T>, std::vector<T>> Gen(size_t count) {\n    return std::make_pair(getVectorOfRandomNumbers<T>(count),\n                          getVectorOfRandomNumbers<T>(count));\n  }\n};\nstruct ZeroRand {\n  template <typename T>\n  static std::pair<std::vector<T>, std::vector<T>> Gen(size_t count) {\n    return std::make_pair(std::vector<T>(count, T(0)),\n                          getVectorOfRandomNumbers<T>(count));\n  }\n};\n\ntemplate <class T, class Gen>\nvoid BM_StdMidpoint(benchmark::State& state) {\n  const size_t Length = state.range(0);\n\n  const std::pair<std::vector<T>, std::vector<T>> Data =\n      Gen::template Gen<T>(Length);\n  const std::vector<T>& a = Data.first;\n  const std::vector<T>& b = Data.second;\n  assert(a.size() == Length && b.size() == a.size());\n\n  benchmark::ClobberMemory();\n  benchmark::DoNotOptimize(a);\n  benchmark::DoNotOptimize(a.data());\n  benchmark::DoNotOptimize(b);\n  benchmark::DoNotOptimize(b.data());\n\n  for (auto _ : state) {\n    for (size_t i = 0; i < Length; i++) {\n      const auto calculated = std::midpoint(a[i], b[i]);\n      benchmark::DoNotOptimize(calculated);\n    }\n  }\n  state.SetComplexityN(Length);\n  state.counters[\"midpoints\"] =\n      benchmark::Counter(Length, benchmark::Counter::kIsIterationInvariant);\n  state.counters[\"midpoints/sec\"] =\n      benchmark::Counter(Length, benchmark::Counter::kIsIterationInvariantRate);\n  const size_t BytesRead = 2 * sizeof(T) * Length;\n  state.counters[\"bytes_read/iteration\"] =\n      benchmark::Counter(BytesRead, benchmark::Counter::kDefaults,\n                         benchmark::Counter::OneK::kIs1024);\n  state.counters[\"bytes_read/sec\"] = benchmark::Counter(\n      BytesRead, benchmark::Counter::kIsIterationInvariantRate,\n      benchmark::Counter::OneK::kIs1024);\n}\n\ntemplate <typename T>\nstatic void CustomArguments(benchmark::internal::Benchmark* b) {\n  const size_t L2SizeBytes = 2 * 1024 * 1024;\n  // What is the largest range we can check to always fit within given L2 cache?\n  const size_t MaxLen = L2SizeBytes / /*total bufs*/ 2 /\n                        /*maximal elt size*/ sizeof(T) / /*safety margin*/ 2;\n  b->RangeMultiplier(2)->Range(1, MaxLen)->Complexity(benchmark::oN);\n}\n\n// Both of the values are random.\n// The comparison is unpredictable.\nBENCHMARK_TEMPLATE(BM_StdMidpoint, int32_t, RandRand)\n    ->Apply(CustomArguments<int32_t>);\nBENCHMARK_TEMPLATE(BM_StdMidpoint, uint32_t, RandRand)\n    ->Apply(CustomArguments<uint32_t>);\nBENCHMARK_TEMPLATE(BM_StdMidpoint, int64_t, RandRand)\n    ->Apply(CustomArguments<int64_t>);\nBENCHMARK_TEMPLATE(BM_StdMidpoint, uint64_t, RandRand)\n    ->Apply(CustomArguments<uint64_t>);\nBENCHMARK_TEMPLATE(BM_StdMidpoint, int16_t, RandRand)\n    ->Apply(CustomArguments<int16_t>);\nBENCHMARK_TEMPLATE(BM_StdMidpoint, uint16_t, RandRand)\n    ->Apply(CustomArguments<uint16_t>);\nBENCHMARK_TEMPLATE(BM_StdMidpoint, int8_t, RandRand)\n    ->Apply(CustomArguments<int8_t>);\nBENCHMARK_TEMPLATE(BM_StdMidpoint, uint8_t, RandRand)\n    ->Apply(CustomArguments<uint8_t>);\n\n// One value is always zero, and another is bigger or equal than zero.\n// The comparison is predictable.\nBENCHMARK_TEMPLATE(BM_StdMidpoint, uint32_t, ZeroRand)\n    ->Apply(CustomArguments<uint32_t>);\nBENCHMARK_TEMPLATE(BM_StdMidpoint, uint64_t, ZeroRand)\n    ->Apply(CustomArguments<uint64_t>);\nBENCHMARK_TEMPLATE(BM_StdMidpoint, uint16_t, ZeroRand)\n    ->Apply(CustomArguments<uint16_t>);\nBENCHMARK_TEMPLATE(BM_StdMidpoint, uint8_t, ZeroRand)\n    ->Apply(CustomArguments<uint8_t>);\n```\n\n```\n$ ~/src/googlebenchmark/tools/compare.py --no-utest benchmarks ./llvm-cmov-bench-OLD ./llvm-cmov-bench-NEW\nRUNNING: ./llvm-cmov-bench-OLD --benchmark_out=/tmp/tmp5a5qjm\n2019-03-06 21:53:31\nRunning ./llvm-cmov-bench-OLD\nRun on (8 X 4000 MHz CPU s)\nCPU Caches:\n  L1 Data 16K (x8)\n  L1 Instruction 64K (x4)\n  L2 Unified 2048K (x4)\n  L3 Unified 8192K (x1)\nLoad Average: 1.78, 1.81, 1.36\n----------------------------------------------------------------------------------------------------\nBenchmark                                          Time             CPU   Iterations UserCounters<...>\n----------------------------------------------------------------------------------------------------\n<...>\nBM_StdMidpoint<int32_t, RandRand>/131072      300398 ns       300404 ns         2330 bytes_read/iteration=1024k bytes_read/sec=3.25083G/s midpoints=305.398M midpoints/sec=436.319M/s\nBM_StdMidpoint<int32_t, RandRand>_BigO          2.29 N          2.29 N\nBM_StdMidpoint<int32_t, RandRand>_RMS              2 %             2 %\n<...>\nBM_StdMidpoint<uint32_t, RandRand>/131072     300433 ns       300433 ns         2330 bytes_read/iteration=1024k bytes_read/sec=3.25052G/s midpoints=305.398M midpoints/sec=436.278M/s\nBM_StdMidpoint<uint32_t, RandRand>_BigO         2.29 N          2.29 N\nBM_StdMidpoint<uint32_t, RandRand>_RMS             2 %             2 %\n<...>\nBM_StdMidpoint<int64_t, RandRand>/65536       169857 ns       169858 ns         4121 bytes_read/iteration=1024k bytes_read/sec=5.74929G/s midpoints=270.074M midpoints/sec=385.828M/s\nBM_StdMidpoint<int64_t, RandRand>_BigO          2.59 N          2.59 N\nBM_StdMidpoint<int64_t, RandRand>_RMS              3 %             3 %\n<...>\nBM_StdMidpoint<uint64_t, RandRand>/65536      169770 ns       169771 ns         4125 bytes_read/iteration=1024k bytes_read/sec=5.75223G/s midpoints=270.336M midpoints/sec=386.026M/s\nBM_StdMidpoint<uint64_t, RandRand>_BigO         2.59 N          2.59 N\nBM_StdMidpoint<uint64_t, RandRand>_RMS             3 %             3 %\n<...>\nBM_StdMidpoint<int16_t, RandRand>/262144      591169 ns       591179 ns         1182 bytes_read/iteration=1024k bytes_read/sec=1.65189G/s midpoints=309.854M midpoints/sec=443.426M/s\nBM_StdMidpoint<int16_t, RandRand>_BigO          2.25 N          2.25 N\nBM_StdMidpoint<int16_t, RandRand>_RMS              1 %             1 %\n<...>\nBM_StdMidpoint<uint16_t, RandRand>/262144     591264 ns       591274 ns         1184 bytes_read/iteration=1024k bytes_read/sec=1.65162G/s midpoints=310.378M midpoints/sec=443.354M/s\nBM_StdMidpoint<uint16_t, RandRand>_BigO         2.25 N          2.25 N\nBM_StdMidpoint<uint16_t, RandRand>_RMS             1 %             1 %\n<...>\nBM_StdMidpoint<int8_t, RandRand>/524288      2983669 ns      2983689 ns          235 bytes_read/iteration=1024k bytes_read/sec=335.156M/s midpoints=123.208M midpoints/sec=175.718M/s\nBM_StdMidpoint<int8_t, RandRand>_BigO           5.69 N          5.69 N\nBM_StdMidpoint<int8_t, RandRand>_RMS               0 %             0 %\n<...>\nBM_StdMidpoint<uint8_t, RandRand>/524288     2668398 ns      2668419 ns          262 bytes_read/iteration=1024k bytes_read/sec=374.754M/s midpoints=137.363M midpoints/sec=196.479M/s\nBM_StdMidpoint<uint8_t, RandRand>_BigO          5.09 N          5.09 N\nBM_StdMidpoint<uint8_t, RandRand>_RMS              0 %             0 %\n<...>\nBM_StdMidpoint<uint32_t, ZeroRand>/131072     300887 ns       300887 ns         2331 bytes_read/iteration=1024k bytes_read/sec=3.24561G/s midpoints=305.529M midpoints/sec=435.619M/s\nBM_StdMidpoint<uint32_t, ZeroRand>_BigO         2.29 N          2.29 N\nBM_StdMidpoint<uint32_t, ZeroRand>_RMS             2 %             2 %\n<...>\nBM_StdMidpoint<uint64_t, ZeroRand>/65536      169634 ns       169634 ns         4102 bytes_read/iteration=1024k bytes_read/sec=5.75688G/s midpoints=268.829M midpoints/sec=386.338M/s\nBM_StdMidpoint<uint64_t, ZeroRand>_BigO         2.59 N          2.59 N\nBM_StdMidpoint<uint64_t, ZeroRand>_RMS             3 %             3 %\n<...>\nBM_StdMidpoint<uint16_t, ZeroRand>/262144     592252 ns       592255 ns         1182 bytes_read/iteration=1024k bytes_read/sec=1.64889G/s midpoints=309.854M midpoints/sec=442.62M/s\nBM_StdMidpoint<uint16_t, ZeroRand>_BigO         2.26 N          2.26 N\nBM_StdMidpoint<uint16_t, ZeroRand>_RMS             1 %             1 %\n<...>\nBM_StdMidpoint<uint8_t, ZeroRand>/524288      987295 ns       987309 ns          711 bytes_read/iteration=1024k bytes_read/sec=1012.85M/s midpoints=372.769M midpoints/sec=531.028M/s\nBM_StdMidpoint<uint8_t, ZeroRand>_BigO          1.88 N          1.88 N\nBM_StdMidpoint<uint8_t, ZeroRand>_RMS              1 %             1 %\nRUNNING: ./llvm-cmov-bench-NEW --benchmark_out=/tmp/tmpPvwpfW\n2019-03-06 21:56:58\nRunning ./llvm-cmov-bench-NEW\nRun on (8 X 4000 MHz CPU s)\nCPU Caches:\n  L1 Data 16K (x8)\n  L1 Instruction 64K (x4)\n  L2 Unified 2048K (x4)\n  L3 Unified 8192K (x1)\nLoad Average: 1.17, 1.46, 1.30\n----------------------------------------------------------------------------------------------------\nBenchmark                                          Time             CPU   Iterations UserCounters<...>\n----------------------------------------------------------------------------------------------------\n<...>\nBM_StdMidpoint<int32_t, RandRand>/131072      300878 ns       300880 ns         2324 bytes_read/iteration=1024k bytes_read/sec=3.24569G/s midpoints=304.611M midpoints/sec=435.629M/s\nBM_StdMidpoint<int32_t, RandRand>_BigO          2.29 N          2.29 N\nBM_StdMidpoint<int32_t, RandRand>_RMS              2 %             2 %\n<...>\nBM_StdMidpoint<uint32_t, RandRand>/131072     300231 ns       300226 ns         2330 bytes_read/iteration=1024k bytes_read/sec=3.25276G/s midpoints=305.398M midpoints/sec=436.578M/s\nBM_StdMidpoint<uint32_t, RandRand>_BigO         2.29 N          2.29 N\nBM_StdMidpoint<uint32_t, RandRand>_RMS             2 %             2 %\n<...>\nBM_StdMidpoint<int64_t, RandRand>/65536       170819 ns       170777 ns         4115 bytes_read/iteration=1024k bytes_read/sec=5.71835G/s midpoints=269.681M midpoints/sec=383.752M/s\nBM_StdMidpoint<int64_t, RandRand>_BigO          2.60 N          2.60 N\nBM_StdMidpoint<int64_t, RandRand>_RMS              3 %             3 %\n<...>\nBM_StdMidpoint<uint64_t, RandRand>/65536      171705 ns       171708 ns         4106 bytes_read/iteration=1024k bytes_read/sec=5.68733G/s midpoints=269.091M midpoints/sec=381.671M/s\nBM_StdMidpoint<uint64_t, RandRand>_BigO         2.62 N          2.62 N\nBM_StdMidpoint<uint64_t, RandRand>_RMS             3 %             3 %\n<...>\nBM_StdMidpoint<int16_t, RandRand>/262144      592510 ns       592516 ns         1182 bytes_read/iteration=1024k bytes_read/sec=1.64816G/s midpoints=309.854M midpoints/sec=442.425M/s\nBM_StdMidpoint<int16_t, RandRand>_BigO          2.26 N          2.26 N\nBM_StdMidpoint<int16_t, RandRand>_RMS              1 %             1 %\n<...>\nBM_StdMidpoint<uint16_t, RandRand>/262144     614823 ns       614823 ns         1180 bytes_read/iteration=1024k bytes_read/sec=1.58836G/s midpoints=309.33M midpoints/sec=426.373M/s\nBM_StdMidpoint<uint16_t, RandRand>_BigO         2.33 N          2.33 N\nBM_StdMidpoint<uint16_t, RandRand>_RMS             4 %             4 %\n<...>\nBM_StdMidpoint<int8_t, RandRand>/524288      1073181 ns      1073201 ns          650 bytes_read/iteration=1024k bytes_read/sec=931.791M/s midpoints=340.787M midpoints/sec=488.527M/s\nBM_StdMidpoint<int8_t, RandRand>_BigO           2.05 N          2.05 N\nBM_StdMidpoint<int8_t, RandRand>_RMS               1 %             1 %\nBM_StdMidpoint<uint8_t, RandRand>/524288     1071010 ns      1071020 ns          653 bytes_read/iteration=1024k bytes_read/sec=933.689M/s midpoints=342.36M midpoints/sec=489.522M/s\nBM_StdMidpoint<uint8_t, RandRand>_BigO          2.05 N          2.05 N\nBM_StdMidpoint<uint8_t, RandRand>_RMS              1 %             1 %\n<...>\nBM_StdMidpoint<uint32_t, ZeroRand>/131072     300413 ns       300416 ns         2330 bytes_read/iteration=1024k bytes_read/sec=3.2507G/s midpoints=305.398M midpoints/sec=436.302M/s\nBM_StdMidpoint<uint32_t, ZeroRand>_BigO         2.29 N          2.29 N\nBM_StdMidpoint<uint32_t, ZeroRand>_RMS             2 %             2 %\n<...>\nBM_StdMidpoint<uint64_t, ZeroRand>/65536      169667 ns       169669 ns         4123 bytes_read/iteration=1024k bytes_read/sec=5.75568G/s midpoints=270.205M midpoints/sec=386.257M/s\nBM_StdMidpoint<uint64_t, ZeroRand>_BigO         2.59 N          2.59 N\nBM_StdMidpoint<uint64_t, ZeroRand>_RMS             3 %             3 %\n<...>\nBM_StdMidpoint<uint16_t, ZeroRand>/262144     591396 ns       591404 ns         1184 bytes_read/iteration=1024k bytes_read/sec=1.65126G/s midpoints=310.378M midpoints/sec=443.257M/s\nBM_StdMidpoint<uint16_t, ZeroRand>_BigO         2.26 N          2.26 N\nBM_StdMidpoint<uint16_t, ZeroRand>_RMS             1 %             1 %\n<...>\nBM_StdMidpoint<uint8_t, ZeroRand>/524288     1069421 ns      1069413 ns          655 bytes_read/iteration=1024k bytes_read/sec=935.092M/s midpoints=343.409M midpoints/sec=490.258M/s\nBM_StdMidpoint<uint8_t, ZeroRand>_BigO          2.04 N          2.04 N\nBM_StdMidpoint<uint8_t, ZeroRand>_RMS              0 %             0 %\nComparing ./llvm-cmov-bench-OLD to ./llvm-cmov-bench-NEW\nBenchmark                                                   Time             CPU      Time Old      Time New       CPU Old       CPU New\n----------------------------------------------------------------------------------------------------------------------------------------\n<...>\nBM_StdMidpoint<int32_t, RandRand>/131072                 +0.0016         +0.0016        300398        300878        300404        300880\n<...>\nBM_StdMidpoint<uint32_t, RandRand>/131072                -0.0007         -0.0007        300433        300231        300433        300226\n<...>\nBM_StdMidpoint<int64_t, RandRand>/65536                  +0.0057         +0.0054        169857        170819        169858        170777\n<...>\nBM_StdMidpoint<uint64_t, RandRand>/65536                 +0.0114         +0.0114        169770        171705        169771        171708\n<...>\nBM_StdMidpoint<int16_t, RandRand>/262144                 +0.0023         +0.0023        591169        592510        591179        592516\n<...>\nBM_StdMidpoint<uint16_t, RandRand>/262144                +0.0398         +0.0398        591264        614823        591274        614823\n<...>\nBM_StdMidpoint<int8_t, RandRand>/524288                  -0.6403         -0.6403       2983669       1073181       2983689       1073201\n<...>\nBM_StdMidpoint<uint8_t, RandRand>/524288                 -0.5986         -0.5986       2668398       1071010       2668419       1071020\n<...>\nBM_StdMidpoint<uint32_t, ZeroRand>/131072                -0.0016         -0.0016        300887        300413        300887        300416\n<...>\nBM_StdMidpoint<uint64_t, ZeroRand>/65536                 +0.0002         +0.0002        169634        169667        169634        169669\n<...>\nBM_StdMidpoint<uint16_t, ZeroRand>/262144                -0.0014         -0.0014        592252        591396        592255        591404\n<...>\nBM_StdMidpoint<uint8_t, ZeroRand>/524288                 +0.0832         +0.0832        987295       1069421        987309       1069413\n```\n\nWhat can we tell from the benchmark?\n* `BM_StdMidpoint<[u]int8_t, RandRand>` indeed has the worst performance.\n* All `BM_StdMidpoint<uint{8,16,32}_t, ZeroRand>` are all performant, even the 8-bit case.\n  That is because there we are computing mid point between zero and some random number,\n  thus if the branch predictor is in use, it is in optimal situation.\n* Promoting 8-bit CMOV did improve performance of `BM_StdMidpoint<[u]int8_t, RandRand>`, by -59%..-64%.\n\n# What about branch predictor?\n* `BM_StdMidpoint<uint8_t, ZeroRand>` was faster than `BM_StdMidpoint<uint{16,32,64}_t, ZeroRand>`,\n  which may mean that well-predicted branch is better than `cmov`.\n* Promoting 8-bit CMOV degraded performance of `BM_StdMidpoint<uint8_t, ZeroRand>`,\n  `cmov` is up to +10% worse than well-predicted branch.\n* However, i do not believe this is a concern. If the branch is well predicted,  then the PGO\n  will also say that it is well predicted, and LLVM will happily expand cmov back into branch:\n  https://godbolt.org/z/P5ufig\n\n# What about partial register stalls?\nI'm not really able to answer that.\nWhat i can say is that if the branch is unpredictable (if it is predictable, then use PGO and you'll have branch)\nin ~50% of cases you will have to pay branch misprediction penalty.\n```\n$ grep -i MispredictPenalty X86Sched*.td\nX86SchedBroadwell.td:  let MispredictPenalty = 16;\nX86SchedHaswell.td:  let MispredictPenalty = 16;\nX86SchedSandyBridge.td:  let MispredictPenalty = 16;\nX86SchedSkylakeClient.td:  let MispredictPenalty = 14;\nX86SchedSkylakeServer.td:  let MispredictPenalty = 14;\nX86ScheduleBdVer2.td:  let MispredictPenalty = 20; // Minimum branch misdirection penalty.\nX86ScheduleBtVer2.td:  let MispredictPenalty = 14; // Minimum branch misdirection penalty\nX86ScheduleSLM.td:  let MispredictPenalty = 10;\nX86ScheduleZnver1.td:  let MispredictPenalty = 17;\n```\n.. which it can be as small as 10 cycles and as large as 20 cycles.\nPartial register stalls do not seem to be an issue for AMD CPU's.\nFor intel CPU's, they should be around ~5 cycles?\nIs that actually an issue here? I'm not sure.\n\nIn short, i'd say this is an improvement, at least on this microbenchmark.\n\nFixes [[ https://bugs.llvm.org/show_bug.cgi?id=40965 | PR40965 ]].\n\nReviewers: craig.topper, RKSimon, spatel, andreadb, nikic\n\nReviewed By: craig.topper, andreadb\n\nSubscribers: jfb, jdoerfert, llvm-commits, mclow.lists\n\nTags: #llvm, #libc\n\nDifferential Revision: https://reviews.llvm.org/D59035", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/test/CodeGen/X86/8bit_cmov_of_trunc_promotion.ll\nM | /llvm/trunk/test/CodeGen/X86/cmov-promotion.ll\nM | /llvm/trunk/test/CodeGen/X86/cmov.ll\nM | /llvm/trunk/test/CodeGen/X86/cmovcmov.ll\nM | /llvm/trunk/test/CodeGen/X86/copy-eflags.ll\nM | /llvm/trunk/test/CodeGen/X86/fast-isel-select-pseudo-cmov.ll\nM | /llvm/trunk/test/CodeGen/X86/fshl.ll\nM | /llvm/trunk/test/CodeGen/X86/fshr.ll\nM | /llvm/trunk/test/CodeGen/X86/i386-shrink-wrapping.ll\nM | /llvm/trunk/test/CodeGen/X86/midpoint-int.ll\nM | /llvm/trunk/test/CodeGen/X86/pr5145.ll\nM | /llvm/trunk/test/CodeGen/X86/sadd_sat.ll\nM | /llvm/trunk/test/CodeGen/X86/sadd_sat_vec.ll\nM | /llvm/trunk/test/CodeGen/X86/sat-add.ll\nM | /llvm/trunk/test/CodeGen/X86/select.ll\nM | /llvm/trunk/test/CodeGen/X86/select_const.ll\nM | /llvm/trunk/test/CodeGen/X86/ssub_sat.ll\nM | /llvm/trunk/test/CodeGen/X86/ssub_sat_vec.ll\nM | /llvm/trunk/test/CodeGen/X86/uadd_sat.ll\nM | /llvm/trunk/test/CodeGen/X86/uadd_sat_vec.ll\nM | /llvm/trunk/test/CodeGen/X86/usub_sat.ll\nM | /llvm/trunk/test/CodeGen/X86/usub_sat_vec.ll\nM | /llvm/trunk/test/CodeGen/X86/x86-shrink-wrapping.ll\n"}, {"commit_id": "356888", "date": "2019-03-25T11:54:02.272104Z", "author": "stulova", "msg": "[OpenCL] Allow addr space spelling without __ prefix in C++.\n\nFor backwards compatibility we allow alternative spelling of address\nspaces - 'private', 'local', 'global', 'constant', 'generic'.\n\nIn order to accept 'private' correctly, parsing has been changed to\nunderstand different use cases - access specifier vs address space.\n\nFixes PR40707 and PR41011!\n\nDifferential Revision: https://reviews.llvm.org/D59603\n\n", "modified": "M | /cfe/trunk/include/clang/Basic/TokenKinds.def\nM | /cfe/trunk/lib/Parse/ParseDecl.cpp\nM | /cfe/trunk/lib/Parse/ParseDeclCXX.cpp\nM | /cfe/trunk/lib/Parse/ParseTentative.cpp\nM | /cfe/trunk/test/Parser/opencl-cxx-keywords.cl\n"}, {"commit_id": "357552", "date": "2019-04-03T01:08:35.941119Z", "author": "azakai", "msg": "[WebAssembly] Add Emscripten OS definition + small_printf\n\nThe Emscripten OS provides a definition of __EMSCRIPTEN__, and also that it\nsupports iprintf optimizations.\n\nAlso define small_printf optimizations, which is a printf with float support\nbut not long double (which in wasm can be useful since long doubles are 128\nbit and force linking of float128 emulation code). This part is based on\nsunfish's https://reviews.llvm.org/D57620 (which can't land yet since\nthe WASI integration isn't ready yet).\n\nDifferential Revision: https://reviews.llvm.org/D60167", "modified": "M | /cfe/trunk/lib/Basic/Targets/OSTargets.h\nM | /cfe/trunk/lib/Basic/Targets.cpp\nM | /llvm/trunk/include/llvm/ADT/Triple.h\nM | /llvm/trunk/include/llvm/Analysis/TargetLibraryInfo.def\nM | /llvm/trunk/lib/Analysis/TargetLibraryInfo.cpp\nM | /llvm/trunk/lib/Support/Triple.cpp\nM | /llvm/trunk/lib/Transforms/Utils/SimplifyLibCalls.cpp\n"}, {"commit_id": "357655", "date": "2019-04-04T00:11:21.071924Z", "author": "rnk", "msg": "Make ManagedStatic constexpr constructible\n\nApparently it needs member initializers so that it can be constructed in\na constexpr context. I explained my investigation of this in PR41367.", "modified": "M | /llvm/trunk/include/llvm/Support/ManagedStatic.h\n"}, {"commit_id": "357685", "date": "2019-04-04T11:12:30.503450Z", "author": "rksimon", "msg": "Revert rL357655 and rL357656 from llvm/trunk:\nFix minor innaccuracy in previous comment on ManagedStaticBase\n........\nMake ManagedStatic constexpr constructible\n\nApparently it needs member initializers so that it can be constructed in\na constexpr context. I explained my investigation of this in PR41367.\n........\nCauses vs2017 debug llvm-tblgen to fail with \"Unknown command line argument\" errors - similar to the vs2019 error discussed on PR41367 without the patch....", "modified": "M | /llvm/trunk/include/llvm/Support/ManagedStatic.h\n"}, {"commit_id": "357714", "date": "2019-04-04T18:30:07.819436Z", "author": "rnk", "msg": "Ensure that ManagedStatic is constant initialized in MSVC 2017 & 2019\n\nFixes PR41367.\n\nThis effectively relands r357655 with a workaround for MSVC 2017.\n\nI tried various approaches with unions, but I ended up going with this\nifdef approach because it lets us write the proper C++11 code that we\nwant to write, with a separate workaround that we can delete when we\ndrop MSVC 2017 support.\n\nThis also adds LLVM_REQUIRE_CONSTANT_INITIALIZATION, which wraps\n[[clang::require_constant_initialization]]. This actually detected a\nminor issue when using clang-cl where clang wasn't able to use the\nconstexpr constructor in MSVC's STL, so I switched back to using the\ndefault ctor of std::atomic<void*>.", "modified": "M | /llvm/trunk/include/llvm/Support/Compiler.h\nM | /llvm/trunk/include/llvm/Support/ManagedStatic.h\nM | /llvm/trunk/lib/Support/CommandLine.cpp\n"}, {"commit_id": "358137", "date": "2019-04-10T21:18:44.956864Z", "author": "adrian", "msg": "Fix undefined behavior in DWARFASTParser::ParseChildArrayInfo()\n\nPR40827: https://bugs.llvm.org/show_bug.cgi?id=40827\n<rdar://problem/48729057>", "modified": "M | /lldb/trunk/include/lldb/Symbol/SymbolFile.h\nM | /lldb/trunk/packages/Python/lldbsuite/test/lang/c/array_types/TestArrayTypes.py\n"}, {"commit_id": "358761", "date": "2019-04-19T15:31:11.311216Z", "author": "spatel", "msg": "[SelectionDAG] soften splat mask assert/unreachable (PR41535)\n\nThese are general queries, so they should not die when given\na degenerate input like an all undef mask. Callers should be\nable to deal with an op that will eventually be simplified away.", "modified": "M | /llvm/trunk/include/llvm/CodeGen/SelectionDAGNodes.h\nM | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAG.cpp\nA | /llvm/trunk/test/CodeGen/AArch64/shuffle-mask-legal.ll\n"}, {"commit_id": "359048", "date": "2019-04-23T23:48:00.646978Z", "author": "rsmith", "msg": "C++ DR2387: a variable template declared wtih (or instantiated with) a\nconst-qualified type is not implicitly given internal linkage. But a\nvariable template declared 'static' is.", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/lib/AST/Decl.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/test/CXX/drs/dr0xx.cpp\nM | /cfe/trunk/test/CXX/drs/dr17xx.cpp\nA | /cfe/trunk/test/CXX/drs/dr23xx.cpp\nM | /cfe/trunk/test/CXX/module/module.interface/p3.cpp\nM | /cfe/trunk/test/CXX/module/module.interface/p5.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx1y-variable-template-linkage.cpp\nM | /cfe/trunk/test/SemaCXX/PR10177.cpp\nM | /cfe/trunk/test/SemaCXX/warn-unused-filescoped.cpp\nM | /cfe/trunk/test/SemaCXX/warn-unused-variables.cpp\nM | /cfe/trunk/www/cxx_dr_status.html\n"}, {"commit_id": "359076", "date": "2019-04-24T08:50:24.078550Z", "author": "ibiryukov", "msg": "Revert r359048: C++ DR2387: a variable template declared wthi\n\nThe change breaks libc++ with the follwing error:\n\nIn file included from valarray:4:\n.../include/c++/v1/valarray:1062:60: error: explicit instantiation declaration of 'valarray<_Tp>' with internal linkage\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS valarray<size_t>::valarray(size_t))\n                                                           ^\n.../include/c++/v1/valarray:1063:60: error: explicit instantiation declaration of '~valarray<_Tp>' with internal linkage\n_LIBCPP_EXTERN_TEMPLATE(_LIBCPP_FUNC_VIS valarray<size_t>::~valarray())\n", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/lib/AST/Decl.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/test/CXX/drs/dr0xx.cpp\nM | /cfe/trunk/test/CXX/drs/dr17xx.cpp\nD | /cfe/trunk/test/CXX/drs/dr23xx.cpp\nM | /cfe/trunk/test/CXX/module/module.interface/p3.cpp\nM | /cfe/trunk/test/CXX/module/module.interface/p5.cpp\nM | /cfe/trunk/test/CodeGenCXX/cxx1y-variable-template-linkage.cpp\nM | /cfe/trunk/test/SemaCXX/PR10177.cpp\nM | /cfe/trunk/test/SemaCXX/warn-unused-filescoped.cpp\nM | /cfe/trunk/test/SemaCXX/warn-unused-variables.cpp\nM | /cfe/trunk/www/cxx_dr_status.html\n"}, {"commit_id": "359135", "date": "2019-04-24T20:13:23.941048Z", "author": "rnk", "msg": "Try once more to ensure constant initializaton of ManagedStatics\n\nFirst, use the old style of linker initialization for MSVC 2019 in\naddition to 2017. MSVC 2019 emits a dynamic initializer for\nManagedStatic when compiled in debug mode, and according to zturner,\nalso sometimes in release mode. I wasn't able to reproduce that, but it\nseems best to stick with the old code that works.\n\nWhen clang is using the MSVC STL, we have to give ManagedStatic a\nconstexpr constructor that fully zero initializes all fields, otherwise\nit emits a dynamic initializer. The MSVC STL implementation of\nstd::atomic has a non-trivial (but constexpr) default constructor that\nzero initializes the atomic value. Because one of the fields has a\nnon-trivial constructor, ManagedStatic ends up with a non-trivial ctor.\nThe ctor is not constexpr, so clang ends up emitting a dynamic\ninitializer, even though it simply does zero initialization. To make it\nconstexpr, we must initialize all fields of the ManagedStatic.\n\nHowever, while the constructor that takes a pointer is marked constexpr,\nclang says it does not evaluate to a constant because it contains a cast\nfrom a pointer to an integer. I filed this as:\nhttps://developercommunity.visualstudio.com/content/problem/545566/stdatomic-value-constructor-is-not-actually-conste.html\n\nOnce we do that, we can add back the\nLLVM_REQUIRE_CONSTANT_INITIALIZATION marker, and so far as I'm aware it\ncompiles successfully on all supported targets.", "modified": "M | /llvm/trunk/include/llvm/Support/ManagedStatic.h\nM | /llvm/trunk/lib/Support/CommandLine.cpp\n"}, {"commit_id": "359426", "date": "2019-04-29T09:13:16.251855Z", "author": "jmorse", "msg": "[DebugInfo] Terminate more location-list ranges at the end of blocks\n\nThis patch fixes PR40795, where constant-valued variable locations can\n\"leak\" into blocks placed at higher addresses. The root of this is that\nDbgEntityHistoryCalculator terminates all register variable locations at\nthe end of each block, but not constant-value variable locations.\n\nFixing this requires constant-valued DBG_VALUE instructions to be\nbroadcast into all blocks where the variable location remains valid, as\ndocumented in the LiveDebugValues section of SourceLevelDebugging.rst,\nand correct termination in DbgEntityHistoryCalculator.\n\nDifferential Revision: https://reviews.llvm.org/D59431\n", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp\nM | /llvm/trunk/lib/CodeGen/LiveDebugValues.cpp\nM | /llvm/trunk/test/DebugInfo/COFF/pieces.ll\nM | /llvm/trunk/test/DebugInfo/MIR/AArch64/implicit-def-dead-scope.mir\nM | /llvm/trunk/test/DebugInfo/X86/fission-ranges.ll\nA | /llvm/trunk/test/DebugInfo/X86/live-debug-values-constprop.mir\n"}, {"commit_id": "359496", "date": "2019-04-29T20:25:51.914104Z", "author": "mstorsjo", "msg": "[X86] Run CFIInstrInserter on Windows if Dwarf is used\n\nThis is necessary since SVN r330706, as tail merging can include\nCFI instructions since then.\n\nThis fixes PR40322 and PR40012.\n\nDifferential Revision: https://reviews.llvm.org/D61252", "modified": "M | /llvm/trunk/lib/Target/X86/X86TargetMachine.cpp\nA | /llvm/trunk/test/CodeGen/X86/PR40322.ll\n"}, {"commit_id": "360069", "date": "2019-05-06T19:50:14.869491Z", "author": "ctopper", "msg": "[SelectionDAG][X86] Support inline assembly returning an mmx register into a type with fewer than 64 bits.\n\nIt's possible to use the 'y' mmx constraint with a type narrower than 64-bits.\n\nThis patch supports this by bitcasting the mmx type to 64-bits and then\ntruncating to the desired type.\n\nThere are probably other missing type combinations we need to support, but this\nis the case we have a bug report for.\n\nFixes PR41748.\n\nDifferential Revision: https://reviews.llvm.org/D61582", "modified": "M | /llvm/trunk/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr41748.ll\n"}, {"commit_id": "360207", "date": "2019-05-07T23:06:21.262584Z", "author": "rnk", "msg": "[COFF] Use COFF stubs for extern_weak functions\n\nSummary:\nA COFF stub indirects the reference to a symbol through memory. A\n.refptr.$sym global variable pointer is created to refer to $sym.\nTypically mingw uses these for external global variable declarations,\nbut we can use them for weak function declarations as well.\n\nUpdates the dso_local classification to add a special case for\nextern_weak symbols on COFF in both clang and LLVM.\n\nFixes PR37598\n\nReviewers: smeenai, mstorsjo\n\nSubscribers: hiraditya, cfe-commits, llvm-commits\n\nTags: #clang, #llvm\n\nDifferential Revision: https://reviews.llvm.org/D61615", "modified": "M | /cfe/trunk/lib/CodeGen/CodeGenModule.cpp\nM | /cfe/trunk/test/CodeGen/dso-local-executable.c\nM | /llvm/trunk/lib/Target/TargetMachine.cpp\nM | /llvm/trunk/lib/Target/X86/X86FastISel.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86Subtarget.cpp\nM | /llvm/trunk/test/CodeGen/X86/extern_weak.ll\n"}, {"commit_id": "360825", "date": "2019-05-15T22:27:19.069974Z", "author": "atanasyan", "msg": "[mips] Always use _LARGEFILE_SOURCE / _FILE_OFFSET_BITS for building MIPS 32-bit\n\nWhen MIPS 32-bit compiler-rt is building on 32-bit host or using 32-bit\n`DLLVM_HOST_TRIPLE` the `_LARGEFILE_SOURCE` and the `_FILE_OFFSET_BITS=64`\nmacros defined by statements from the `HandleLLVMOptions.cmake`. In case\nof building 32-bit libraries on 64-bit host using default host triple\nthese macros are not defined. As a result assertions check a consistency\nbetween the `struct_kernel_stat_sz` constant and the `struct_kernel_stat_sz`\nstart to fail.\n\nTo resolve this problem and enable building both 32/64-bit versions\nof MIPS compiler-rt libraries on 64-bit host at once always explicitly\ndefine the `_LARGEFILE_SOURCE` and the `_FILE_OFFSET_BITS=64` macros\nfor MIPS 32-bit.", "modified": "M | /compiler-rt/trunk/cmake/base-config-ix.cmake\n"}, {"commit_id": "362584", "date": "2019-06-05T06:35:10.752913Z", "author": "serge_sans_paille", "msg": "Reduce memory consumption of coverage dumps\n\nAvoiding an intermediate join operation removes the need for an\nintermediate buffer that may be quite large, as showcased by\n\n        https://bugs.llvm.org/show_bug.cgi?id=41965\n\nDifferential Revision: https://reviews.llvm.org/D62623", "modified": "M | /cfe/trunk/lib/CodeGen/CoverageMappingGen.cpp\n"}, {"commit_id": "362951", "date": "2019-06-10T15:23:46.471197Z", "author": "jmorse", "msg": "[DebugInfo] Terminate all location-lists at end of block\n\nThis commit reapplies r359426 (which was reverted in r360301 due to\nperformance problems) and rolls in D61940 to address the performance problem.\nI've combined the two to avoid creating a span of slow-performance, and to\nease reverting if more problems crop up.\n\nThe summary of D61940: This patch removes the \"ChangingRegs\" facility in\nDbgEntityHistoryCalculator, as its overapproximate nature can produce incorrect\nvariable locations. An unchanging register doesn't mean a variable doesn't\nchange its location.\n\nThe patch kills off everything that calculates the ChangingRegs vector.\nPreviously ChangingRegs spotted epilogues and marked registers as unchanging if\nthey weren't modified outside the epilogue, increasing the chance that we can\nemit a single-location variable record. Without this feature,\ndebug-loc-offset.mir and pr19307.mir become temporarily XFAIL. They'll be\nre-enabled by D62314, using the FrameDestroy flag to identify epilogues, I've\nsplit this into two steps as FrameDestroy isn't necessarily supported by all\nbackends.\n\nThe logic for terminating variable locations at the end of a basic block now\nbecomes much more enjoyably simple: we just terminate them all.\n\nOther test changes: inlined-argument.ll becomes XFAIL, but for a longer term.\nThe current algorithm for detecting that a variable has a single-location\ndoesn't work in this scenario (inlined function in multiple blocks), only other\nbugs were making this test work. fission-ranges.ll gets slightly refreshed too,\nas the location of \"p\" is now correctly determined to be a single location.\n\nDifferential Revision: https://reviews.llvm.org/D61940\n", "modified": "M | /llvm/trunk/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp\nM | /llvm/trunk/lib/CodeGen/LiveDebugValues.cpp\nM | /llvm/trunk/test/DebugInfo/AArch64/inlined-argument.ll\nM | /llvm/trunk/test/DebugInfo/AArch64/struct_by_value.ll\nM | /llvm/trunk/test/DebugInfo/COFF/fpo-shrink-wrap.ll\nM | /llvm/trunk/test/DebugInfo/COFF/pieces.ll\nM | /llvm/trunk/test/DebugInfo/MIR/AArch64/implicit-def-dead-scope.mir\nM | /llvm/trunk/test/DebugInfo/X86/debug-loc-offset.mir\nM | /llvm/trunk/test/DebugInfo/X86/fission-ranges.ll\nM | /llvm/trunk/test/DebugInfo/X86/pr19307.mir\nM | /llvm/trunk/test/DebugInfo/X86/reference-argument.ll\nM | /llvm/trunk/test/DebugInfo/X86/stack-value-piece.ll\n"}, {"commit_id": "363046", "date": "2019-06-11T10:37:20.757037Z", "author": "orlandoch", "msg": "[DebugInfo@O2][LoopVectorize] pr39024: Vectorized code linenos step through loop even after completion\n\nSummary:\nBug: https://bugs.llvm.org/show_bug.cgi?id=39024\n\nThe bug reports that a vectorized loop is stepped through 4 times and each step through the loop seemed to show a different path. I found two problems here:\n\nA) An incorrect line number on a preheader block (for.body.preheader) instruction causes a step into the loop before it begins.\nB) Instructions in the middle block have different line numbers which give the impression of another iteration.\n\nIn this patch I give all of the middle block instructions the line number of the scalar loop latch terminator branch. This seems to provide the smoothest debugging experience because the vectorized loops will always end on this line before dropping into the scalar loop. To solve problem A I have altered llvm::SplitBlockPredecessors to accommodate loop header blocks.\n\nI have set up a separate review D61933 for a fix which is required for this patch.\n\nReviewers: samsonov, vsk, aprantl, probinson, anemet, hfinkel, jmorse\n\nReviewed By: hfinkel, jmorse\n\nSubscribers: jmorse, javed.absar, eraman, kcc, bjope, jmellorcrummey, hfinkel, gbedwell, hiraditya, zzheng, llvm-commits\n\nTags: #llvm, #debug-info\n\nDifferential Revision: https://reviews.llvm.org/D60831", "modified": "M | /llvm/trunk/lib/Transforms/Utils/BasicBlockUtils.cpp\nM | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nM | /llvm/trunk/test/DebugInfo/AArch64/inlined-argument.ll\nM | /llvm/trunk/test/Transforms/LoopIdiom/bcmp-debugify-remarks.ll\nM | /llvm/trunk/test/Transforms/LoopIdiom/memset-debugify-remarks.ll\nM | /llvm/trunk/test/Transforms/LoopSimplify/dbg-loc.ll\nA | /llvm/trunk/test/Transforms/LoopSimplify/do-preheader-dbg.ll\nA | /llvm/trunk/test/Transforms/LoopSimplify/for-preheader-dbg.ll\nM | /llvm/trunk/test/Transforms/LoopUnroll/runtime-loop1.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/X86/vectorization-remarks-missed.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/X86/vectorization-remarks-profitable.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/debugloc.ll\nA | /llvm/trunk/test/Transforms/LoopVectorize/fix-reduction-dbg.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/unsafe-dep-remark.ll\n"}, {"commit_id": "363361", "date": "2019-06-14T08:40:04.076325Z", "author": "tyker", "msg": "[clang] Fixing incorrect implicit deduction guides (PR41549)\n\nSummary:\n[[ https://bugs.llvm.org/show_bug.cgi?id=41549 | bug report ]]\n\nBefore this patch, implicit deduction guides were generated from the first declaration found by lookup.\nWith this patch implicit deduction guides are generated from the definition of the class template.\nAlso added test that was previously failing.\n\nReviewers: rsmith\n\nReviewed By: rsmith\n\nSubscribers: cfe-commits, Quuxplusone\n\nTags: #clang\n\nDifferential Revision: https://reviews.llvm.org/D63072", "modified": "M | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/test/SemaCXX/cxx1z-class-template-argument-deduction.cpp\n"}, {"commit_id": "363786", "date": "2019-06-19T10:50:47.067677Z", "author": "orlandoch", "msg": "[DebugInfo@O2][LoopVectorize] pr39024: Vectorized code linenos step through loop even after completion\n\nSummary:\nBug: https://bugs.llvm.org/show_bug.cgi?id=39024\n\nThe bug reports that a vectorized loop is stepped through 4 times and each step through the loop seemed to show a different path. I found two problems here:\n\nA) An incorrect line number on a preheader block (for.body.preheader) instruction causes a step into the loop before it begins.\nB) Instructions in the middle block have different line numbers which give the impression of another iteration.\n\nIn this patch I give all of the middle block instructions the line number of the scalar loop latch terminator branch. This seems to provide the smoothest debugging experience because the vectorized loops will always end on this line before dropping into the scalar loop. To solve problem A I have altered llvm::SplitBlockPredecessors to accommodate loop header blocks.\n\nI have set up a separate review D61933 for a fix which is required for this patch.\n\nReviewers: samsonov, vsk, aprantl, probinson, anemet, hfinkel, jmorse\n\nReviewed By: hfinkel, jmorse\n\nSubscribers: jmorse, javed.absar, eraman, kcc, bjope, jmellorcrummey, hfinkel, gbedwell, hiraditya, zzheng, llvm-commits\n\nTags: #llvm, #debug-info\n\nDifferential Revision: https://reviews.llvm.org/D60831\n\nllvm-svn: 363046", "modified": "M | /llvm/trunk/lib/Transforms/Utils/BasicBlockUtils.cpp\nM | /llvm/trunk/lib/Transforms/Vectorize/LoopVectorize.cpp\nM | /llvm/trunk/test/DebugInfo/AArch64/inlined-argument.ll\nM | /llvm/trunk/test/Transforms/LoopIdiom/bcmp-debugify-remarks.ll\nM | /llvm/trunk/test/Transforms/LoopIdiom/memset-debugify-remarks.ll\nM | /llvm/trunk/test/Transforms/LoopSimplify/dbg-loc.ll\nA | /llvm/trunk/test/Transforms/LoopSimplify/do-preheader-dbg.ll\nA | /llvm/trunk/test/Transforms/LoopSimplify/for-preheader-dbg.ll\nM | /llvm/trunk/test/Transforms/LoopUnroll/runtime-loop1.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/X86/vectorization-remarks-missed.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/X86/vectorization-remarks-profitable.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/debugloc.ll\nA | /llvm/trunk/test/Transforms/LoopVectorize/fix-reduction-dbg.ll\nM | /llvm/trunk/test/Transforms/LoopVectorize/unsafe-dep-remark.ll\n"}, {"commit_id": "364109", "date": "2019-06-21T22:29:32.080237Z", "author": "erichkeane", "msg": "Ensure Target Features always_inline error happens in C++ cases.\n\nA handful of C++ cases as reported in PR42352 didn't actually give an\nerror when always_inlining with a different target feature list. This\nresulted in broken IR.", "modified": "M | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/lib/CodeGen/CGExpr.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nA | /cfe/trunk/test/CodeGenCXX/target-builtin-error.o\nA | /cfe/trunk/test/CodeGenCXX/target-features-error.cpp\n"}, {"commit_id": "364157", "date": "2019-06-23T17:42:18.323444Z", "author": "rsmith", "msg": "Fix test for 32-bit targets.", "modified": "M | /cfe/trunk/test/CodeGenCXX/tail-padding.cpp\n"}, {"commit_id": "364189", "date": "2019-06-24T15:30:20.865042Z", "author": "abataev", "msg": "[OPENMP]Relax the test checks to pacify 32bit buildbots, NFC.", "modified": "M | /cfe/trunk/test/OpenMP/parallel_codegen.cpp\n"}, {"commit_id": "364476", "date": "2019-06-26T21:16:51.936556Z", "author": "rnk", "msg": "Revert r363191 \"[MS] Pretend constexpr variable template specializations are inline\"\n\nThe next Visual Studio update will fix this issue, and it doesn't make\nsense to implement this non-conforming behavior going forward.", "modified": "M | /cfe/trunk/lib/AST/ASTContext.cpp\nD | /cfe/trunk/test/CodeGenCXX/ms-constexpr-var-template.cpp\n"}, {"commit_id": "364729", "date": "2019-07-01T07:09:34.961058Z", "author": "ctopper", "msg": "[X86] Improve the type checking fast-isel handling of vector bitcasts.\n\nWe had a bunch of vector size legality checks for the source type\nbased on feature flags, but we didn't check the destination type at\nall beyond ensuring that it was a \"simple\" type. But this allowed\nthe destination to be i128 which isn't legal.\n\nThis commit changes the code to use TLI's isTypeLegal logic in\nplace of the all the subtarget checks. Then additionally checks\nthat the source and dest are vectors.\n\nFixes 42452", "modified": "M | /llvm/trunk/lib/Target/X86/X86FastISel.cpp\nA | /llvm/trunk/test/CodeGen/X86/pr42452.ll\n"}, {"commit_id": "365740", "date": "2019-07-11T07:47:50.322163Z", "author": "sam_parker", "msg": "[ARM][ParallelDSP] Change the search for smlads\n    \nTwo functional changes have been made here:\n- Now search up from any add instruction to find the chains of\n  operations that we may turn into a smlad. This allows the\n  generation of a smlad which doesn't accumulate into a phi.\n- The search function has been corrected to stop it falsely searching\n  up through an invalid path.\n    \nThe bulk of the changes have been making the Reduction struct a class\nand making it more C++y with getters and setters.\n\nDifferential Revision: https://reviews.llvm.org/D61780\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMParallelDSP.cpp\nM | /llvm/trunk/test/CodeGen/ARM/ParallelDSP/aliasing.ll\nA | /llvm/trunk/test/CodeGen/ARM/ParallelDSP/inner-full-unroll.ll\n"}, {"commit_id": "365902", "date": "2019-07-12T14:40:18.064006Z", "author": "tstellar", "msg": "cmake: Add INSTALL_WITH_TOOLCHAIN option to add_*_library macros\n\nSummary:\nThis will simplify the macros by allowing us to remove the hard-coded\nlist of libraries that should be installed when\nLLVM_INSTALL_TOOLCHAIN_ONLY is enabled.\n\nReviewers: beanz, smeenai\n\nReviewed By: beanz\n\nSubscribers: aheejin, mehdi_amini, mgorny, steven_wu, dexonsmith, cfe-commits, llvm-commits\n\nTags: #clang, #llvm\n\nDifferential Revision: https://reviews.llvm.org/D64580", "modified": "M | /cfe/trunk/cmake/modules/AddClang.cmake\nM | /cfe/trunk/tools/libclang/CMakeLists.txt\nM | /llvm/trunk/cmake/modules/AddLLVM.cmake\nM | /llvm/trunk/tools/llvm-shlib/CMakeLists.txt\nM | /llvm/trunk/tools/lto/CMakeLists.txt\nM | /llvm/trunk/tools/remarks-shlib/CMakeLists.txt\n"}, {"commit_id": "365905", "date": "2019-07-12T15:11:28.302312Z", "author": "tstellar", "msg": "cmake: Fix install of libclang-cpp.so when LLVM_INSTALL_TOOLCHAIN_ONLY=ON\n\nSummary:\nIf CLANG_LINK_CLANG_DYLIB is also enabled, then this library needs to be\ninstalled.\n\nFixes PR42575.\n\nReviewers: beanz, smeenai\n\nSubscribers: mgorny, cfe-commits\n\nTags: #clang\n\nDifferential Revision: https://reviews.llvm.org/D64582\n\nConflicts:\n\tclang/tools/clang-shlib/CMakeLists.txt", "modified": "M | /cfe/trunk/tools/clang-shlib/CMakeLists.txt\n"}, {"commit_id": "366429", "date": "2019-07-18T11:55:33.766795Z", "author": "ibiryukov", "msg": "Revert r366422: [OpenCL] Improve destructor support in C++ for OpenCL\n\nReason: this commit causes crashes in the clang compiler when building\nLLVM Support with libc++, see https://bugs.llvm.org/show_bug.cgi?id=42665\nfor details.", "modified": "M | /cfe/trunk/include/clang/AST/DeclCXX.h\nM | /cfe/trunk/lib/AST/DeclCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CGCXXABI.h\nM | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/lib/CodeGen/CGClass.cpp\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/CodeGen/ItaniumCXXABI.cpp\nM | /cfe/trunk/lib/CodeGen/MicrosoftCXXABI.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaOverload.cpp\nA | /cfe/trunk/test/CodeGenOpenCLCXX/addrspace-ctor.cl\nD | /cfe/trunk/test/CodeGenOpenCLCXX/addrspace-with-class.cl\n"}, {"commit_id": "366670", "date": "2019-07-22T09:39:13.583803Z", "author": "mantognini", "msg": "[OpenCL] Improve destructor support in C++ for OpenCL\n\nThis re-applies r366422 with a fix for Bug PR42665 and a new regression\ntest.", "modified": "M | /cfe/trunk/include/clang/AST/DeclCXX.h\nM | /cfe/trunk/include/clang/AST/ExprCXX.h\nM | /cfe/trunk/lib/AST/DeclCXX.cpp\nM | /cfe/trunk/lib/AST/ExprCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CGCXXABI.h\nM | /cfe/trunk/lib/CodeGen/CGCall.cpp\nM | /cfe/trunk/lib/CodeGen/CGClass.cpp\nM | /cfe/trunk/lib/CodeGen/CGDecl.cpp\nM | /cfe/trunk/lib/CodeGen/CGExprCXX.cpp\nM | /cfe/trunk/lib/CodeGen/CodeGenFunction.h\nM | /cfe/trunk/lib/CodeGen/ItaniumCXXABI.cpp\nM | /cfe/trunk/lib/CodeGen/MicrosoftCXXABI.cpp\nM | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/lib/Sema/SemaOverload.cpp\nA | /cfe/trunk/test/CodeGenCXX/PR42665.cpp\nD | /cfe/trunk/test/CodeGenOpenCLCXX/addrspace-ctor.cl\nA | /cfe/trunk/test/CodeGenOpenCLCXX/addrspace-with-class.cl\n"}, {"commit_id": "366694", "date": "2019-07-22T14:47:36.378092Z", "author": "mantognini", "msg": "[NFC] Relaxed regression tests for PR42665\n\nFollowing up on the buildbot failures, this commits relaxes some tests:\ninstead of checking for specific IR output, it now ensures that the\nunderlying issue (the crash), and only that, doesn't happen.", "modified": "M | /cfe/trunk/test/CodeGenCXX/PR42665.cpp\n"}, {"commit_id": "366881", "date": "2019-07-24T09:38:39.195737Z", "author": "sam_parker", "msg": "[ARM][ParallelDSP] Fix pointer operand reordering\n    \nWhile combining two loads into a single load, we often need to\nreorder the pointer operands for the new load. This reordering was\nbroken in the cases where there was a chain of values that built up\nthe pointer.\n\nDifferential Revision: https://reviews.llvm.org/D65193\n", "modified": "M | /llvm/trunk/lib/Target/ARM/ARMParallelDSP.cpp\nA | /llvm/trunk/test/CodeGen/ARM/ParallelDSP/pr42729.ll\n"}, {"commit_id": "369043", "date": "2019-08-15T19:45:28.493949Z", "author": "rnk", "msg": "[Sema] Implement DR2386 for C++17 structured binding\n\nAllow implementations to provide complete definitions of\nstd::tuple_size<T>, but to omit the 'value' member to signal that T is\nnot tuple-like. The Microsoft standard library implements\nstd::tuple_size<const T> this way.\n\nIf the value member exists, clang still validates that it is an ICE, but\nif it does not, then the type is considered to not be tuple-like.\n\nFixes PR33236\n\nReviewers: rsmith\n\nDifferential Revision: https://reviews.llvm.org/D66040", "modified": "M | /cfe/trunk/lib/Sema/SemaDeclCXX.cpp\nM | /cfe/trunk/test/CXX/dcl.decl/dcl.decomp/p3.cpp\nM | /cfe/trunk/test/CXX/drs/dr23xx.cpp\n"}, {"commit_id": "369592", "date": "2019-08-21T22:21:13.230112Z", "author": "jdoerfert", "msg": "[Attributor] FIX: Try to make bots happy\n\nLocally the tight iterations bounds work fine but the bots seem unhappy.\nTry to get green bots and some time to determine the underlying problem.", "modified": "M | /llvm/trunk/test/Transforms/FunctionAttrs/align.ll\nM | /llvm/trunk/test/Transforms/FunctionAttrs/nonnull.ll\nM | /llvm/trunk/test/Transforms/FunctionAttrs/noreturn_sync.ll\nM | /llvm/trunk/test/Transforms/FunctionAttrs/read_write_returned_arguments_scc.ll\n"}, {"commit_id": "369940", "date": "2019-08-26T18:18:07.792775Z", "author": "rsmith", "msg": "Improve behavior in the case of stack exhaustion.\n\nSummary:\nClang performs various recursive operations (such as template instantiation),\nand may use non-trivial amounts of stack space in each recursive step (for\ninstance, due to recursive AST walks). While we try to keep the stack space\nused by such steps to a minimum and we have explicit limits on the number of\nsuch steps we perform, it's impractical to guarantee that we won't blow out the\nstack on deeply recursive template instantiations on complex ASTs, even with\nonly a moderately high instantiation depth limit.\n\nThe user experience in these cases is generally terrible: we crash with\nno hint of what went wrong. Under this patch, we attempt to do better:\n\n * Detect when the stack is nearly exhausted, and produce a warning with a\n   nice template instantiation backtrace, telling the user that we might\n   run slowly or crash.\n\n * For cases where we're forced to trigger recursive template\n   instantiation in arbitrarily-deeply-nested contexts, check whether\n   we're nearly out of stack space and allocate a new stack (by spawning\n   a new thread) after producing the warning.\n\nReviewers: rnk, aaron.ballman\n\nSubscribers: mgorny, cfe-commits\n\nTags: #clang\n\nDifferential Revision: https://reviews.llvm.org/D66361", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticCommonKinds.td\nM | /cfe/trunk/include/clang/Basic/DiagnosticSemaKinds.td\nM | /cfe/trunk/include/clang/Basic/Stack.h\nM | /cfe/trunk/include/clang/Sema/Sema.h\nM | /cfe/trunk/lib/Basic/CMakeLists.txt\nA | /cfe/trunk/lib/Basic/Stack.cpp\nM | /cfe/trunk/lib/Frontend/CompilerInstance.cpp\nM | /cfe/trunk/lib/Sema/Sema.cpp\nM | /cfe/trunk/lib/Sema/SemaExpr.cpp\nM | /cfe/trunk/lib/Sema/SemaInit.cpp\nM | /cfe/trunk/lib/Sema/SemaLookup.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplate.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateDeduction.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiate.cpp\nM | /cfe/trunk/lib/Sema/SemaTemplateInstantiateDecl.cpp\nM | /cfe/trunk/lib/Sema/SemaType.cpp\nM | /cfe/trunk/test/CMakeLists.txt\nA | /cfe/trunk/test/SemaTemplate/stack-exhaustion.cpp\nM | /cfe/trunk/test/lit.cfg.py\nM | /cfe/trunk/test/lit.site.cfg.py.in\nM | /cfe/trunk/tools/driver/driver.cpp\n"}, {"commit_id": "370204", "date": "2019-08-28T13:55:10.786143Z", "author": "hans", "msg": "[SelectionDAG] Don't generate libcalls for wide shifts on Windows (PR42711)\n\nNeither libgcc or compiler-rt are usually used on Windows, so these\nfunctions can't be called.\n\nDifferential revision: https://reviews.llvm.org/D66880", "modified": "M | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.cpp\nM | /llvm/trunk/lib/Target/AArch64/AArch64ISelLowering.h\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.h\nM | /llvm/trunk/test/CodeGen/AArch64/shift_minsize.ll\nM | /llvm/trunk/test/CodeGen/X86/shift_minsize.ll\n"}, {"commit_id": "370850", "date": "2019-09-04T08:19:30.480574Z", "author": "hans", "msg": "Re-commit r363191 \"[MS] Pretend constexpr variable template specializations are inline\"\n\nWhile the next Visual Studio update (16.3) will fix this issue, that hasn't\nshipped yet. Until then Clang wouldn't work with MSVC's headers which seems\nunfortunate. Let's keep this in until VS 16.3 ships. (See also PR42843.)\n\n> Fixes link errors with clang and the latest Visual C++ 14.21.27702\n> headers, which was reported as PR42027.\n>\n> I chose to intentionally make these things linkonce_odr, i.e.\n> discardable, so that we don't emit definitions of these things in every\n> translation unit that includes STL headers.\n>\n> Note that this is *not* what MSVC does: MSVC has not yet implemented C++\n> DR2387, so they emit fully specialized constexpr variable templates with\n> static / internal linkage.\n>\n> Reviewers: rsmith\n>\n> Differential Revision: https://reviews.llvm.org/D63175", "modified": "M | /cfe/trunk/lib/AST/ASTContext.cpp\nA | /cfe/trunk/test/CodeGenCXX/ms-constexpr-var-template.cpp\n"}, {"commit_id": "370902", "date": "2019-09-04T14:01:47.859448Z", "author": "jsji", "msg": "[PowerPC][Altivec] Fix constant argument for vec_dss\n\nSummary:\nThis is similar to vec_ct* in https://reviews.llvm.org/rL304205.\n\nThe argument must be a constant, otherwise instruction selection\nwill fail. always_inline is not enough for isel to always fold\neverything away at -O0.\n\nThe fix is to turn the function into macros in altivec.h.\n\nFixes https://bugs.llvm.org/show_bug.cgi?id=43072\n\nReviewers: nemanjai, hfinkel, #powerpc, wuzish\n\nReviewed By: #powerpc, wuzish\n\nSubscribers: wuzish, kbarton, MaskRay, shchenz, cfe-commits\n\nTags: #clang\n\nDifferential Revision: https://reviews.llvm.org/D66699", "modified": "M | /cfe/trunk/include/clang/Basic/BuiltinsPPC.def\nM | /cfe/trunk/lib/Headers/altivec.h\nM | /cfe/trunk/lib/Sema/SemaChecking.cpp\nA | /cfe/trunk/test/CodeGen/altivec-dss.c\nM | /cfe/trunk/test/CodeGen/builtins-ppc-error.c\n"}, {"commit_id": "372606", "date": "2019-09-23T13:30:23.861582Z", "author": "spatel", "msg": "[x86] fix assert with horizontal math + broadcast of vector (PR43402)\n\nhttps://bugs.llvm.org/show_bug.cgi?id=43402", "modified": "M | /llvm/trunk/lib/Target/X86/X86ISelLowering.cpp\nM | /llvm/trunk/lib/Target/X86/X86ISelLowering.h\nA | /llvm/trunk/test/CodeGen/X86/haddsub-broadcast.ll\n"}, {"commit_id": "372844", "date": "2019-09-25T11:09:46.048061Z", "author": "hans", "msg": "Revert r370850 \"Re-commit r363191 \"[MS] Pretend constexpr variable template specializations are inline\"\"\n\nThis work-around was necessary to handle standard library headers in\nVisual Studio 2019 16.2. Now that 16.3 has shipped to stable, we can\nremove it.\n\n> Re-commit r363191 \"[MS] Pretend constexpr variable template specializations are inline\"\n>\n> While the next Visual Studio update (16.3) will fix this issue, that hasn't\n> shipped yet. Until then Clang wouldn't work with MSVC's headers which seems\n> unfortunate. Let's keep this in until VS 16.3 ships. (See also PR42843.)\n>\n>> Fixes link errors with clang and the latest Visual C++ 14.21.27702\n>> headers, which was reported as PR42027.\n>>\n>> I chose to intentionally make these things linkonce_odr, i.e.\n>> discardable, so that we don't emit definitions of these things in every\n>> translation unit that includes STL headers.\n>>\n>> Note that this is *not* what MSVC does: MSVC has not yet implemented C++\n>> DR2387, so they emit fully specialized constexpr variable templates with\n>> static / internal linkage.\n>>\n>> Reviewers: rsmith\n>>\n>> Differential Revision: https://reviews.llvm.org/D63175", "modified": "M | /cfe/trunk/lib/AST/ASTContext.cpp\nD | /cfe/trunk/test/CodeGenCXX/ms-constexpr-var-template.cpp\n"}, {"commit_id": "372849", "date": "2019-09-25T11:57:51.878045Z", "author": "nico", "msg": "builtins test: Move clear_cache_test.c from a mprotect()ed global to a mmap()ed variable\n\nld64 in the macOS 10.15 SDK gives __DATA a maxprot of 3, meaning it\ncan't be made executable at runtime by default.\n\nChange clear_cache_test.c to use mmap()ed data that's mapped as writable\nand executable from the beginning, instead of trying to mprotect()ing a\n__DATA variable as executable. This fixes the test on macOS with the\n10.15 SDK.\n\nPR43407.\n\nDifferential Revision: https://reviews.llvm.org/D67929", "modified": "M | /compiler-rt/trunk/test/builtins/Unit/clear_cache_test.c\n"}, {"commit_id": "373418", "date": "2019-10-02T01:13:57.939558Z", "author": "rsmith", "msg": "Fix crash on constant-evaluation of pseudo-destruction of a pointer.\n\nWe got confused and thought we might be pseudo-destroying the pointee\ninstead.", "modified": "M | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/test/SemaCXX/constant-expression-cxx2a.cpp\n"}, {"commit_id": "374465", "date": "2019-10-10T22:31:17.695050Z", "author": "rsmith", "msg": "PR43629: Fix crash evaluating constexpr placement new on a subobject of\nan out-of-lifetime object.", "modified": "M | /cfe/trunk/include/clang/Basic/DiagnosticASTKinds.td\nM | /cfe/trunk/lib/AST/ExprConstant.cpp\nM | /cfe/trunk/test/SemaCXX/cxx2a-constexpr-dynalloc.cpp\n"}, {"commit_id": "375025", "date": "2019-10-16T18:06:24.935241Z", "author": "spatel", "msg": "[SLP] avoid reduction transform on patterns that the backend can load-combine (2nd try)\n\nThe 1st attempt at this modified the cost model in a bad way to avoid the vectorization,\nbut that caused problems for other users (the loop vectorizer) of the cost model.\n\nI don't see an ideal solution to these 2 related, potentially large, perf regressions:\nhttps://bugs.llvm.org/show_bug.cgi?id=42708\nhttps://bugs.llvm.org/show_bug.cgi?id=43146\n\nWe decided that load combining was unsuitable for IR because it could obscure other\noptimizations in IR. So we removed the LoadCombiner pass and deferred to the backend.\nTherefore, preventing SLP from destroying load combine opportunities requires that it\nrecognizes patterns that could be combined later, but not do the optimization itself (\nit's not a vector combine anyway, so it's probably out-of-scope for SLP).\n\nHere, we add a cost-independent bailout with a conservative pattern match for a\nmulti-instruction sequence that can probably be reduced later.\n\nIn the x86 tests shown (and discussed in more detail in the bug reports), SDAG combining\nwill produce a single instruction on these tests like:\n\n  movbe   rax, qword ptr [rdi]\n\nor:\n\n  mov     rax, qword ptr [rdi]\n\nNot some (half) vector monstrosity as we currently do using SLP:\n\n  vpmovzxbq       ymm0, dword ptr [rdi + 1] # ymm0 = mem[0],zero,zero,..\n  vpsllvq ymm0, ymm0, ymmword ptr [rip + .LCPI0_0]\n  movzx   eax, byte ptr [rdi]\n  movzx   ecx, byte ptr [rdi + 5]\n  shl     rcx, 40\n  movzx   edx, byte ptr [rdi + 6]\n  shl     rdx, 48\n  or      rdx, rcx\n  movzx   ecx, byte ptr [rdi + 7]\n  shl     rcx, 56\n  or      rcx, rdx\n  or      rcx, rax\n  vextracti128    xmm1, ymm0, 1\n  vpor    xmm0, xmm0, xmm1\n  vpshufd xmm1, xmm0, 78          # xmm1 = xmm0[2,3,0,1]\n  vpor    xmm0, xmm0, xmm1\n  vmovq   rax, xmm0\n  or      rax, rcx\n  vzeroupper\n  ret\n\nDifferential Revision: https://reviews.llvm.org/D67841", "modified": "M | /llvm/trunk/lib/Transforms/Vectorize/SLPVectorizer.cpp\nM | /llvm/trunk/test/Transforms/SLPVectorizer/X86/bad-reduction.ll\n"}]